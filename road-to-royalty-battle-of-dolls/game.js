var _typeof, _instanceof, _classCallCheck, _defineProperties, _createClass, _possibleConstructorReturn, _assertThisInitialized, _get, _superPropBase, _getPrototypeOf, _inherits, _setPrototypeOf, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, GameObject, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, Components, PhaserInput, PhaserInput, PhaserInput, PhaserInput, PhaserInput, PhaserInput;
(function() {
    var _0xB90A = (_0xC620)("Anl3%ttTcorDsn1UBi%%\"rmraTL_%dNtkaedeo!iOItt_atHknfMBeeDNasO%DCe$%eeenRAar%%e%E6aOcpCiaicCa_ei AbsE%o.L2kiie0sEoEHcrhlA0%)sSaPe\'Cv%p%%UcCeohpeh1%1St E TexgrAt%pcexmg%lAlicpr0 b  a3tieGe%alf_i_uiSnOIMnudwPtt8a%olito_B%cdi#oogcryreopcwyo_itteaetacea%Dt%foLetowRBet!u_o%Os_rltoR%pTly_b%EddAvmtaat%_ePpnEtLninerxIDStauAatneocEoemaVtnns%sNaryA%Nen!dFhdFsnDlaIDltSle%iFCPp5Pe0b%np%%eBADEbtU5DOEre6ghp%%oTkwaEaae%sNoAaoEttoHD%e9eit_nDc_hAD_t ruR_br2an MxDT%cninaslea%erat%mnnnerus%%t%LurMduSoUEhttlnflp%emRndui_%iinBbsow%cafoeTwcDl.sdatsen%wc1P_i%menec!%LtniIrlttaCm/tsppecl_%lseDn%LpdrBt_zeY%eeOP2o_e1pewAod%sOntRoHode%ar%a%arit%!treea%tOpgmAaa%aal2owvnnlLyttlsm^c%GypC% en%%afrttjDDI7%Ba%a2ckOzntdTes_eCBOntn3ow%eiaeBi_it_e%nm%BsaMk_wuItr%nohMroOMr_8rN%V%t%g%kn%opp_PittDIeyEelAAOA5%1nMexsgYM1Nna_alABtapHEerniFbs%tudssKpo6CcI%%tEEb%Fudact_8PesefaiadaStbrnleeHebyuhTsAeRieySu(eeLaOd%aeei1_mmcER%aepi0TijoiisSiltm_niD%f1ndw2Tpm%eCE1lHsgaaAgut%5rreafHo0fanSOIEno%muIeirA%n2csg/uAbitT%PeuarrNTtt0morAerUeiE1ohbRs3%stesxgO _totEooxrBeteonolCnOiedTt#nttaUleneiiuErTbubIoAWd%o%eniunSp,d%S.%eslDeci%lCrEkearPwiwSwhh_itra%e%%2te9reT%eoatnOhioeVr1BiFT#LRLMrlObmDFDet%.%0%%sdeNpTEKmuvAlEc_%4iRo%wFLtK%obiiyidtur%g8snwAg1%keSEnOosi%IETnaBaSoG1Np IFrusreDS%esilt/eay%aNeDeKU h%tEne%0icooOo%I0%b%t0sionorne4dc:E%sN%ur3iielseiu%cIO_sRmet%T_%tnmTB%oirIm_u%OXesA%rIgueHgeLC%tc%rlCpb nS6t,kurR%meohyO2_OAAi%Dl%w%o#;nwsLCnee1eCAdcmYemAAps%F_Hh51iw_gt_b%iaaaooc_iti%k!ESrn_WaTsBmr%SiSOcM%kBOxuoe%gEoKcetbi!WMeGaislci__iaeksOoel%,Pafyv%eseBioriy%acarst%0dntOCgasPB6neioAFG%OBPt%1badul%e1st_TuOALUfCets%%_%%lOocWOanBBo%Zl!nlId#nCclAeudBTpTRonshnT%WeRapuSf%lkARd8HUnn_#%tn_RLc_%ub%ATbRDaiTC%pirwnIoEAnDaeilasSMClX%irrnXDAniTunsalp%EnTn1mtoEo%e%%wZxlOWs%%Ssslw1slcTPt_tgrAex%tFAooeIaitcnPgtrt_nr%dniEMBiubuAaDdutiCBmeeeNyhc#no%%0ircT_nrAeEFiuuMnii__%%sk0e__B_sE%Co3fg%c%C%uhPtye`pil%rjBO%REPeSl%TrOgtf%0% emRinlimko!bDitTGiDItndAha%DieRl_G_2mmBrNbnDTtDElcAepVkf2%_suagn1Atftld_c_TntoUtfVinootlB%r$Bk%BsoFBTtBRpmZB_eaeDi%A/trLechIpNc%%EmM%FlowQ3PSD1%3E bU%Urn/t%tMnbRe%%l%DTjF%G2LkOtlBiLdYDoN_lmm_3%nip%lfi%iteruiot%_Fo2UtN8%tpm__cbmmeWrBY_uh%e_naMtaeG5sB5%&%vA3cEiTWeaegln4FH_ce7DfeOAac%coTABgw%%%bzAmMvSE_pFBit5ranLnMsStc3A_iNBogu%%PetAmc2n7oF B6lA%tyal%A%Gip/kiDci_Lan1o1_TverAD9t%_c1a/1EFl%6denIl_s%eDleDKeAlTe%aB ugi%uiuc_rtnEinlgSRntRvOei%GnSI_Bs%%iiCmfi_#9sAnMF7%pnm%eAlh2OP.tAdc%owatC0atseeeksic%%adEnSaCoINt5oFrise_DrtpmA%%2BrdBIBCt%tC5mOunH9_homB8uTnn_tdm:0neiBnD%tatBozcCtcssfBE#enT%ElaAcilU/0N%%AToGrA_sio%%%SIr_no%ACUe%Iy%%ckMegorysIie__euRod1lu3rr\u041cRhOtueyelmtelEdrlssO%onud2n%tPeeG%FVORnc0_fFAPAePeBIH1rETPtCEePA1IPci_ETEocia1W6TOmt%rcgSSkPaEkoMoSsraTGEmE P5NpCPCnaeBoFe%/eE%Fi%sor_eSetdWxno)6TwoxipleyvnxdlCgxu_pAV2%aGgtee2%auHin_o4Co%%TT%opteg%miiHir6oBcCuXacinoN#e_l2yUai.aiazdus%enn%cieaGoEYNVsNdpt%euruirlSitBgetnodsiiBpi.itnlOLigh_%3nT%CxAB\'qWr_%%rAm%%0%%IAAd%l!PeWronBtB0d6%mvLScn/sOFemspAwg%ie1%Sgk_aCr_CAYh olrd%g%tcIFltee1aB1iteb%iegiaAN%d%G2UUUpoUBUoUmeUo_OdciEloautatO%2_uoacsi%_toltI%v_LOoTeA%rAnI%sla0tE%UmTL%T%1_As_iEtt%iccnnAEDgowleLcte$nA$tU$iItet$0nLorlrwdhnth)omijrB/Tap0dltl2iteSeEiIespalnu%o_ii^pdtDvLv%%mdBeynkstbaD8hLNuTantoneenrHillnaiABTtSrcHcoEouCrjsnhl%smTamee%AAam%tCPsitxBrllIat9o%Ral%lg%P3uCulBipio0yt%sr% %cecxn1n3cjgeI_gDfErc0n_heA%ecl0itdAoCcrtleucCa%kdtley%%XdO0u\u04423sDnliop%ettisyoneierjTmePtct#v0oH2%aut%1omsniTOms_TcldoosnTA%%mhow o_tlP0n%sm  AelroAaObckmANoM% worimoTC:).%oooePiektoleOlhct#ArlCHrtLeyeC_Uodtnpoetlnp6_DneopdD cuhmytaulBrbOaumar%b%%8aHoMLrdnita%loBurrolnxdruueafTu%tnR%%rt0cNlnTCt_maeolidtzrlBpreahej/SE0tUdnA%2sSethT%%\u0437llNOl#rccnbs%aatoe/lMpe%c% Ptsli_RrP! %btenoheAwoaIeaHe%1uebBet_psH_ofUsge1sPosttsCni1bslNueNwVi_n.tpeBtlolptLstsOmpBnAsyWtacrwvAS_bcw_%oc%#nktalrlx/dBsirs srcnus%fnG%nssPu%sRd_hbs_saeotb0to0aixici%a%PAneO_pURaBtoSe,oTildAto%SoUmhPDmsF%knBtuuSm9Ei%mRlt_9Date%_C,SSOt nLne$AeIboBtemnvtC%$tDLuBioeisvsenn!Ua%tceureUo%micForrBgnrAfVangOe%c%ua#etNofRonCosl%%rTeraw%Uoe%ree_O2KWDsGmP%btEufuDDew%siHFAnixtIfirATA%uinnddt0t%rr%keTaiU%leasomy%miS4S%_kte_E6uhtGAW!DcI%DCXd%_e_O2RL_&D !%LT7_At#_lZPN_MT_toDFan1uali0hti_aOlN_/Do%%anoOrhv_ptnde7mLaW1_oS1Ecoxnfe%0F%aSm ousCmrOR%N%aa7%ytuntm_aorS%npj0__5CctmaoGh%Ye%ds%ds_%oawRaltYtc\u0435 0daeMa%Ia%eekk_DdE%AE_eoBou8arS%co%DtetBgALnanpnIamI_EsrPa%sodPieAeagewaDdpn%I0olerelfeo%di pCsdalaa_dhavltOadar4PcilusF#%oUAHS%CgiedaEelEo%geencorMtO%1_eLm%eo%XF1%yt_le%smlIugeEeREi_doIopMa%si Fdnaoc4A%Roit%tdUta2MRSen&lnPk/c_Rsmo%Mufbac5crurp%mlpi%etomTe.h%SomoTRfdtrmtnssAtreCT%cRsoproOlnt_%ti12s1csree%1Rect%oicAoAhNSStehmodIaeTA#L#R%o#_eiht%bLlgA#PEe#e%jn%%sltl%%4S%%hmalr_tdTakniOearDspd%D1aaEtB1E%aOyBihmo%bUeBoRwobbU%_g es,Al\u0438%ToE:Cs PtoaRte_tYy%_/T%cNCAno_Merhk%Le_i_SGDnDMlm_s&DG_eBdwo%eCht%%oouwcerd%lo4trr2lReEua%DkLOlO_kao%gLAllE%oi^bieA,1srdys1Tesetf%%eldenDBp%%tTaa2uAIrd%Ogdr%ntrM PNtSUinOaEicn#-tFnBoer BArodNU%ctCDactueIF%$ eauleH1tAiGi araeiUTlait1sieeeAsha%pOprlcIFm%e.iAd4Ao%Atmv#%nAmAIAiLAvtAotl0csoAlocS%e:NSlAt0A%wbAVidv yoAiA%XX1%OmmsECXcAA%t%lT_mNrBeoRcw_%etr%ttndpiornmeeweArC_Nh_lnb_RP8lmtaktSMrA%feAveU%2e eeyl3rsotr_PtlokAih%aIa%_MopEO%icOOmAMiiuE%O^loenUa9kFeitIA_%mt_e3 B1cc%1ASot%si611a2%ercleCKeoeBU1aLa09Fo%_meIe%%ndwoRP1eN3Bt%V%%kA_6nEeSLBnrEsOe%eR_Abalg#IETnp_OR%noNeHMnRetmDiOnri8bNe_eEsBIa0olHam%sstcrixtewFi6ni1aAirdEBod_e%%WtEd%StgNn0AxhIb%sim%4gLXfsaleumedcie%Mi1nSfsnttRoheE%egeaxeTP1occv0rLoF%eUee!%u%tdA!%75dp%rpfB% AsBALAAtEsoos%%EWo1NeDEtcOjBBoieeeBmm%BELlaBvwOem%rrrH%CteP\u0103aCCsoeoSCCC%NeTo%CNx%ltdhpohHaaocaewer#TlB#0ndAsl_OhmMSAideE%gat_kd%1IsoUEphnAv%ctDneltPbnlts%NR_sUYE%_tnaprAcY_U%lngeecAO%amsNSIoItOtDRN%%%R%oiLll%ooDstnr%aoRe%FAYle6%oeTiMscit1be_aoslP1_1rbtO2eT%%SkANAtCiM4omooMOclaCA.SSkdC%enoUDtl_t4cMllCErSeSbSR%TtE4aERr%oWNebtnrewlRrEoPeroudXdrnTt2ospY_Dp_TOFE4s%aaaeChuE_PtoYDe%B%inOGK_AEPlIptA0#NlGt1EAiAlIdohpoaRsc1%lrcne%Ae%aeDNdim%i%BDuB%TL_o%clDtstht%Eeb%p_a2wL_nsILiMe_%sElr%LTasCwD_ftxrP_%MOlodeSimtiLt%oI#%ra_ocTwe%S_enapC%PAmTeM%AedtUaE0CA_Ii2S%AlgyNgdrgi16%oisvoOeMSevc.alCmRE@Hora%_en_oegiotumdrlOiD_MeBu%#oMn%eOdptslO%eg8sAiinFDnIu%evS%dle1ebklroAAArfmwBemDdga%u%iAWEee#rCnCzG9iitmc%rnRAm%m%LirrtADS3AuAGOLkbcoAtenb%he0tttse%rodpW5vltUreaeRhDkScYaAitu%uuA%hrse%%aus%lnItawmra%n%ernPhRDe1ep%%_ce%c%rDDDAoeOeinEoTDiAwsFE#Es%3L%UwntAtgoSEANb%OeEm1mssm_%a%i%oPymb%l%fNFtnrwekdoMoeml%ctSb0rnr%%r%LaaulzAUtPMR,TrpOaoespylA%eul_SarecNagtoHTd%is_lt1lOM%_ot%ea3eoUoIiA_tmAraOoEinp_GPFIteeltnFeEE_sutMasFetPll2ectnAieom1R1GYerBn_feeCK%wDgE%gAWdR0sa_wsohCDoii%ice!xln6isn4egm%bkaSsi2%B2aiSLDsCiAxybleAoet!^eCcLMRicFmp3saiEe%CIlmMaE_somelIiPEaBd%coc%irdenaEe,edo_ea9s_6%s_Eputta_aCn_tm%ooe#iou%%Elc1nTW%%cebl%bFwAatiixooLFi&alSTt__rdrArirlareAfDaSa eREorgAs_islFekgF$eiediselolaniDdrRiDslAvPanoonEakiUaAgfpgoTs%r%lenN_errlsmtt AmpOET%%5_%sl%i,lCeDt%rAg_#RN_llnlb%,0ULC%aTTbt%eebtb%l%aHhBtrrc%oHeFEtoC_xdT/fAtR0e4cLCAr#CiWMOdedydolnrnDp\'kdrcsnBlntcryetedlrE%11AOtpnmet%rlgooabCoLsiosrgant%_nS%L1%cmtel%InTecac1gdO 11aeLEt4iVt!sicjEnTlCi_am_a_ebaE COIoDiE#1liA0u%a%XTF op%zteD tane%OBN0uJctbck%5h%CI%E %BEeoaeg%BItay_dsgEpmcUeHibeIiS%OxobNeiseEcn%r2de.tvi%%6ons$eeoOlyICB%etMFN%ilErOsea_OotoCooO_Maxs_iOcStrNn_ClT ELCT%binl5htODPshmkhmCEtneitseS%deAsosobjAtT%zpoacflDoeiteeeevEtectlP%heCh_BnjpaPcgom%kfA%i_Bm1tne02%tsBeggAyublddbt_r6D%%%pN_lsrtfo1tptg_dOiB=eeuAsCPusAP5nBAntato%COaB%xllR%wiaTeal%fkep%neMn_sswcgLHdDCPdra_ldg%w69PadlL/efXn2etwNheUoeCTO#temeFenosiitr__e%Rotlp%_%ai_#8Eece_dCNirlBtCwiig_lenhaDNtVwtr%CHOweA%iaIe9%tam%unIArril%tbvecbt%Plmes uherIpepNl%eCo$%tp%AC0l$Tri%%io_TAM_mcil=xLnzaTinlBtneExlaAonTseOasElrAVxctiiwnrtxcliOiTcnCiDrrPufDfAeno%twO8nerr%lfbPeTy%DFeIeoUCmatFcgPOmlOrUuI%ArtSihBeEFAtootbhlM&lOuam inaLAn2 #%F%_ram,tD_h#esopk%le0CBa%a0qlat%besAlxToFunc%!i%anPEponclSsef5N%_R%1feGpdiNbeerliikbieEtxtsMeBsniceMHabusmcnG%SzDbisntvhF2FstrwaaTtEt.yrRrgeoesscr0lx%D_daTf%dER6teCuiol_i1o_katrmABvntaslitnaphaNOpEi%o%aopIl%esUtslree%al/eBenntsrt2C_A4nlO%mb%uAupl%s%ehBcttb%tcR:a%rtua%eI%h:epn%PmEDge_eh%FEWumhmrRe%MU:G1deBsodtDwcle%opl_%n%80%0nteTd_neRLN_crc%yGA%tirwOEc%B#mRFeNaouurr_Ft7Pt%nt6beal%S d\u0440stsn_%SiCtd_Awvcot%tUCirUwpO2dNsEt%(a5AcEto,b)k%iba(un%ht,_%0n%mh3twBea4Artee9Wige1leegCzago%%lsn%M%tBmeuF!%Aibg3Ns%ioS%e%i%snI%io_li%aIFnATr1ohYBtRFetAoi %paysns6eoI _%I!%wno%r3LiinEitniajnEn_ex%sRe! Bpgwestsh%npptniTeSiuoFTzia0eT6aCl1lRBmiiccu,oceoi%o%so e oteaAlxeLp3xigSwi%InWz%nrlAvsB%Cd1dMal%uraat0legDto%oeigeyo,eic_rimMpceia_riumDzrsanaTEr1%pDItfai%oertteUS rUAt9u%_%%0e_ auensd%IS%E%1EBc%a01oLbK%t1%NGcCEPp_.uuUeU5oe_IF%%6HDnT%gecUDAw/UressOrIHL%r_p1oorooB%ClSnAuo_k%Oiniwif%C%lnEeeoLoeUkp_HLhVRaa%coIEEceW_b0e%OR%H%f6_lc%scPp/celsUfadetiS1_%s%0gnfr%sssis%utgoeowrBt0l1OAtcrii_iueatnlImnTIlouhuEBOde%S%>B_nudInin_arituRIaoone%ahclEr6RnmrirR_dntcmeStL!%LdfBexAFIesn)iEe_TuClAserhcet%paD%unfT_dor3r%sgTi_t%eecPsBeNri_nee%%aeU#oIn%_eBtesjaedilsA,CSgrIre_n_nnoEetArbiM2g%pmthrr,mttEKramI_eneHoeDomosocrpuesElleca%sRosUEe%UlbopbllA_cdtkuoe%Olaltc%IcUTl %eatAtt%of B-oIAooChlwlehcoExilNNhBNahldrek3ufnAItitauDirgnRleBfctslniuanA_Rrenlu%jD%0ia0seosS IlAeiIobAnmeoi%xU1AoneciLncUS%a0hsslsoe%no%niicC%nnslEon!iABel%ix2eSguFtFgcsiaAAtentD%#%fAcucOBBGvtemeRil%egfsnfn#terilifnetBr1Aon%Oa=Elmoau%%uDd:%r_r_ic1raHEg ollcg%0/_wTe bTb3Pn0enud%TSudCx_L9n!Oi_1%drd oh.s1_getcfedssses_/oEadpODlIeH1ocTDINm%G_aeoeTwG%e/ytpMccelU%dE4stEUMdp%tereaiuEcSTlr_oUvA1%aln%SnastwGuprEkpM2CLnL_mnrTxa%yhnUmCAieNdBt1ton%R1viBeeRoo%ApEp.%iUnItBreFf%sAnoER_evLlec-EdenbRvtssmsyca_iTbyo_e%/a%rD,h%nwAs%51y.szap$nsut%%eHpnIe 3CEtat%%dg0u eonLhNePSscehleP\'oAmp_pc%SwTl,Aeules0BrEIe%%LptTey ast %a1IRiCo%0lelye4IhcSecTOFjT/%%%aptPD A%kRbEl,nReOofkL%e%iiowSams%%tu Ft8M_^k%nefmn0uEsfEE%ffo%%DS%aNdeSSe1eNBsd%ihTu_rCijpdAO0iEclo0lltey%a\u044b%1s2,otFV_%A#_h3ngoEn%6peu_trdkwr%beoio%n%enmUITvRDo%tmARIoDnLrelot__eval#l1%%EMEicss%liihn_itE F%sp%ayana_ey0mwoe%NASa%kDdSlc!%%thir0moDo%faoen#eu%stf%df%1_HgkdnT%tocEcflOlNrdEUtiamDFFatalo%l_%l%ooteiCBO%Tbnl_Bp%*oNd%nho aeoTaAz%%creERurWi%f&mti%toumeWmypeEnce/%%IMgnrBeDFpmRlefMoe3eAtePSi1_7_cc_4htokieeLdsoEo%i ce%a_is%bu2Frmo%_oNnDOepooiA%T%DOlE%%iBerItrpndna UslDcl%eo0elSt_csGzch_oklPbnfsg%sekdE%<_sgttatai/pgna_Seli/nMoAAuzn%%altcOsefueA%eslnl onT_sNR3euAiAsceh%nsr%t%tdodsnnTje %%AeenlBr%eeloagtelnarnntl_cmaih%FteAHtog%_d%A$mErO%TCB%tneRx_%O%%dtDirppeiXkn s%0Gub8febnntkwnePAaAkhdslecrfT%ETnem%r_lLAEEMLoiw_dvv5ta%tmmGaBeco%5%scrhnrr_kote_natdnsHtUeiNoixo0sYnSluA_ueIgn%neRcrot_rus%ro_\u0443etx%lscroviHos(ExQloDFMndaauTioPocFCS#s_pas0eeCrl%/Sstede%adT#lnlttMw%ice1tme2ke%iU%t%Tla!evt%PgIw %ns%gpENuPcniNStwBAEAE$PcroEr%or0lle6eGsspldEleMnoeRdprBCf:miauii3tdgCNd_du3cbe lgedtflnPA7t%tp%EE_Bcsb%keh_I%eErAe%Ectnoeu0aCish%%Orula4dl%D__7iP_ntfiPgwerAaeea0UetOAonpuyT3al6tF%iso%I%eSgsRiaakD%x%uteie%ErsiirCUe%%rul_gP%rEfO%MTroNl4hrrizFc%aoi$dAAwArLbeDetsRobn BnmTC%sc0oiWinLl%l6NCeNlIC3f1Avt$rpdlEa#fUrN ros_iaj%iAdfe/l%E%%__rC#Iyt1s%to0&hoTliNtvolAr%tNestpresAiODnmsne%%lBme#%4mUtn%PbLclF%l %eurdOaAe%1fDtDCB%reis_40oDioMcpnAttf#esheseSoibAd%D%lcGaoeksar%en0Rd.f_meCeEDo%1nER25saeARxu%_rb(d%LebAeDO__t0pAlwIeiLrr_trpiiu_%sconMw/0idrLai,_aw7Tebogtltapsoi%teC b81ekel%poUnte%%ie C%cZ%trm%n$olnwoHTe_L_Oa__lwidit%%apltgatgadne%ecCmC%s gA5zp7irpwirEl%W%oHeaoitygle_ztDI_o_ozmpiArLnIa_R5sTBoge8or%trtEeeelrsmc%eAaRn%NTAep%NBTbSnDineFue knRp%o%erN/keS_dh%%i%%Wilelofttifn!pfeDu,Glr%uDdnpr_Tdw%EeDcvkGiAl_onntVn_c%eEbc_3ApkD#SCL%Bd%yta&rBduRda%v_vLsBAocigC%BsItdAilIag_i%UltA%%lunnovcu%%E_GtaCttaD%-Thf%eer_reIbsr%2oVyIb%a%hBwdneCtUorX3rfraHauoO%iBaFsimapacmncElAtiot2Ari2PpWiueersISeVi sAr%n%iebcEaaodr%DufsSt%m&i%rFDa%joD#t5eieTt2nuB%rvATEB%T8Ff%Ie%2Sad!P0rdtsYRioe%rDwta%goRetmlmVce%wns5tiGAG0AAfAAmsditnPo3AAEia%MeEcues%cf%e_%EteckA,aLt%U/A%cB_NaSreA4oh6imT%th4r b_IDgl%k_oTPtiysl4ceiuEmeAE%iit%jT8e%ne%adN%eoG$lagM%D7uciil_Si SdS1mlRen%eCo%mpalieco%NRt%un%lPkACeeaeGo,Tinim_voCaInBi%epRln_nGr%IseEaaaseMCa_AO1xsI%oeMl0elAfHmO1Webh3tnig%iLlN% da0_Ot%i%%ooiTnDwsoRAot%N\u043aR_Bti_Bmt%on%Uslr%ro3ePaejLwkteFaBikRuAlVlMOsdAPtoRRratRbTnt%l%mnAmeo#prnnnte=D%4i4edOdCn%petaoeMots0a%AiiomOpLaOeeS0DiaAuSEeeItWt%P_PifcB_ncyOeUANAni_fT0SiutntcmeoS)0em_t!lkpoi_oakba_u1_l%p%larnI% tuoe2%uTeeFSstuDgA3o_p_edE_PtcrrR%m8AsCP1oS1eSiM%Hthw5AFAtJO1ild_iAabiFis%oe2tlbu%ids_ei_5letooARAHmlfL%%ptniVRWaeeLl_oAniDtkeadA7uke0os%t%%ewe4n%OEo%%I2%0atemtCoiH%nIAPrtsACohc0tLcAloear3_ltdPmemcadtua_naERot%Me^ortAaf%_ctOsND%4_W%iGoittd4E8dARa%32taAnlNw_e0eSA_cvdLedto%OttnThOim_Rpitrovtwi%%%ef_M%e_a%UmAlcoilOiurlsi6e_Bo4%e%pcaItT2OAroNmlPI%rcteoebnl%_F0ea%7mCCO%d4rm_iy_l4t0nafm_6r3gleRldm%ca1ot0DawkrlTMbtsmot#SnASUt,rbptDb.o%Amllris%r%owF%La 2iiItlCCRrb0DPwilen_A%eT1%ewfs#%as#SeWdarS%_wts%lTmTgr %D2EnbnTr0#%gsvvNixrHnUEE%/ut%eta%ntpB%Ad_r tooAuSRpSANA_irInua2nA_Rio%r|hr%etOLtCE_TEXtiAEcctxRotca$ceO_W4a3ehcjcdee_s gsSlejfRenEa%atBASUtcCt3Cp_#ntr!oettaCl!%lH%_aO%xmsBkAaeAoE1,oAoECnnCDDg% dDtiAniAackrlE%_%GuaEtlal%Ae%E%anO_kyoianm%t2Oaae%t_VftlEtu3tso%t ooer!rcxsbRanl\u044bU%UH\'ttiod%asoOeEtEaNo4niehb%estohnhmcgiwdsRuKLAegtCf1e%aAOb_ittka#0Twlo_foK%eGHmw%oNdB%To%esu_mo%d_ee%NKw#_nTclunlRti%1no^DTxlEAiAtli4kI%xoImbSB_tn%topBa%niTePcTnlsaTotASMWO6AatuUhdiS%ASpkr/sgnoO%i&c!eda_ecB/wEgwo_%beTteesahaek _rropDA/m%oaliEs9dee%resI_h_%sakSffBC% t7oRibrIe%iaIB_c\u0430bt_BLBteTsX_mitPceMoITisePAEb!otLs02BSflur2othivhdul0%rTtuAuplCsDtrA%O0rru pIP0L_bVigftieaa1unAel2ewteeU%#%epsI0teo4eUCeoi%tAeo/le3%o_tauLiabI%RrtG%6c0ONBtB%ELkeE0/.e%%_5P\u041aTSss1gstau%%#osrOfVsruid_awLuiltueWfS&_coAgcBeboloo%#i0i8^0Z3%0seIHtA%_%#%yokEa oltuAeorken0BtxfecF%iLiLGeo1%_Aegd_xu%d%rblae1%%0%cO0C3twVnoTc%CiJBdfaensn%NrbedstTlm%ye9dTAoAn wnelovet%cEUfeagofgaOao%tHvnvnfc\'e%%aA%aedMCttoct darTeLDu1intacesfA%i%aept%C/tUDAbLtnnLo0T#oyo%tg%%1A!cu%s%Afie%top_eyBtuESrhre%ugnelOmtoEutrOhKmceewas!sioV1ea&d3ecgAeioea%//aw%.tdoa0%rTdte.Az%Bers%l_0R3%wsdgi_fL1cu_tsegcepws%sftaPc_AlgstcUenEctaO%onwTsbl.Lat/%_ DFacyTlc_cwX_UwsASsa.%OO%4yosicogT_rw%N_hoct6nu%oa%e0mcoz%Mi___eltnAwsS8mTxweAc_wt%auMl_3sU_/GcMoow%%bdcirvs.Nce/%iatg1mo1sSw tiF%sderaUl%-Doe/oeu_iyB%Oseot%/%etd.dmmS!bTB_o\u0434e%AarnlSe0aM%ouesSwy_beyDearol%ewc0stsS%eAY/wieleebDus/.ct%NRtGXCiL/awRiLOw0acmsbt.tv5tImHIc%LOumgiCoSeirlSilNo%hamTO%TCiuVBgmu%seepribwnwacewnTisssm3pcteReTAlBsui%/%e%tL4anabol2osdr/kL%G%mrOr.tntvd/cBsefBCSsoT%sta%h%BD%elttTs%uri%oic 1%tUl.tAmIie!wii%junlsIt%_2VsNinrIdUptsnnmdn%tccSysIBnmAetArd_ClEju%okpitDGOUersRensecisirSi$eoavnPcVlzfciS#AnUroSk0oo%=DHElntatT,llpaii_nDr 3p%iaDn%bxnotcU%DnA\'b__DFoi%dodfgmc!hdVkeiooZEbtneEiEo%oAL_B%_ai3tadlBWtBegLncTNta%NluiAaLl1SAInKPPeAwtTo1oDiCnlvSuSNrnycassoCpgI09eSoO%_,olNEeB_%Rstm%hFEC.ts2etT%rreTtXrulA1Eeai% teifmttFvioAtaR_elOeNtett_,aP%ab%Os_aAiexui%a%ilh%aigO_ghUnsactezSSrtEunvIoctd%_Cnn1tsOMelcsMrt%imbt7Und%testC2mtBTr#inh%a% im0holteaoe%g2%tCioS_hcMonD9nEd%bsitirusMcaAlo%cGn%mEaeeri1LloeOaioeafdtgdErct0_itltwAVebreftVutyI%1iHeB%C%E%roArawwC%ue%sooofparcbME tFuUbla!0HaiITnf#hlItc#Iepee3exahgd1ezIIOMreusolleicencitFptGiaeUtD%NWteellBcbte%li%tiBeoApoTekhnscekoS inrieCtdteBGTpPan4rtd91 e%S2atonwosi%oUpEiehaepBAitaIknE%Ifc0leHetwE%Erm0e_aDdbebfp tdeoa__Dt4ieitcnnEPpDl2tetOm_yt%rseciCSrs%tiiu!AwP_ott1Il iA%Snuctr%%aSvr%umFeLdtgS1(_2soig%ktp2Ao#SL_xrnsdBsIauineehy%RAroye1nPst#hb%IabAO_P%iH1SFS%Sl%2&nrEli Anbpi%oMvencettTs%s0ucato_bttrn2abyAmc3AdrIk%0dRanTSot%E%RrnlTk_ue%o_%ni%9eGerD%lspheLuatsIytU$PBstlT:_n_O1naCesrjwoafeeL24teentdrruBnd1liOAc2Text%lo%e_xiolaT_%Pitneaenet%%aTehnN%aRs,uYFar%7LrcLednytK%rcxiOet%d0nNoaoc", 3135284);

    function _0xC639() {
        var _0xC814 = {};
        for (var _0xC6E8 = 0; _0xC6E8 < arguments.length; _0xC6E8 += 2) {
            _0xC814[arguments[_0xC6E8]] = arguments[_0xC6E8 + 1]
        };
        return _0xC814
    }

    function _0xC620(_0xD02F, _0x16A17) {
        var _0xC9D6 = _0xD02F.length;
        var _0xD6BA = [];
        for (var _0xD5F2 = 0; _0xD5F2 < _0xC9D6; _0xD5F2++) {
            _0xD6BA[_0xD5F2] = _0xD02F.charAt(_0xD5F2)
        };
        for (var _0xD5F2 = 0; _0xD5F2 < _0xC9D6; _0xD5F2++) {
            var _0xD016 = _0x16A17 * (_0xD5F2 + 319) + (_0x16A17 % 22663);
            var _0xD3E5 = _0x16A17 * (_0xD5F2 + 461) + (_0x16A17 % 34552);
            var _0xCE3B = _0xD016 % _0xC9D6;
            var _0x169E5 = _0xD3E5 % _0xC9D6;
            var _0xFD02 = _0xD6BA[_0xCE3B];
            _0xD6BA[_0xCE3B] = _0xD6BA[_0x169E5];
            _0xD6BA[_0x169E5] = _0xFD02;
            _0x16A17 = (_0xD016 + _0xD3E5) % 7219999
        };
        var _0x169FE = String.fromCharCode(127);
        var _0xD6A1 = '';
        var _0x16A30 = '%';
        var _0xD5C0 = '#1';
        var _0xC6E8 = '%';
        var _0xC85F = '#0';
        var _0xC814 = '#';
        return _0xD6BA.join(_0xD6A1).split(_0x16A30).join(_0x169FE).split(_0xD5C0).join(_0xC6E8).split(_0xC85F).join(_0xC814).split(_0x169FE)
    }

    function _0xB923(_0xC652) {
        if (typeof Symbol === _0xB90A[1] && typeof Symbol.iterator === _0xB90A[2]) {
            _typeof = function _typeof(_0xC652) {
                return typeof _0xC652
            }
        } else {
            _typeof = function _typeof(_0xC652) {
                return _0xC652 && typeof Symbol === _0xB90A[1] && _0xC652.constructor === Symbol && _0xC652 !== Symbol.prototype ? _0xB90A[2] : typeof _0xC652
            }
        };
        return _typeof(_0xC652)
    }

    function _0xB93C(_0xC66B, _0xC684) {
        if (_0xC684 != null && typeof Symbol !== _0xB90A[3] && _0xC684[Symbol.hasInstance]) {
            return !!_0xC684[Symbol.hasInstance](_0xC66B)
        } else {
            return _0xC66B instanceof _0xC684
        }
    }

    function _0xB955(_0xC6B6, _0xC69D) {
        if (!_0xB93C(_0xC6B6, _0xC69D)) {
            throw new TypeError(_0xB90A[4])
        }
    }

    function _0xB96E(_0xC71A, _0xC701) {
        for (var _0xC6E8 = 0; _0xC6E8 < _0xC701.length; _0xC6E8++) {
            var _0xC6CF = _0xC701[_0xC6E8];
            _0xC6CF.enumerable = _0xC6CF.enumerable || false;
            _0xC6CF.configurable = true;
            if (_0xB90A[5] in _0xC6CF) {
                _0xC6CF.writable = true
            };
            Object.defineProperty(_0xC71A, _0xC6CF.key, _0xC6CF)
        }
    }

    function _0xB987(_0xC69D, _0xC733, _0xC74C) {
        if (_0xC733) {
            _0xB96E(_0xC69D.prototype, _0xC733)
        };
        if (_0xC74C) {
            _0xB96E(_0xC69D, _0xC74C)
        };
        return _0xC69D
    }

    function _0xB9A0(_0xC77E, _0xC765) {
        if (_0xC765 && (_typeof(_0xC765) === _0xB90A[6] || typeof _0xC765 === _0xB90A[1])) {
            return _0xC765
        };
        return _0xB9B9(_0xC77E)
    }

    function _0xB9B9(_0xC77E) {
        if (_0xC77E === void(0)) {
            throw new ReferenceError(_0xB90A[7])
        };
        return _0xC77E
    }

    function _0xB9D2(_0xC71A, _0xC797, _0xC7B0) {
        if (typeof Reflect !== _0xB90A[3] && Reflect[_0xB90A[8]]) {
            _get = Reflect[_0xB90A[8]]
        } else {
            _get = function _get(_0xC71A, _0xC797, _0xC7B0) {
                var _0xC7C9 = _0xB9EB(_0xC71A, _0xC797);
                if (!_0xC7C9) {
                    return
                };
                var _0xC7E2 = Object.getOwnPropertyDescriptor(_0xC7C9, _0xC797);
                if (_0xC7E2[_0xB90A[8]]) {
                    return _0xC7E2[_0xB90A[8]].call(_0xC7B0)
                };
                return _0xC7E2.value
            }
        };
        return _get(_0xC71A, _0xC797, _0xC7B0 || _0xC71A)
    }

    function _0xB9EB(_0xC7FB, _0xC797) {
        while (!Object.prototype.hasOwnProperty.call(_0xC7FB, _0xC797)) {
            _0xC7FB = _getPrototypeOf(_0xC7FB);
            if (_0xC7FB === null) {
                break
            }
        };
        return _0xC7FB
    }

    function _0xBA04(_0xC814) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(_0xC814) {
            return _0xC814.__proto__ || Object.getPrototypeOf(_0xC814)
        };
        return _getPrototypeOf(_0xC814)
    }

    function _0xBA1D(_0xC82D, _0xC846) {
        if (typeof _0xC846 !== _0xB90A[1] && _0xC846 !== null) {
            throw new TypeError(_0xB90A[9])
        };
        _0xC82D.prototype = Object.create(_0xC846 && _0xC846.prototype, _0xC639(_0xB90A[10], _0xC639(_0xB90A[5], _0xC82D, _0xB90A[11], true, _0xB90A[12], true)));
        if (_0xC846) {
            _setPrototypeOf(_0xC82D, _0xC846)
        }
    }

    function _0xBA36(_0xC814, _0xC85F) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(_0xC814, _0xC85F) {
            _0xC814.__proto__ = _0xC85F;
            return _0xC814
        };
        return _setPrototypeOf(_0xC814, _0xC85F)
    }

    function _0xBA4F(Components) {
        var _0xC878 = function(_0xC8AA) {
            _0xBA1D(_0xC878, _0xC8AA);

            function _0xC878() {
                var _0xC9A4;
                _0xB955(this, _0xC878);
                _0xC9A4 = _0xB9A0(this, _getPrototypeOf(_0xC878).apply(this, arguments));
                _0xC9A4.isRebrand = false;
                return _0xC9A4
            }
            _0xB987(_0xC878, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.scheduler = this.gameObject.parent.getComponent(Components.AnimationScheduler);
                this.calculateTotalDuration();
                if (this.scheduler != null) {
                    this.scheduler.updateDuration(this.totalDuration);
                    this.scheduler.addAnimation(this)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[15], _0xB90A[5], function _0xC972(_0xC9BD) {
                if (this.isRebrand) {
                    this.gameObject.visible = false;
                    return
                };
                this.setStatus(_0xC9BD);
                if (this.status == _0xC891.inactive) {
                    this.gameObject.visible = false
                } else {
                    if (this.status == _0xC891.active) {
                        this.gameObject.visible = true;
                        this.updateTransform(_0xC9BD)
                    } else {
                        this.gameObject.visible = false
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[16], _0xB90A[5], function _0xC959(_0xC9BD) {
                for (var _0xC6E8 = 0; _0xC6E8 < this.tweens.length; _0xC6E8++) {
                    var _0xCA21 = this.tweens[_0xC6E8];
                    if (_0xC6E8 == 0 && _0xCA21.startKF > _0xC9BD) {
                        this.status = _0xC891.inactive;
                        return
                    };
                    if (_0xC6E8 == this.tweens.length - 1 && _0xCA21.endKF < _0xC9BD) {
                        this.status = _0xC891.inactive;
                        return
                    };
                    if (_0xCA21.startKF <= _0xC9BD && _0xCA21.endKF >= _0xC9BD) {
                        if (_0xCA21.endKF == _0xC9BD && _0xC9BD != this.scheduler.getTotalFrames()) {
                            this.status = _0xC891.inactive
                        } else {
                            this.status = _0xC891.active
                        };
                        return
                    }
                };
                this.status = _0xC891.inactive
            }), _0xC639(_0xB90A[13], _0xB90A[17], _0xB90A[5], function _0xC98B(_0xC9BD) {
                this.findKeyframes(_0xC9BD);
                if (!this.startKeyframe) {
                    if (this.tweens.length != 0) {
                        this.gameObject.visible = false
                    };
                    return
                };
                if (this.startKeyframe > _0xC9BD) {
                    this.gameObject.visible = false;
                    return
                };
                if (this.startKeyframe.x != this.endKeyframe.x || this.gameObject.x != this.endKeyframe.x) {
                    this.gameObject.position.x = this.lerp(this.startKeyframe.x, this.endKeyframe.x, this.calculatePercent(_0xC9BD))
                };
                if (this.startKeyframe.y != this.endKeyframe.y || this.gameObject.y != this.endKeyframe.y) {
                    this.gameObject.position.y = this.lerp(this.startKeyframe.y, this.endKeyframe.y, this.calculatePercent(_0xC9BD))
                };
                if (this.startKeyframe.alpha != this.endKeyframe.alpha || this.gameObject.alpha != this.endKeyframe.alpha) {
                    this.gameObject.alpha = this.lerp(this.startKeyframe.alpha, this.endKeyframe.alpha, this.calculatePercent(_0xC9BD))
                };
                if (this.startKeyframe.x != this.endKeyframe.sx || this.gameObject.scale.x != this.endKeyframe.sx) {
                    this.gameObject.scale.x = this.lerp(this.startKeyframe.sx, this.endKeyframe.sx, this.calculatePercent(_0xC9BD))
                };
                if (this.startKeyframe.y != this.endKeyframe.sy || this.gameObject.scale.y != this.endKeyframe.sy) {
                    this.gameObject.scale.y = this.lerp(this.startKeyframe.sy, this.endKeyframe.sy, this.calculatePercent(_0xC9BD))
                };
                if (this.startKeyframe != this.endKeyframe.angle || this.gameObject.angle != this.endKeyframe.angle) {
                    var _0xCA85 = this.startKeyframe.angle;
                    var _0xCA6C = this.endKeyframe.angle;
                    if (Math.abs(_0xCA85 - _0xCA6C) > 180) {
                        if (_0xCA6C > _0xCA85) {
                            _0xCA6C = _0xCA85 - (360 - _0xCA6C)
                        } else {
                            _0xCA85 = _0xCA6C - (360 - _0xCA85)
                        }
                    };
                    _0xCA85 *= -1;
                    _0xCA6C *= -1;
                    this.gameObject.angle = this.lerp(_0xCA85, _0xCA6C, this.calculatePercent(_0xC9BD))
                }
            }), _0xC639(_0xB90A[13], _0xB90A[18], _0xB90A[5], function _0xC90E(_0xC9BD) {
                for (var _0xC6E8 = 0; _0xC6E8 < this.tweens.length; _0xC6E8++) {
                    var _0xCA21 = this.tweens[_0xC6E8];
                    if (_0xCA21.startKF <= _0xC9BD && _0xCA21.endKF >= _0xC9BD) {
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xCA21.keyframes.length; _0xC9D6++) {
                            var _0xC9EF = _0xCA21.keyframes[_0xC9D6];
                            if (_0xC9EF.startKF > _0xC9BD) {
                                if (_0xC9D6 == 0 || _0xC9D6 == _0xCA21.keyframes.length - 1 && _0xC9EF.startKF == _0xC9BD) {
                                    this.startKeyframe = _0xC9EF;
                                    this.endKeyframe = _0xC9EF;
                                    return
                                };
                                this.startKeyframe = _0xCA21.keyframes[_0xC9D6 - 1];
                                this.endKeyframe = _0xC9EF;
                                return
                            }
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[19], _0xB90A[5], function _0xC8C3(_0xC9BD) {
                if (this.endKeyframe.startKF - this.startKeyframe.startKF == 0) {
                    return 0
                };
                return (_0xC9BD - this.startKeyframe.startKF) / (this.endKeyframe.startKF - this.startKeyframe.startKF)
            }), _0xC639(_0xB90A[13], _0xB90A[20], _0xB90A[5], function _0xC940(_0xC927, _0xCA3A, _0xCA53) {
                return _0xC927 + _0xCA53 * (_0xCA3A - _0xC927)
            }), _0xC639(_0xB90A[13], _0xB90A[21], _0xB90A[5], function _0xC8DC() {
                for (var _0xC6E8 = 0; _0xC6E8 < this.tweens.length; _0xC6E8++) {
                    var _0xCA08 = this.tweens[_0xC6E8].keyframes;
                    this.tweens[_0xC6E8][_0xB90A[22]] = ~~(_0xCA08[0].start / 1000 * 60);
                    this.tweens[_0xC6E8][_0xB90A[23]] = ~~(_0xCA08[_0xCA08.length - 1].end / 1000 * 60);
                    for (var _0xC9D6 = 0; _0xC9D6 < _0xCA08.length; _0xC9D6++) {
                        var _0xC9EF = _0xCA08[_0xC9D6];
                        _0xC9EF[_0xB90A[22]] = ~~(_0xC9EF.start / 1000 * 60);
                        _0xC9EF[_0xB90A[23]] = ~~(_0xC9EF.end / 1000 * 60);
                        if (_0xC6E8 + 1 == this.tweens.length && _0xC9D6 + 1 == _0xCA08.length) {
                            this.totalDuration = ~~(_0xC9EF.end / 1000 * 60)
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.tweens = null;
                _get(_getPrototypeOf(_0xC878.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0xC878
        }(Scene.Component);
        Components.AnimationComponent = _0xC878;
        var _0xC891;
        (function(_0xC891) {
            _0xC891[_0xC891[_0xB90A[25]] = 0] = _0xB90A[25];
            _0xC891[_0xC891[_0xB90A[26]] = 1] = _0xB90A[26]
        })(_0xC891 || (_0xC891 = {}))
    }

    function _0xBA68(Components) {
        var _0xCA9E = function(_0xCAB7) {
            _0xBA1D(_0xCA9E, _0xCAB7);

            function _0xCA9E() {
                var _0xCBE3;
                _0xB955(this, _0xCA9E);
                _0xCBE3 = _0xB9A0(this, _getPrototypeOf(_0xCA9E).apply(this, arguments));
                _0xCBE3.startEvent = _0xB90A[27];
                _0xCBE3.stopEvent = _0xB90A[27];
                _0xCBE3.pauseEvent = _0xB90A[27];
                _0xCBE3.resumeEvent = _0xB90A[27];
                _0xCBE3.reverseEvent = _0xB90A[27];
                _0xCBE3.endEvent = _0xB90A[27];
                _0xCBE3.loop = false;
                _0xCBE3.startDelay = 0;
                _0xCBE3.loopDelay = 0;
                _0xCBE3.transitionAnim = false;
                _0xCBE3._animations = [];
                _0xCBE3._complete = 0;
                _0xCBE3._totalFrames = 0;
                _0xCBE3._totalDuration = 0;
                _0xCBE3.isInit = false;
                _0xCBE3._totalTime = 0;
                _0xCBE3._paused = false;
                _0xCBE3.onCreate = function() {
                    _0xCBE3.copyFromMainScheduler();
                    if (!_0xCBE3.startEvent) {
                        _0xCBE3.startEvent = _0xB90A[28]
                    };
                    if (_0xCBE3.startEvent != _0xB90A[28]) {
                        _0xCBE3.events.addEventListener(_0xB90A[28], _0xCBE3.unitLoaded, true)
                    };
                    _0xCBE3.events.addEventListener(_0xCBE3.startEvent, _0xCBE3.startAnims);
                    if (_0xCA9E.debugMode) {
                        _0xCBE3.gameObject.game.input.addMoveCallback(function() {
                            _0xCBE3._paused = false
                        }, _0xB9B9(_0xCBE3));
                        _0xCBE3.gameObject.game.input.onDown.add(function() {
                            _0xCBE3._paused = false
                        }, _0xB9B9(_0xCBE3))
                    }
                };
                _0xCBE3.onPause = function() {
                    _0xCBE3._paused = true
                };
                _0xCBE3.onResume = function() {
                    _0xCBE3._paused = false
                };
                _0xCBE3.unitLoaded = function() {
                    _0xCBE3.updateAnims(1);
                    if (_0xCBE3.startEvent == _0xB90A[28]) {
                        _0xCBE3.startAnims()
                    };
                    if (_0xCBE3.transitionAnim) {
                        _0xCBE3.events.removeEventListener(_0xB90A[28], _0xCBE3.unitLoaded)
                    }
                };
                _0xCBE3.startAnims = function() {
                    _0xCBE3.gameObject.game.time.events.add(_0xCBE3.startDelay, function() {
                        _0xCBE3._totalTime = 0;
                        _0xCBE3.events.addEventListener(_0xB90A[29], _0xCBE3.Update);
                        _0xCBE3._paused = false
                    }, _0xB9B9(_0xCBE3))
                };
                _0xCBE3.Update = function() {
                    if (!_0xCBE3._paused) {
                        if (_0xCA9E.debugMode) {
                            _0xCBE3._paused = true
                        };
                        var _0xCBFC = _0xCBE3.gameObject.game.time.elapsed / 1000;
                        _0xCBE3._totalTime += _0xCBFC > 1 ? 0 : _0xCBFC;
                        if (_0xCBE3._totalTime > _0xCBE3._totalDuration) {
                            _0xCBE3._totalTime = _0xCBE3._totalDuration
                        };
                        var _0xC9BD = Math.round(_0xCBE3._totalTime * 60);
                        _0xCBE3.updateAnims(_0xC9BD);
                        if (_0xCBE3._totalTime == _0xCBE3._totalDuration) {
                            _0xCBE3.updateAnims(~~(_0xCBE3._totalTime * 60));
                            _0xCBE3.onComplete()
                        }
                    }
                };
                return _0xCBE3
            }
            _0xB987(_0xCA9E, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(_0xB90A[31], this.onCreate, true)
            }), _0xC639(_0xB90A[13], _0xB90A[32], _0xB90A[5], function _0xCAE9() {
                var _0xCC15 = this.findMainSccheduler(this.gameObject, null);
                if (_0xCC15 == null || _0xCC15 == this) {
                    return
                };
                this.startDelay = _0xCC15.startDelay;
                this.startEvent = _0xCC15.startEvent;
                this.stopEvent = _0xCC15.stopEvent;
                this.pauseEvent = _0xCC15.pauseEvent;
                this.resumeEvent = _0xCC15.resumeEvent;
                this.reverseEvent = _0xCC15.reverseEvent;
                this.endEvent = _0xB90A[27];
                this.transitionAnim = _0xCC15.transitionAnim
            }), _0xC639(_0xB90A[13], _0xB90A[33], _0xB90A[5], function _0xCB02(_0xCC47, _0xCC2E) {
                if (_0xCC47 == null || !_0xCC47.getComponent) {
                    return _0xCC2E
                };
                var _0xCC60 = _0xCC47.getComponent(_0xCA9E);
                if (_0xCC60 != null) {
                    return this.findMainSccheduler(_0xCC47.parent, _0xCC60)
                } else {
                    return this.findMainSccheduler(_0xCC47.parent, _0xCC2E)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[34], _0xB90A[5], function _0xCB34(_0xCC79) {
                if (!this.isInit) {
                    this._totalFrames = _0xCC79;
                    this.isInit = true;
                    this._totalDuration = this._totalFrames / 60
                }
            }), _0xC639(_0xB90A[13], _0xB90A[35], _0xB90A[5], function _0xCBB1(_0xCC79) {
                if (_0xCC79 >= this._totalFrames) {
                    this._totalFrames = _0xCC79;
                    this.isInit = true;
                    this._totalDuration = this._totalFrames / 60
                }
            }), _0xC639(_0xB90A[13], _0xB90A[36], _0xB90A[5], function _0xCB1B() {
                return this._totalFrames
            }), _0xC639(_0xB90A[13], _0xB90A[37], _0xB90A[5], function _0xCB4D(_0xCC92) {
                return _0xCC92 == this._totalFrames
            }), _0xC639(_0xB90A[13], _0xB90A[38], _0xB90A[5], function _0xCAD0(_0xCBCA) {
                this._animations.push(_0xCBCA)
            }), _0xC639(_0xB90A[13], _0xB90A[39], _0xB90A[5], function _0xCB98(_0xC9BD) {
                this._animations.forEach(function(_0xCCC4) {
                    _0xCCC4.Update(_0xC9BD)
                })
            }), _0xC639(_0xB90A[13], _0xB90A[40], _0xB90A[5], function _0xCB7F() {
                var _0xCCAB = this;
                if (this.loop) {
                    this._paused = true;
                    this.gameObject.game.time.events.add(this.loopDelay, function() {
                        _0xCCAB._totalTime = 0;
                        _0xCCAB._paused = false
                    }, this)
                } else {
                    this._paused = true
                };
                if (this.endEvent) {
                    this.events.throwEvent(this.endEvent)
                }
            })]);
            return _0xCA9E
        }(Scene.Component);
        _0xCA9E.debugMode = false;
        Components.AnimationScheduler = _0xCA9E
    }

    function _0xBA81(Components) {
        var _0xCCF6 = function(_0xCD0F) {
            _0xBA1D(_0xCCF6, _0xCD0F);

            function _0xCCF6() {
                var _0xCD28;
                _0xB955(this, _0xCCF6);
                _0xCD28 = _0xB9A0(this, _getPrototypeOf(_0xCCF6).apply(this, arguments));
                _0xCD28.repeat = 0;
                _0xCD28.yoyo = false;
                _0xCD28.disableAtTheEnd = false;
                _0xCD28.enableAtTheEnd = false;
                _0xCD28.overwrite = false;
                _0xCD28.easing = _0xB90A[27];
                _0xCD28.easingMode = _0xB90A[27];
                _0xCD28.tweens = [];
                return _0xCD28
            }
            _0xB987(_0xCCF6, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                _get(_getPrototypeOf(_0xCCF6.prototype), _0xB90A[30], this).call(this);
                if (this.easing == _0xB90A[41]) {
                    this.easingMode = _0xB90A[27]
                } else {
                    this.easing += _0xB90A[42] + this.easingMode
                };
                this.data = _0xC639(_0xB90A[43], this.x, _0xB90A[44], this.y, _0xB90A[45], this.alpha, _0xB90A[46], this.angle, _0xB90A[47], this.scaleX, _0xB90A[48], this.scaleY, _0xB90A[49], this.disableAtTheEnd, _0xB90A[50], this.enableAtTheEnd, _0xB90A[51], this.duration, _0xB90A[52], this.delay, _0xB90A[53], this.overwrite, _0xB90A[54], this.repeat, _0xB90A[55], this.startEvent, _0xB90A[56], this.endEvent, _0xB90A[57], this.yoyo, _0xB90A[58], this.easing);
                this.tweens.push(new _0xCCDD(this.gameObject, this.data))
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.tweens.forEach(function(_0xCA21) {
                    _0xCA21.destroy()
                });
                this.tweens.length = 0;
                this.data = null;
                _get(_getPrototypeOf(_0xCCF6.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0xCCF6
        }(Scene.Component);
        Components.TweenComponent = _0xCCF6;
        var _0xCCDD = function() {
            function _0xCCDD(_0xC7FB, _0xCD8C) {


                var _0xCD73 = this;
                _0xB955(this, _0xCCDD);
                this.tweenData = _0xC639(_0xB90A[43], 0, _0xB90A[44], 0, _0xB90A[46], 0, _0xB90A[45], 0);
                this.scaleData = _0xC639(_0xB90A[43], 0, _0xB90A[44], 0);
                this.onStart = function() {


                    _0xCD73.tween = Components.Tweens.create(_0xCD73.gameObject, _0xCD73.data.overwrite, false);
                    _0xCD73.scaleTween = Components.Tweens.create(_0xCD73.gameObject.scale, _0xCD73.data.overwrite, false);
                    var _0xCDA5 = false;
                    if (Object.getOwnPropertyNames(_0xCD73.tweenData).length != 0) {
                        _0xCD73.tween.to(_0xCD73.tweenData, _0xCD73.data.duration, _0xCD73.ease, true, _0xCD73.data.delay, _0xCD73.data.repeat, _0xCD73.data.yoyo)
                    };
                    if (Object.getOwnPropertyNames(_0xCD73.scaleData).length != 0) {
                        _0xCD73.scaleTween.to(_0xCD73.scaleData, _0xCD73.data.duration, _0xCD73.ease, true, _0xCD73.data.delay, _0xCD73.data.repeat, _0xCD73.data.yoyo)
                    };
                    if (Object.getOwnPropertyNames(_0xCD73.tweenData).length != 0) {
                        _0xCD73.tween.onComplete.addOnce(_0xCD73.onTweenComplete, _0xCD73);
                        _0xCDA5 = true
                    } else {
                        if (Object.getOwnPropertyNames(_0xCD73.scaleData).length != 0) {
                            if (!_0xCDA5) {
                                _0xCD73.scaleTween.onComplete.addOnce(_0xCD73.onTweenComplete, _0xCD73)
                            }
                        }
                    }
                };
                this.onTweenComplete = function() {
                    if (_0xCD73.data.disable) {
                        _0xCD73.gameObject.disableInput()
                    };
                    if (_0xCD73.data.enable) {
                        _0xCD73.gameObject.enableInput()
                    };
                    if (_0xCD73.data.endEvent) {
                        _0xCD73.events.throwEvent(_0xCD73.data.endEvent)
                    }
                };
                this.gameObject = _0xC7FB;
                this.data = _0xCD8C;
                this.events = new EventManager();
                this.events.addEventListener(_0xCD8C.startOn, this.onStart);
                this.setData();
                this.setEase()
            }
            _0xB987(_0xCCDD, [_0xC639(_0xB90A[13], _0xB90A[59], _0xB90A[5], function _0xCD5A() {
                this.ease = this.data.easeType
            }), _0xC639(_0xB90A[13], _0xB90A[60], _0xB90A[5], function _0xCD41() {
                if (this.data.x != null) {
                    this.tweenData.x = this.data.x
                } else {
                    delete this.tweenData.x
                };
                if (this.data.y != null) {
                    this.tweenData.y = this.data.y
                } else {
                    delete this.tweenData.y
                };
                if (this.data.alpha != null) {
                    this.tweenData.alpha = this.data.alpha
                } else {
                    delete this.tweenData.alpha
                };
                if (this.data.angle != null) {
                    this.tweenData.angle = this.data.angle
                } else {
                    delete this.tweenData.angle
                };
                if (this.data.scaleX != null) {
                    this.scaleData.x = this.data.scaleX
                } else {
                    delete this.scaleData.x
                };
                if (this.data.scaleY != null) {
                    this.scaleData.y = this.data.scaleY
                } else {
                    delete this.scaleData.y
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.events.removeEventListener(this.data.startOn, this.onStart);
                this.data = null;
                this.gameObject = null;
                this.events = null;
                if (this.tween) {
                    this.tween.stop(false)
                };
                if (this.scaleTween) {
                    this.tween.stop(false)
                };
                this.tween = null;
                this.scaleTween = null;
                this.tweenData = null;
                this.scaleData = null
            })]);
            return _0xCCDD
        }();
        Components.Tween = _0xCCDD
    }

    function _0xBA9A(Components) {
        var _0xCDBE = function(_0xCDD7) {
            _0xBA1D(_0xCDBE, _0xCDD7);

            function _0xCDBE() {
                var _0xCE09;
                _0xB955(this, _0xCDBE);
                _0xCE09 = _0xB9A0(this, _getPrototypeOf(_0xCDBE).apply(this, arguments));
                _0xCE09.buttonsToShow = [];
                _0xCE09.indexForDollHead = 0;
                _0xCE09.dollHeadPosition = [326, 218, 491, 220, 324, 345, 495, 350, 411, 455];
                _0xCE09.showLastPanel = function() {
                    _0xCE09.buttonsToShow.forEach(function(_0xCE22) {
                        _0xCE22.alpha = 0;
                        _0xCE22.disableInput()
                    });
                    for (var _0xC6E8 = _0xCE09.indexForDollHead; _0xC6E8 < _0xCE09.indexForDollHead + 5; _0xC6E8++) {
                        var _0xCE22 = _0xCE09.buttonsToShow[_0xC6E8];
                        if (!_0xCE22) {
                            continue
                        };
                        _0xCE22.x = _0xCE09.dollHeadPosition[_0xC6E8 % 5 * 2];
                        _0xCE22.y = _0xCE09.dollHeadPosition[_0xC6E8 % 5 * 2 + 1];
                        _0xCE22.alpha = 1;
                        _0xCE22.enableInput()
                    }
                };
                _0xCE09.showDollHeadOnPanel = function(_0xCE3B) {
                    var _0xC684 = _0xCE3B == _0xCE09.arrows[1];
                    if (_0xC684) {
                        _0xCE09.indexForDollHead += 5;
                        if (_0xCE09.indexForDollHead > _0xCE09.buttonsToShow.length) {
                            _0xCE09.indexForDollHead = 0
                        }
                    } else {
                        _0xCE09.indexForDollHead -= 5;
                        if (_0xCE09.indexForDollHead < 0) {
                            _0xCE09.indexForDollHead = _0xCE09.buttonsToShow.length - _0xCE09.buttonsToShow.length % 5
                        }
                    };
                    _0xCE09.showLastPanel()
                };
                _0xCE09.handleButtonsAvalailable = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < Components.SessionData.UNLOCKED_ITEMS.length; _0xC6E8++) {
                        var _0xCE22 = Components.SessionData.UNLOCKED_ITEMS[_0xC6E8];
                        var _0xCE6D = _0xCE22.split(_0xB90A[61]);
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xCE09.buttons.length; _0xC9D6++) {
                            var _0xCE54 = _0xCE09.buttons[_0xC9D6];
                            if (_0xCE6D[1] == _0xCE54.tags[1] && _0xCE6D[2] == _0xCE54.tags[2]) {
                                _0xCE09.buttonsToShow.push(_0xCE54)
                            }
                        }
                    }
                };
                _0xCE09.handleShowPanel = function() {
                    _0xCE09.gameObject.visible = true;
                    _0xCE09.darkLayer.alpha = 0;
                    _0xCE09.darkLayer.visible = true;
                    _0xCE09.darkLayer.enableInput();
                    Components.Tweens.create(_0xCE09.darkLayer).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                    Components.Tweens.create(_0xCE09.gameObject).to(_0xC639(_0xB90A[45], 1), 200, null, true).onComplete.addOnce(function() {
                        _0xCE09.showLastPanel()
                    })
                };
                _0xCE09.hide = function() {
                    _0xCE09.buttons.forEach(function(_0xCE22) {
                        _0xCE22.disableInput()
                    });
                    _0xCE09.gameObject.alpha = 0
                };
                _0xCE09.handleButtonClick = function(_0xCE3B) {
                    _0xCE3B.disableInput();
                    _0xCE09.events.throwEvent(_0xCDBE.BODY_CHOICE, Util.Util.createEventData([
                        [_0xB90A[62], _0xCE3B.tags]
                    ]));
                    _0xCE09.buttonsStatus(false);
                    Components.Tweens.create(_0xCE3B.scale).to(_0xC639(_0xB90A[43], 1.1, _0xB90A[44], 1.1), 100, null, true, 0, 3, true).onComplete.addOnce(function() {
                        Components.Tweens.create(_0xCE09.darkLayer).to(_0xC639(_0xB90A[45], 0), 200, null, true).onComplete.addOnce(function() {
                            _0xCE09.darkLayer.visible = false;
                            _0xCE09.darkLayer.disableInput();
                            _0xCE09.gameObject.visible = false
                        })
                    });
                    Components.Tweens.create(_0xCE09.gameObject).to(_0xC639(_0xB90A[45], 0), 300, null, true).onComplete.addOnce(function() {
                        _0xCE09.events.throwEvent(Components.BattleStoryController.SHOW_ROUND)
                    })
                };
                _0xCE09.buttonsStatus = function(_0xCE86) {
                    _0xCE09.buttons.forEach(function(_0xCE22) {
                        if (_0xCE86) {
                            _0xCE22.enableInput()
                        } else {
                            _0xCE22.disableInput()
                        }
                    })
                };
                return _0xCE09
            }
            _0xB987(_0xCDBE, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xCED1 = this;
                this.buttons = GameObject.getObjectsByTag(_0xB90A[63], false, 1, 0);
                this.darkLayer = GameObject.getObject(_0xB90A[64]);
                this.darkLayer.visible = false;
                this.darkLayer.disableInput();
                this.handleButtonsAvalailable();
                this.buttons.forEach(function(_0xCE22) {
                    _0xCE22.disableInput();
                    _0xCE22.addButtonPressedCallback(_0xCED1.handleButtonClick)
                });
                this.events.addEventListener(_0xCDBE.SHOW_DOLL_PANEL, this.handleShowPanel);
                this.arrows = GameObject.getObjectsByTag(_0xB90A[65], true);
                this.hide();
                if (this.buttonsToShow.length > 5) {
                    this.arrows.forEach(function(_0xCE22) {
                        _0xCE22.addButtonPressedCallback(_0xCED1.showDollHeadOnPanel)
                    })
                } else {
                    this.arrows.forEach(function(_0xCE22) {
                        _0xCE22.visible = false
                    })
                };
                this.buttonsToShow.forEach(function(_0xCE22) {
                    _0xCE22.alpha = 0;
                    _0xCE22.disableInput()
                });
                for (var _0xC6E8 = this.indexForDollHead; _0xC6E8 < this.indexForDollHead + 5; _0xC6E8++) {
                    var _0xCE22 = this.buttonsToShow[_0xC6E8];
                    if (!_0xCE22) {
                        continue
                    };
                    _0xCE22.x = this.dollHeadPosition[_0xC6E8 % 5 * 2];
                    _0xCE22.y = this.dollHeadPosition[_0xC6E8 % 5 * 2 + 1];
                    _0xCE22.alpha = 1
                };
                this.buttonsToShow.forEach(function(_0xCE22) {
                    _0xCE22.alpha = 0;
                    _0xCE22.disableInput()
                });
                for (var _0xCEB8 = this.indexForDollHead; _0xCEB8 < this.indexForDollHead + 5; _0xCEB8++) {
                    var _0xCE9F = this.buttonsToShow[_0xCEB8];
                    if (!_0xCE9F) {
                        continue
                    };
                    _0xCE9F.x = this.dollHeadPosition[_0xCEB8 % 5 * 2];
                    _0xCE9F.y = this.dollHeadPosition[_0xCEB8 % 5 * 2 + 1];
                    _0xCE9F.alpha = 1
                };
                this.gameObject.visible = false
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xCDBE
        }(Scene.Component);
        _0xCDBE.BODY_CHOICE = _0xB90A[67];
        _0xCDBE.SHOW_DOLL_PANEL = _0xB90A[68];
        Components.BattleDollPanel = _0xCDBE
    }

    function _0xBAB3(Components) {
        var _0xCEEA = function(_0xCF03) {
            _0xBA1D(_0xCEEA, _0xCF03);

            function _0xCEEA() {
                var _0xCF1C;
                _0xB955(this, _0xCEEA);
                _0xCF1C = _0xB9A0(this, _getPrototypeOf(_0xCEEA).apply(this, arguments));
                _0xCF1C.maxPoints = 510;
                _0xCF1C.handleNewMax = function(_0xCF35) {
                    var _0xCD8C = _0xCF35.getData(_0xB90A[62]);
                    _0xCF1C.maxPoints = _0xCD8C
                };
                _0xCF1C.handlePoints = function(_0xCF35) {
                    var _0xCD8C = _0xCF35.getData(_0xB90A[62]);
                    if (_0xCD8C[0] == _0xB90A[69]) {
                        _0xCEEA.playerLastScore = _0xCD8C[1]
                    } else {
                        _0xCEEA.enemyLastScore = _0xCD8C[1]
                    };
                    var _0xCF4E = 0;
                    if (_0xCD8C[0] == _0xCF1C.gameObject.tags[2]) {
                        var _0xCF67 = Math.floor(_0xCD8C[1] / _0xCF1C.maxPoints * 10);
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xCF1C.partsArray.length; _0xC6E8++) {
                            var _0xCE22 = _0xCF1C.partsArray[_0xC6E8];
                            if (_0xC6E8 < _0xCF67) {
                                Components.Tweens.create(_0xCE22, true).to(_0xC639(_0xB90A[45], 1), 100, null, true, _0xC6E8 * 10)
                            } else {
                                Components.Tweens.create(_0xCE22, true).to(_0xC639(_0xB90A[45], 0), 100, null, true)
                            }
                        }
                    }
                };
                return _0xCF1C
            }
            _0xB987(_0xCEEA, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.partsArray = GameObject.getObjectsByTag(this.gameObject.tags[2], true, 1, 0);
                this.events.addEventListener(_0xCEEA.BATTLE_POINTS, this.handlePoints);
                this.events.addEventListener(_0xCEEA.NEW_MAX, this.handleNewMax)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xCEEA
        }(Scene.Component);
        _0xCEEA.BATTLE_POINTS = _0xB90A[70];
        _0xCEEA.NEW_MAX = _0xB90A[71];
        _0xCEEA.playerLastScore = 0;
        _0xCEEA.enemyLastScore = 0;
        Components.BattleLifeBar = _0xCEEA
    }

    function _0xBACC(Components) {
        var _0xCF80 = function(_0xCF99) {
            _0xBA1D(_0xCF80, _0xCF99);

            function _0xCF80() {
                var _0xCFB2;
                _0xB955(this, _0xCF80);
                _0xCFB2 = _0xB9A0(this, _getPrototypeOf(_0xCF80).apply(this, arguments));
                _0xCFB2.textArray = [];
                _0xCFB2.storyPhase = 0;
                _0xCFB2.curentReactionStory = [];
                _0xCFB2.initMc = function() {
                    _0xCFB2.mainTextHolder = GameObject.getObject(_0xB90A[72]);
                    _0xCFB2.mainBossContainer = GameObject.getObject(_0xB90A[73]);
                    _0xCFB2.dressupHolder = GameObject.getObject(_0xB90A[74]);
                    _0xCFB2.initialStories = GameObject.getObjectsByTag(_0xB90A[75], true);
                    _0xCFB2.bossBodies = GameObject.getObjectsByTag(_0xB90A[76], true);
                    _0xCFB2.roundPanel = GameObject.getObjectsByTag(_0xB90A[77], true);
                    _0xCFB2.badgeEnemy = GameObject.getObjectsByTag(_0xB90A[78], true);
                    _0xCFB2.badgePlayer = GameObject.getObjectsByTag(_0xB90A[79], true);
                    _0xCFB2.playerCont = GameObject.getObject(_0xB90A[80]);
                    _0xCFB2.enemyCont = GameObject.getObject(_0xB90A[81]);
                    _0xCFB2.panelCont = GameObject.getObject(_0xB90A[82]);
                    _0xCFB2.timer = GameObject.getObject(_0xB90A[83]);
                    _0xCFB2.thunderAnim = GameObject.getObject(_0xB90A[84]);
                    _0xCFB2.anim = GameObject.getObject(_0xB90A[85]);
                    _0xCFB2.tutorial = GameObject.getObject(_0xB90A[86]);
                    _0xCFB2.roundWin = GameObject.getObject(_0xB90A[87]);
                    _0xCFB2.roundLost = GameObject.getObject(_0xB90A[88]);
                    _0xCFB2.winStory = GameObject.getObject(_0xB90A[89]);
                    _0xCFB2.lostStory = GameObject.getObject(_0xB90A[90]);
                    _0xCFB2.nextB = GameObject.getObject(_0xB90A[91]);
                    _0xCFB2.reactionButton = GameObject.getObject(_0xB90A[92]);
                    _0xCFB2.textOutline = GameObject.getObject(_0xB90A[93]);
                    _0xCFB2.settings = Components.DressupBattleComponent.battleSetings[_0xB90A[8]](_0xB90A[94] + Components.LevSelAnimManager.unitTag)
                };
                _0xCFB2.initMcProp = function() {
                    _0xCFB2.mainTextHolder.visible = false;
                    _0xCFB2.tutorial.visible = false;
                    _0xCFB2.thunderAnim.visible = false;
                    _0xCFB2.timer.visible = false;
                    _0xCFB2.roundWin.visible = false;
                    _0xCFB2.roundWin.visible = false;
                    _0xCFB2.roundLost.visible = false;
                    _0xCFB2.winStory.visible = false;
                    _0xCFB2.lostStory.visible = false;
                    _0xCFB2.reactionButton.visible = false;
                    _0xCFB2.reactionButton.disableInput();
                    _0xCFB2.reactionButton.scale[_0xB90A[95]](0, 0);
                    _0xCFB2.nextB.visible = false;
                    _0xCFB2.nextB.disableInput();
                    _0xCFB2.nextB.scale[_0xB90A[95]](0, 0);
                    _0xCFB2.textOutline.visible = false;
                    _0xCFB2.arrayVisible(_0xCFB2.roundPanel, false);
                    _0xCFB2.arrayVisible(_0xCFB2.bossBodies, false);
                    _0xCFB2.arrayVisible(_0xCFB2.initialStories, false);
                    _0xCFB2.arrayVisible(_0xCFB2.badgeEnemy, false);
                    _0xCFB2.arrayVisible(_0xCFB2.badgePlayer, false);
                    if (!_0xCF80.TUTORIAL_ONCE) {
                        _0xCFB2.tutorial.visible = true
                    };
                    _0xCFB2.playerCont.visible = false;
                    _0xCFB2.enemyCont.visible = false;
                    _0xCFB2.panelCont.visible = false;
                    _0xCFB2.currentEnemy = _0xCFB2.bossBodies[_0xCFB2.settings.arrayIndex];
                    _0xCFB2.expresionContainer = GameObject.getObject(_0xB90A[96] + (_0xCFB2.settings.arrayIndex + 1));
                    _0xCFB2.generateBossExpresions();
                    _0xCFB2.forceCharPositions()
                };
                _0xCFB2.generateBossExpresions = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xCFB2.expresionContainer.children.length; _0xC6E8++) {
                        var _0xCE22 = _0xCFB2.expresionContainer.children[_0xC6E8];
                        if (_0xB93C(_0xCE22, GameObject)) {
                            if (_0xCE22.tags[0] == _0xB90A[97]) {
                                _0xCE22.visible = false;
                                _0xCFB2.angry = _0xCE22
                            };
                            if (_0xCE22.tags[0] == _0xB90A[98]) {
                                _0xCE22.visible = false;
                                _0xCFB2.sad = _0xCE22
                            };
                            if (_0xCE22.tags[0] == _0xB90A[99]) {
                                _0xCE22.visible = false;
                                _0xCFB2.happy = _0xCE22
                            };
                            if (_0xCE22.tags[0] == _0xB90A[100]) {
                                _0xCFB2.idle = _0xCE22
                            }
                        }
                    }
                };
                _0xCFB2.forceCharPositions = function() {
                    _0xCFB2.enemyCont.x = -Core.Main.game.canvas.width + Components.DevUtils.getBounds(_0xCFB2.playerCont, true, true).width;
                    _0xCFB2.playerCont.x = Core.Main.game.canvas.width + Components.DevUtils.getBounds(_0xCFB2.playerCont, true, true).width;
                    _0xCFB2.panelCont.x = Core.Main.game.canvas.width
                };
                _0xCFB2.initLocalEvents = function() {
                    _0xCFB2.nextB.addButtonPressedCallback(_0xCFB2.handleStory);
                    _0xCFB2.reactionButton.addButtonPressedCallback(_0xCFB2.handleEndReaction);
                    _0xCFB2.events.addEventListener(_0xCF80.SHOW_ROUND, _0xCFB2.handleRoundAnim);
                    _0xCFB2.events.addEventListener(_0xCF80.ROUND_ANIM_DONE, _0xCFB2.handleRoundStart);
                    _0xCFB2.events.addEventListener(Components.DressupBattleComponent.BATTLE_WIN, _0xCFB2.handleEndBattle);
                    _0xCFB2.events.addEventListener(Components.DressupBattleComponent.BATTLE_LOST, _0xCFB2.handleEndBattle);
                    _0xCFB2.events.addEventListener(_0xB90A[101], _0xCFB2.handleAspectObjects);
                    _0xCFB2.events.addEventListener(_0xCF80.SHOW_REACTION, _0xCFB2.handleReaction);
                    _0xCFB2.events.addEventListener(Components.DressupBattleComponent.ITEM_CHANGED, _0xCFB2.handleItemChanged);
                    _0xCFB2.events.addEventListener(_0xB90A[102], _0xCFB2.handleExitUnit);
                    _0xCFB2.events.addEventListener(_0xB90A[103], _0xCFB2.handleTimerDone)
                };
                _0xCFB2.handleTimerDone = function() {
                    _0xCFB2.forceCharPositions();
                    _0xCFB2.playerCont.visible = true;
                    _0xCFB2.enemyCont.visible = true;
                    _0xCFB2.panelCont.visible = true;
                    _0xCFB2.events.throwEvent(Components.DressupBattleComponent.START_DRESSUP_TIMER);
                    _0xCFB2.startFight();
                    Components.Tweens.create(_0xCFB2.enemyCont).to(_0xC639(_0xB90A[43], 0), 500, null, true);
                    Components.DevUtils.playSound(_0xB90A[104]);
                    Components.Tweens.create(_0xCFB2.playerCont).to(_0xC639(_0xB90A[43], 0), 500, null, true).onComplete.addOnce(function() {
                        Components.DevUtils.playSound(_0xB90A[104]);
                        Components.Tweens.create(_0xCFB2.panelCont).to(_0xC639(_0xB90A[43], 0), 200, null, true).onComplete.addOnce(function() {
                            Components.DevUtils.playSound(_0xB90A[104]);
                            Components.Tweens.create(_0xCFB2.badgeEnemy[0].parent).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                            Components.Tweens.create(_0xCFB2.badgePlayer[0].parent).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                            _0xCFB2.handleThunder();
                            _0xCFB2.timer.visible = true;
                            _0xCFB2.timer.alpha = 0;
                            Components.Tweens.create(_0xCFB2.timer).to(_0xC639(_0xB90A[45], 1), 200, null, true)
                        })
                    })
                };
                _0xCFB2.handleExitUnit = function() {
                    console.log("5555555555555555555555555555555555")
                    Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                };
                _0xCFB2.handleItemChanged = function() {
                    _0xCFB2.anim.scale[_0xB90A[95]](1, 1);
                    _0xCFB2.events.throwEvent(_0xB90A[84])
                };
                _0xCFB2.handleEndReaction = function() {
                    _0xCFB2.reactionButton.disableInput();
                    Components.Tweens.create(_0xCFB2.reactionButton.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 200, null, true);
                    Components.Tweens.create(_0xCFB2.textOutline).to(_0xC639(_0xB90A[45], 0), 200, null, true, 100).onComplete.addOnce(function() {
                        _0xCFB2.textOutline.visible = false
                    });
                    _0xCFB2.curentReactionStory.forEach(function(_0xCE22) {
                        Components.Tweens.create(_0xCE22).to(_0xC639(_0xB90A[45], 0), 200, null, true)
                    });
                    Components.Tweens.create(_0xCFB2.currentEnemy).to(_0xC639(_0xB90A[45], 0), 200, null, true, 200).onComplete.addOnce(function() {
                        if (Components.DressupBattleComponent.win < 2 && Components.DressupBattleComponent.lost < 2) {
                            if (_0xCFB2.roundResult == _0xB90A[106]) {
                                _0xCFB2.events.throwEvent(Components.ThemePanelComponent.SHOW_THEME_BOSS_PANEL);
                                Components.DevUtils.playSound(_0xB90A[104])
                            } else {
                                _0xCFB2.events.throwEvent(Components.ThemePanelComponent.SHOW_THEME_PLAYER_PANEL);
                                Components.DevUtils.playSound(_0xB90A[104])
                            }
                        } else {
                            if (Components.DressupBattleComponent.win == 2) {
                                Components.DevUtils.playSound(_0xB90A[107]);
                                if (_0xCFB2.settings.bigBossTag) {
                                    Components.SessionData.BOSS_DEFEATED.push(_0xCFB2.settings.bigBossTag);
                                    if (Components.SessionData.CURRENT_WORLD <= 3) {
                                        Components.SessionData.CURRENT_WORLD++
                                    };
                                    Components.LevSelAnimManager.currentLevel = 1;
                                    Components.LevSelAnimManager.once = true;
                                    // trace(_0xB90A[108])
                                } else {
                                    Components.SessionData.BOSS_DEFEATED.push(_0xCFB2.settings.miniBoss)
                                };
                                Components.Storage.saveData(_0xB90A[109], Components.SessionData.BOSS_DEFEATED, true);
                                _0xCFB2.events.throwEvent(_0xB90A[110]);
                                for (var _0xC6E8 = 0; _0xC6E8 < _0xCFB2.settings.reward.length; _0xC6E8++) {
                                    var _0xCE22 = _0xCFB2.settings.reward[_0xC6E8];
                                    Components.SessionData.UNLOCKED_ITEMS.push(_0xCE22);
                                    Components.Storage.saveData(_0xB90A[111], Components.SessionData.UNLOCKED_ITEMS, true)
                                }
                            } else {
                                _0xCFB2.handleExitUnit()
                            }
                        }
                    })
                };
                _0xCFB2.resetBattlePosition = function() {
                    _0xCFB2.gameObject.game.time.events.add(1000, function() {
                        Components.Tweens.create(_0xCFB2.badgePlayer[0].parent).to(_0xC639(_0xB90A[45], 0), 100, null, true);
                        Components.Tweens.create(_0xCFB2.badgeEnemy[0].parent).to(_0xC639(_0xB90A[45], 0), 100, null, true);
                        Components.Tweens.create(_0xCFB2.enemyCont).to(_0xC639(_0xB90A[43], -(Core.Main.game.canvas.width + Components.DevUtils.getBounds(_0xCFB2.playerCont, true, true).width) * 2), 2000, null, true);
                        Components.Tweens.create(_0xCFB2.playerCont).to(_0xC639(_0xB90A[43], (Core.Main.game.canvas.width + Components.DevUtils.getBounds(_0xCFB2.playerCont, true, true).width) * 2), 2000, null, true);
                        Components.Tweens.create(_0xCFB2.timer).to(_0xC639(_0xB90A[45], 0), 200, null, true);
                        _0xCFB2.gameObject.game.time.events.add(1000, function() {
                            _0xCFB2.dressupHolder.x = 0;
                            _0xCFB2.enemyCont.visible = false;
                            _0xCFB2.playerCont.visible = false;
                            _0xCFB2.bringReactionStory()
                        }, _0xB9B9(_0xCFB2))
                    }, _0xB9B9(_0xCFB2))
                };
                _0xCFB2.bringReactionStory = function() {
                    _0xCFB2.curentReactionStory = [];
                    _0xCFB2.currentEnemy.alpha = 0;
                    _0xCFB2.currentEnemy.visible = true;
                    var _0xCFCB;
                    if (Components.DressupBattleComponent.win < 2 && Components.DressupBattleComponent.lost < 2) {
                        _0xCFCB = _0xCFB2.roundResult == _0xB90A[106] ? _0xCFB2.roundWin : _0xCFB2.roundLost
                    } else {
                        _0xCFCB = Components.DressupBattleComponent.win == 2 ? _0xCFB2.winStory : _0xCFB2.lostStory
                    };
                    _0xCFCB.visible = true;
                    _0xCFCB.alpha = 1;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xCFCB.children.length; _0xC6E8++) {
                        var _0xCE22 = _0xCFCB.children[_0xC6E8];
                        if (_0xB93C(_0xCE22, GameObject)) {
                            _0xCE22.alpha = 0;
                            _0xCFB2.curentReactionStory.push(_0xCE22)
                        }
                    };
                    Components.Tweens.create(_0xCFB2.currentEnemy).to(_0xC639(_0xB90A[45], 1), 200, null, true).onComplete.addOnce(function() {
                        var _0xCFE4 = _0xCFB2.curentReactionStory[Math.floor(Math.random() * _0xCFB2.curentReactionStory.length)];
                        _0xCFE4.alpha = 0;
                        _0xCFE4.visible = true;
                        _0xCFB2.reactionButton.visible = true;
                        _0xCFB2.textOutline.visible = true;
                        Components.Tweens.create(_0xCFB2.textOutline).to(_0xC639(_0xB90A[45], 1), 100, null, true);
                        Components.Tweens.create(_0xCFE4).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                        Components.Tweens.create(_0xCFB2.reactionButton.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 400, null, true).onComplete.addOnce(function() {
                            _0xCFB2.reactionButton.enableInput()
                        })
                    })
                };
                _0xCFB2.handleEndBattle = function(_0xCF35) {
                    var _0xCD8C = _0xCF35.getData(_0xB90A[62]);
                    Components.Tweens.create(_0xCFB2.thunderAnim).to(_0xC639(_0xB90A[45], 0), 100, null, true);
                    Components.Tweens.create(_0xCFB2.panelCont).to(_0xC639(_0xB90A[43], Core.Main.game.canvas.width), 100, null, true).onComplete.addOnce(function() {
                        Components.Tweens.create(_0xCFB2.dressupHolder).to(_0xC639(_0xB90A[43], Core.Main.game.canvas.width * 0.35 / 2), 400, null, true).onComplete.addOnce(function() {
                            _0xCFB2.panelCont.visible = false;
                            var _0xCFFD;
                            Components.Tweens.create(_0xCFB2.thunderAnim).to(_0xC639(_0xB90A[45], 0), 200, null, true, 100);
                            if (_0xCD8C == _0xB90A[106]) {
                                _0xCFB2.roundResult = _0xB90A[106];
                                _0xCFFD = _0xCFB2.badgePlayer[Components.DressupBattleComponent.win - 1]
                            } else {
                                if (_0xCD8C == _0xB90A[112]) {
                                    _0xCFFD = _0xCFB2.badgeEnemy[Components.DressupBattleComponent.lost - 1];
                                    _0xCFB2.roundResult = _0xB90A[112]
                                }
                            };
                            _0xCFB2.handleExpression();
                            _0xCFFD.alpha = 0;
                            _0xCFFD.visible = true;;;
                            Components.Tweens.create(_0xCFFD).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                            Components.Tweens.create(_0xCFFD).to(_0xC639(_0xB90A[46], 10), 50, null, true, 0, 3, true).onComplete.addOnce(function() {
                                _0xCFB2.events.throwEvent(_0xCF80.SHOW_REACTION)
                            })
                        })
                    })
                };
                _0xCFB2.handleExpression = function() {
                    _0xCFB2.idle.visible = false;
                    _0xCFB2.happy.visible = false;
                    _0xCFB2.angry.visible = false;
                    _0xCFB2.sad.visible = false;
                    if (_0xCFB2.roundResult == _0xB90A[112]) {
                        _0xCFB2.happy.visible = true
                    } else {
                        if (Components.DressupBattleComponent.win < 2 && Components.DressupBattleComponent.lost < 2) {
                            _0xCFB2.angry.visible = true
                        } else {
                            _0xCFB2.sad.visible = true
                        }
                    }
                };
                _0xCFB2.handleReaction = function() {
                    _0xCFB2.resetBattlePosition()
                };
                _0xCFB2.handleRoundStart = function() {
                    _0xCFB2.totalTime = _0xCFB2.settings.roundTime * 1000;
                    _0xCFB2.events.addEventListener(_0xB90A[29], _0xCFB2.handleTimer);
                    _0xCFB2.events.throwEvent(_0xB90A[103])
                };
                _0xCFB2.handleAspectObjects = function() {
                    _0xCFB2.thunderAnim.scale[_0xB90A[95]](Core.Main.game.canvas.height / Core.Main.gameHeight, (Core.Main.game.canvas.height + Core.Main.game.canvas.height / 10) / Core.Main.gameHeight);
                    _0xCFB2.thunderAnim.y = Core.Main.game.canvas.height / 2;
                    _0xCFB2.thunderAnim.x = (Core.Main.game.canvas.width - Core.Main.game.canvas.width * 0.30) / 2
                };
                _0xCFB2.handleThunder = function() {
                    _0xCFB2.thunderAnim.visible = true;
                    _0xCFB2.thunderAnim.alpha = 1;
                    _0xCFB2.events.throwEvent(_0xB90A[84])
                };
                _0xCFB2.startFight = function() {
                    _0xCFB2.events.throwEvent(Components.DressupBattleComponent.RESET_BATTLE);
                    _0xCFB2.gameObject.game.time.events.add(100, function() {
                        _0xCFB2.events.throwEvent(Components.DressupBattleComponent.START_BOT)
                    }, _0xB9B9(_0xCFB2))
                };
                _0xCFB2.handleRoundAnim = function() {
                    _0xCFB2.roundPanel[Components.DressupBattleComponent.bossPhase].parent.scale[_0xB90A[95]](Core.Main.game.canvas.width / Core.Main.gameWidth, Core.Main.game.canvas.width / Core.Main.gameWidth);
                    _0xCFB2.roundPanel[Components.DressupBattleComponent.bossPhase].parent.y = Core.Main.game.canvas.height / 2;
                    _0xCFB2.roundPanel[Components.DressupBattleComponent.bossPhase].parent.x = Core.Main.game.canvas.width / 2 - 439 * Core.Main.game.canvas.width / Core.Main.gameWidth;
                    _0xCFB2.roundPanel[Components.DressupBattleComponent.bossPhase].visible = true;
                    _0xCFB2.events.throwEvent(_0xB90A[113] + Components.DressupBattleComponent.bossPhase);
                    Components.DevUtils.playSound(_0xB90A[104])
                };
                _0xCFB2.handleStory = function() {
                    _0xCFB2.nextB.disableInput();
                    Components.Tweens.create(_0xCFB2.textArray[_0xCFB2.storyPhase]).to(_0xC639(_0xB90A[45], 0), 200, null, true).onComplete.addOnce(function() {
                        _0xCFB2.storyPhase++;
                        if (_0xCFB2.textArray[_0xCFB2.storyPhase]) {
                            Components.Tweens.create(_0xCFB2.textArray[_0xCFB2.storyPhase]).to(_0xC639(_0xB90A[45], 1), 200, null, true).onComplete.addOnce(function() {
                                _0xCFB2.nextB.enableInput()
                            })
                        } else {
                            Components.Tweens.create(_0xCFB2.currentEnemy).to(_0xC639(_0xB90A[45], 0), 100, null, true);
                            Components.Tweens.create(_0xCFB2.textOutline).to(_0xC639(_0xB90A[45], 0), 200, null, true);
                            Components.Tweens.create(_0xCFB2.textArray[_0xCFB2.storyPhase - 1]).to(_0xC639(_0xB90A[45], 0), 200, null, true);
                            Components.Tweens.create(_0xCFB2.nextB.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 200, null, true).onComplete.addOnce(function() {
                                _0xCFB2.nextB.visible = false;
                                _0xCFB2.textOutline.visible = false;
                                _0xCFB2.startStory.visible = false;
                                _0xCFB2.events.throwEvent(Components.ThemePanelComponent.SHOW_THEME_PLAYER_PANEL);
                                Components.DevUtils.playSound(_0xB90A[104])
                            })
                        }
                    })
                };
                _0xCFB2.arrayVisible = function(_0xD016, _0xD02F) {
                    _0xD016.forEach(function(_0xCE22) {
                        _0xCE22.visible = _0xD02F
                    })
                };
                _0xCFB2.handleEndTutorial = function() {
                    Components.Tweens.create(_0xCFB2.tutorial).to(_0xC639(_0xB90A[45], 0), 200, null, true).onComplete.addOnce(function() {
                        _0xCFB2.tutorial.visible = false;
                        _0xCFB2.checkInitialStory()
                    })
                };
                _0xCFB2.checkInitialStory = function() {
                    if (!_0xCF80.INITIAL_STORY_PLAYED[_0xCFB2.settings.arrayIndex]) {
                        _0xCF80.INITIAL_STORY_PLAYED[_0xCFB2.settings.arrayIndex] = true;
                        _0xCFB2.playInitialStory()
                    } else {
                        _0xCFB2.events.throwEvent(Components.ThemePanelComponent.SHOW_THEME_PLAYER_PANEL);
                        Components.DevUtils.playSound(_0xB90A[104])
                    }
                };
                _0xCFB2.playInitialStory = function() {
                    _0xCFB2.currentEnemy.alpha = 0;
                    _0xCFB2.currentEnemy.visible = true;
                    Components.Tweens.create(_0xCFB2.currentEnemy).to(_0xC639(_0xB90A[45], 1), 100, null, true);
                    _0xCFB2.startStory = _0xCFB2.initialStories[_0xCFB2.settings.arrayIndex];
                    _0xCFB2.createTextArray();
                    _0xCFB2.mainTextHolder.visible = true;
                    _0xCFB2.startStory.visible = true;
                    _0xCFB2.nextB.visible = true;
                    _0xCFB2.textOutline.visible = true;
                    Components.Tweens.create(_0xCFB2.textOutline).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                    // trace(_0xCFB2.textArray);
                    Components.Tweens.create(_0xCFB2.textArray[_0xCFB2.storyPhase]).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                    Components.Tweens.create(_0xCFB2.nextB.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 200, null, true).onComplete.addOnce(function() {
                        _0xCFB2.nextB.enableInput()
                    })
                };
                _0xCFB2.createTextArray = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xCFB2.startStory.children.length; _0xC6E8++) {
                        var _0xCE22 = _0xCFB2.startStory.children[_0xC6E8];
                        if (_0xB93C(_0xCE22, GameObject)) {
                            _0xCE22.alpha = 0;
                            _0xCFB2.textArray.push(_0xCE22)
                        }
                    }
                };
                _0xCFB2.handleTimer = function() {
                    _0xCFB2.timePass = _0xCFB2.gameObject.game.time.elapsed;
                    _0xCFB2.totalTime -= _0xCFB2.timePass;
                    _0xCF80.TIME = _0xCFB2.totalTime;
                    _0xCFB2.seconds = Math.floor(_0xCFB2.totalTime / 1000 % 60).toString();
                    _0xCFB2.minutes = Math.floor(_0xCFB2.totalTime / 1000 / 60).toString();
                    if (_0xCFB2.minutes.length == 1) {
                        _0xCFB2.timeText = _0xB90A[114] + _0xCFB2.minutes + _0xB90A[115] + _0xCFB2.seconds;
                        if (_0xCFB2.seconds.length == 1) {
                            _0xCFB2.timeText = _0xCFB2.minutes + _0xB90A[115] + _0xB90A[114] + _0xCFB2.seconds
                        }
                    };
                    if (_0xCFB2.seconds.length == 1) {
                        _0xCFB2.timeText = _0xCFB2.minutes + _0xB90A[115] + _0xB90A[114] + _0xCFB2.seconds
                    };
                    if (_0xCFB2.minutes.length != 1 && _0xCFB2.seconds.length != 1) {
                        _0xCFB2.timeText = _0xCFB2.minutes + _0xB90A[115] + _0xCFB2.seconds
                    };
                    if (_0xCFB2.totalTime <= 0) {
                        _0xCFB2.events.removeEventListener(_0xB90A[29], _0xCFB2.handleTimer);
                        _0xCFB2.events.throwEvent(_0xB90A[116], Util.Util.createEventData([
                            [Components.TextLabel.TEXT, _0xB90A[117]]
                        ]))
                    } else {
                        _0xCFB2.events.throwEvent(_0xB90A[116], Util.Util.createEventData([
                            [Components.TextLabel.TEXT, _0xCFB2.timeText]
                        ]))
                    }
                };
                _0xCFB2.onComplete = function() {
                    _0xCFB2.events.throwEvent(_0xB90A[118])
                };
                return _0xCFB2
            }
            _0xB987(_0xCF80, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xD048 = this;
                this.initMc();
                this.initMcProp();
                this.initLocalEvents();
                this.events.addEventListener(_0xB90A[28], function() {
                    if (Components.SessionData.UNLOCKED_LEVELS.indexOf(_0xB90A[119]) != -1) {
                        _0xD048.events.throwEvent(_0xB90A[120]);
                        _0xCF80.TUTORIAL_ONCE = true
                    }
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (!_0xCF80.TUTORIAL_ONCE) {
                    _0xCF80.TUTORIAL_ONCE = true;
                    this.events.addEventListener(_0xB90A[121], this.handleEndTutorial);
                    this.events.throwEvent(_0xB90A[122])
                } else {
                    this.checkInitialStory()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                _get(_getPrototypeOf(_0xCF80.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0xCF80
        }(Scene.Component);
        _0xCF80.SHOW_ROUND = _0xB90A[123];
        _0xCF80.ROUND_ANIM_DONE = _0xB90A[124];
        _0xCF80.SHOW_REACTION = _0xB90A[125];
        _0xCF80.TUTORIAL_ONCE = false;
        _0xCF80.INITIAL_STORY_PLAYED = [];
        _0xCF80.TIME = 1000;
        Components.BattleStoryController = _0xCF80
    }

    function _0xBAE5(Components) {
        var _0xD061 = function(_0xD07A) {
            _0xBA1D(_0xD061, _0xD07A);

            function _0xD061() {
                var _0xD093;
                _0xB955(this, _0xD061);
                _0xD093 = _0xB9A0(this, _getPrototypeOf(_0xD061).apply(this, arguments));
                _0xD093.playerItemsArray = [];
                _0xD093.enemyItemsArray = [];
                _0xD093.playerCategories = [];
                _0xD093.enemyCategories = [];
                _0xD093.maxPoints = 0;
                _0xD093.themeChoice = 0;
                _0xD093.botEndItems = [];
                _0xD093.bossWorldItems = [];
                _0xD093.bossCategories = [];
                _0xD093.finalItemOnBoss = 0;
                _0xD093.allDollsHead = [];
                _0xD093.dollHeadToShow = [];
                _0xD093.indexForDollHead = 0;
                _0xD093.dollHeadPosition = [326, 218, 491, 220, 324, 345, 495, 350, 411, 455];
                _0xD093.totalTime = 60000;
                _0xD093.indexForPosition = 0;
                _0xD093.initLocalEvents = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD093.playerButtons.length; _0xC6E8++) {
                        var _0xCE22 = _0xD093.playerButtons[_0xC6E8];
                        _0xCE22.addButtonPressedCallback(_0xD093.handleButtonClick)
                    };
                    _0xD093.events.addEventListener(Components.ThemePanelComponent.CURENT_THEME, _0xD093.handleThemeChoice);
                    _0xD093.events.addEventListener(Components.BattleDollPanel.BODY_CHOICE, _0xD093.handlePlayerDollSelect);
                    _0xD093.events.addEventListener(_0xD061.RESET_BATTLE, _0xD093.handleBattleReset);
                    _0xD093.events.addEventListener(_0xD061.START_BOT, _0xD093.handleStartBot);
                    _0xD093.events.addEventListener(_0xD061.START_DRESSUP_TIMER, _0xD093.handleDressupTimer)
                };
                _0xD093.handleDressupTimer = function() {
                    _0xD093.events.addEventListener(_0xB90A[29], _0xD093.handleTimer)
                };
                _0xD093.manageDollHeads = function() {};
                _0xD093.handlePlayerDollSelect = function(_0xCF35) {
                    var _0xD0AC = _0xCF35.getData(_0xB90A[62]);
                    _0xD0AC[0] = _0xB90A[126];
                    _0xD093.playerChoice = _0xD0AC.join(_0xB90A[61])
                };
                _0xD093.handleStartBot = function() {
                    _0xD093.finalTimeInterval = null;
                    _0xD093.finalItemOnBoss = 0;
                    _0xD093.decideBotEndItems();
                    _0xD093.handleBossItemChange()
                };
                _0xD093.handleTimer = function() {
                    _0xD093.totalTime = Components.BattleStoryController.TIME;
                    if (_0xD093.totalTime <= 0) {
                        _0xD093.events.removeEventListener(_0xB90A[29], _0xD093.handleTimer);
                        _0xD093.handleBattleEnd()
                    }
                };
                _0xD093.handleBattleReset = function() {
                    _0xD093.initChars();
                    _0xD093.handleThemeButtonModifiers();
                    _0xD093.corelateGlow();
                    _0xD093.handleBossPoints()
                };
                _0xD093.handleBossItemChange = function() {
                    if (_0xD093.totalTime > _0xD093.settings.timeFinalItems) {
                        var _0xD0C5 = _0xD093.randomFromArray(_0xD093.bossWorldItems);
                        _0xD093.handleItemsChange([_0xD0C5.tags[1], _0xD0C5.tags[2]], _0xD093.enemyCategories);
                        _0xD093.handleBossPoints();
                        var _0xD0DE = _0xD093.settings.timeRange[_0xD061.bossPhase][0] + Math.floor(Math.random() * (_0xD093.settings.timeRange[_0xD061.bossPhase][1] - _0xD093.settings.timeRange[_0xD061.bossPhase][0]));
                        _0xD093.gameObject.game.time.events.add(_0xD0DE, _0xD093.handleBossItemChange, _0xB9B9(_0xD093))
                    } else {
                        if (_0xD093.totalTime <= _0xD093.settings.timeFinalItems) {
                            if (!_0xD093.finalTimeInterval) {
                                _0xD093.finalTimeInterval = _0xD093.totalTime / (_0xD093.botEndItems.length - 1)
                            };
                            trace(_0xD093.finalTimeInterval, _0xB90A[127]);
                            if (_0xD093.botEndItems[_0xD093.finalItemOnBoss]) {
                                if (!_0xD093.botEndItems[_0xD093.finalItemOnBoss].visible) {
                                    _0xD093.handleItemsChange([_0xD093.botEndItems[_0xD093.finalItemOnBoss].tags[1], _0xD093.botEndItems[_0xD093.finalItemOnBoss].tags[2]], _0xD093.enemyCategories)
                                };
                                _0xD093.handleBossPoints();
                                _0xD093.gameObject.game.time.events.add(_0xD093.finalTimeInterval, _0xD093.handleBossItemChange, _0xB9B9(_0xD093));
                                _0xD093.finalItemOnBoss++
                            }
                        }
                    }
                };
                _0xD093.handleBattleEnd = function() {
                    if (Components.BattleLifeBar.playerLastScore >= Components.BattleLifeBar.enemyLastScore) {
                        _0xD061.win++;
                        _0xD093.events.throwEvent(_0xD061.BATTLE_WIN, Util.Util.createEventData([
                            [_0xB90A[62], _0xB90A[106]]
                        ]));
                        trace(_0xB90A[128], _0xD061.win, _0xB90A[129], Components.BattleLifeBar.enemyLastScore, _0xB90A[130], Components.BattleLifeBar.playerLastScore)
                    } else {
                        _0xD061.lost++;
                        _0xD093.events.throwEvent(_0xD061.BATTLE_LOST, Util.Util.createEventData([
                            [_0xB90A[62], _0xB90A[112]]
                        ]));
                        trace(_0xB90A[131], _0xD061.lost, _0xB90A[129], Components.BattleLifeBar.enemyLastScore, _0xB90A[130], Components.BattleLifeBar.playerLastScore)
                    };
                    _0xD061.bossPhase++;
                    if (_0xD061.lost == 3) {
                        _0xD093.handleGameOver()
                    } else {
                        if (_0xD061.win == 3) {
                            _0xD093.handleWin()
                        } else {
                            trace(_0xB90A[132])
                        }
                    }
                };
                _0xD093.handleGameOver = function() {
                    trace(_0xB90A[133]);
                    Components.BattleLifeBar.playerLastScore = 0;
                    Components.BattleLifeBar.enemyLastScore = 0
                };
                _0xD093.handleWin = function() {
                    trace(_0xB90A[134]);
                    Components.BattleLifeBar.playerLastScore = 0;
                    Components.BattleLifeBar.enemyLastScore = 0
                };
                _0xD093.randomFromArray = function(_0xD0F7) {
                    return _0xD0F7[Math.floor(Math.random() * _0xD0F7.length)]
                };
                _0xD093.handleMaxPoints = function() {
                    var _0xD1BF = 0;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD093.botEndItems.length; _0xC6E8++) {
                        var _0xD174 = Number(_0xD093.botEndItems[_0xC6E8].tags[1]) - 2;
                        var _0xD15B = _0xD093.bossCategories[_0xD174];
                        var _0xD223 = 0;
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xD15B.length; _0xC9D6++) {
                            var _0xCE22 = _0xD15B[_0xC9D6];
                            var _0xD255 = _0xD093.searchItemValue(_0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2]);
                            if (_0xD255 > _0xD223) {
                                _0xD223 = _0xD255
                            }
                        };
                        _0xD1BF += _0xD223
                    };
                    _0xD1BF += _0xD093.searchItemValue(_0xD093.bossBody.tags[1] + _0xB90A[61] + _0xD093.bossBody.tags[2]);
                    var _0xD1D8 = 0;
                    for (var _0xD129 = 0; _0xD129 < _0xD093.botEndItems.length; _0xD129++) {
                        var _0xD110 = Number(_0xD093.botEndItems[_0xD129].tags[1]) - 1;
                        var _0xD18D = _0xD093.playerCategories[_0xD110];
                        var _0xD23C = 0;
                        for (var _0xD142 = 0; _0xD142 < _0xD18D.length; _0xD142++) {
                            var _0xD20A = _0xD18D[_0xD142];
                            var _0xD26E = _0xD093.searchItemValue(_0xD20A.tags[1] + _0xB90A[61] + _0xD20A.tags[2]);
                            if (_0xD26E > _0xD23C) {
                                _0xD23C = _0xD26E;
                                var _0xD1A6 = [_0xD20A.name, _0xD26E]
                            }
                        };
                        _0xD1D8 += _0xD23C
                    };
                    _0xD1D8 += _0xD093.searchItemValue(_0xD093.playerChoice.split(_0xB90A[61])[1] + _0xB90A[61] + _0xD093.playerChoice.split(_0xB90A[61])[2]);
                    var _0xD1F1 = _0xD1BF > _0xD1D8 ? _0xD1BF : _0xD1D8;
                    _0xD093.maxPoints = _0xD1BF;
                    _0xD093.events.throwEvent(Components.BattleLifeBar.NEW_MAX, Util.Util.createEventData([
                        [_0xB90A[62], _0xD1F1]
                    ]));
                    trace(_0xB90A[135], _0xD1BF, _0xB90A[136], _0xD1D8)
                };
                _0xD093.decideBotEndItems = function() {
                    _0xD093.botEndItems = [];
                    var _0xD2B9 = Math.random() < 0.5;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD093.bossCategories.length; _0xC6E8++) {
                        var _0xD15B = _0xD093.bossCategories[_0xC6E8];
                        trace(_0xD15B);
                        if (_0xD2B9) {
                            if (_0xC6E8 != 0 && _0xC6E8 != 1) {
                                if (_0xD15B) {
                                    _0xD093.botEndItems.push(_0xD093.randomFromArray(_0xD15B))
                                }
                            }
                        } else {
                            if (_0xC6E8 != 2) {
                                if (_0xD15B) {
                                    _0xD093.botEndItems.push(_0xD093.randomFromArray(_0xD15B))
                                }
                            }
                        }
                    };
                    _0xD093.handleMaxPoints();
                    var _0xD2A0 = _0xD093.settings.dificulty[_0xD061.bossPhase];
                    var _0xD2EB = _0xD2A0[0] / 100 * _0xD093.maxPoints;
                    var _0xD1BF = _0xD2A0[1] / 100 * _0xD093.maxPoints;
                    var _0xD336 = _0xD093.checkInitialPoints();
                    var _0xD2D2 = 0;
                    var _0xD31D;
                    var _0xD0C5;
                    var _0xD304;
                    while (_0xD336 < _0xD2EB || _0xD336 > _0xD1BF) {
                        _0xD2D2++;
                        if (_0xD2D2 >= 500) {
                            break
                        };
                        _0xD31D = Math.floor(Math.random() * _0xD093.botEndItems.length);
                        _0xD304 = Number(_0xD093.botEndItems[_0xD31D].tags[1]) - 2;
                        _0xD0C5 = _0xD093.botEndItems[_0xD31D];
                        for (var _0xD287 = 0; _0xD287 < _0xD093.bossCategories[_0xD304].length; _0xD287++) {
                            var _0xCE22 = _0xD093.bossCategories[_0xD304][_0xD287];
                            if (_0xD336 < _0xD2EB) {
                                if (_0xD093.searchItemValue(_0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2]) > _0xD093.searchItemValue(_0xD0C5.tags[1] + _0xB90A[61] + _0xD0C5.tags[2])) {
                                    _0xD093.botEndItems[_0xD31D] = _0xCE22
                                }
                            };
                            if (_0xD336 > _0xD1BF) {
                                if (_0xD093.searchItemValue(_0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2]) < _0xD093.searchItemValue(_0xD0C5.tags[1] + _0xB90A[61] + _0xD0C5.tags[2])) {
                                    _0xD093.botEndItems[_0xD31D] = _0xCE22
                                }
                            }
                        };
                        _0xD336 = _0xD093.checkInitialPoints()
                    };
                    trace(_0xD061.bossPhase, _0xB90A[137]);
                    trace(_0xD2D2, _0xB90A[138]);
                    trace(_0xD2EB, _0xD1BF, _0xB90A[139]);
                    trace(_0xD336, _0xB90A[140]);
                    trace(_0xD2B9, _0xB90A[141])
                };
                _0xD093.checkInitialPoints = function() {
                    var _0xD255 = 0;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD093.botEndItems.length; _0xC6E8++) {
                        var _0xCE22 = _0xD093.botEndItems[_0xC6E8];
                        _0xD255 += _0xD093.searchItemValue(_0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2])
                    };
                    _0xD255 += _0xD093.searchItemValue(_0xD093.bossBody.tags[1] + _0xB90A[61] + _0xD093.bossBody.tags[2]);
                    return _0xD255
                };
                _0xD093.bossItemsAvailable = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD093.enemyItemsArray.length; _0xC6E8++) {
                        var _0xCE22 = _0xD093.enemyItemsArray[_0xC6E8];
                        if (_0xCE22.tags[_0xCE22.tags.length - 1] == _0xD093.settings.world || _0xCE22.name.indexOf(_0xD093.settings.enemyDollNameTag) != -1) {
                            if (_0xCE22.tags[1] != _0xB90A[142]) {
                                _0xD093.bossWorldItems.push(_0xCE22);
                                if (!_0xD093.bossCategories[Number(_0xCE22.tags[1]) - 2]) {
                                    _0xD093.bossCategories[Number(_0xCE22.tags[1]) - 2] = []
                                };
                                _0xD093.bossCategories[Number(_0xCE22.tags[1]) - 2].push(_0xCE22)
                            }
                        }
                    }
                };
                _0xD093.handleThemeButtonModifiers = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD093.playerButtons.length; _0xC6E8++) {
                        var _0xCE22 = _0xD093.playerButtons[_0xC6E8];
                        var _0xD381 = _0xD093.searchValue(_0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2]);
                        var _0xD34F = _0xD093.searchModifier(_0xCE22);
                        if (!_0xD34F) {
                            var _0xD368 = new GameObject(_0xD093.gameObject.game, _0xB90A[143] + _0xC6E8);
                            _0xD368.loadTexture(_0xD093.buttonValuesArray[_0xD381].texture);
                            _0xCE22.addChild(_0xD368);
                            _0xD368.anchor[_0xB90A[95]](0.5, 0.5);
                            _0xD368.position[_0xB90A[95]](-_0xCE22.texture.width / 3, -_0xCE22.texture.height / 3)
                        } else {
                            _0xD34F.loadTexture(_0xD093.buttonValuesArray[_0xD381].texture)
                        }
                    }
                };
                _0xD093.searchValue = function(_0xD39A) {
                    var _0xD381 = 1;
                    var _0xD255;
                    if (_0xD093.themeChoice == 0) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).cool
                    };
                    if (_0xD093.themeChoice == 1) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).glam
                    };
                    if (_0xD093.themeChoice == 2) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).pink
                    };
                    if (_0xD093.themeChoice == 3) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).retro
                    };
                    if (_0xD093.themeChoice == 4) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).sport
                    };
                    if (_0xD255 > 50) {
                        _0xD381 = 0
                    } else {
                        if (_0xD255 < 50) {
                            _0xD381 = 2
                        }
                    };
                    return _0xD381
                };
                _0xD093.searchModifier = function(_0xCE3B) {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xCE3B.children.length; _0xC6E8++) {
                        var _0xCE22 = _0xCE3B.children[_0xC6E8];
                        if (_0xCE22 && _0xB93C(_0xCE22, GameObject)) {
                            if (_0xCE22.name.indexOf(_0xB90A[144]) != -1) {
                                return _0xCE22
                            }
                        }
                    }
                };
                _0xD093.handleButtonClick = function(_0xCE3B) {
                    _0xD093.events.throwEvent(_0xD061.ITEM_CHANGED);
                    var _0xCD8C = [_0xCE3B.tags[1], _0xCE3B.tags[2]];
                    _0xD093.handleItemsChange(_0xCD8C, _0xD093.playerCategories);
                    _0xD093.corelateGlow()
                };
                _0xD093.corelateGlow = function() {
                    var _0xD255 = 0;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD093.playerItemsArray.length; _0xC6E8++) {
                        var _0xCE22 = _0xD093.playerItemsArray[_0xC6E8];
                        var _0xD3E5 = _0xCE22.name.replace(_0xB90A[126], _0xB90A[145]).split(_0xB90A[61]);
                        _0xD3E5.length = 3;
                        var _0xD3B3 = _0xD3E5.join(_0xB90A[61]);
                        var _0xD3CC = GameObject.getObject(_0xD3B3);
                        if (_0xD3CC) {
                            if (_0xCE22.visible) {
                                _0xD255 += _0xD093.searchItemValue(_0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2]);
                                _0xD3CC.getComponent(Components.GlowComponent).staticGlow()
                            } else {
                                _0xD3CC.getComponent(Components.GlowComponent).removeStaticGlow()
                            }
                        };
                        if (_0xCE22.visible && _0xCE22.tags[1] == _0xB90A[142]) {
                            _0xD255 += _0xD093.searchItemValue(_0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2])
                        }
                    };
                    _0xD093.events.throwEvent(Components.BattleLifeBar.BATTLE_POINTS, Util.Util.createEventData([
                        [_0xB90A[62],
                            [_0xB90A[69], _0xD255]
                        ]
                    ]))
                };
                _0xD093.handleBossPoints = function() {
                    var _0xD255 = 0;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD093.enemyItemsArray.length; _0xC6E8++) {
                        var _0xCE22 = _0xD093.enemyItemsArray[_0xC6E8];
                        if (_0xCE22.visible) {
                            _0xD255 += _0xD093.searchItemValue(_0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2])
                        }
                    };
                    _0xD093.events.throwEvent(Components.BattleLifeBar.BATTLE_POINTS, Util.Util.createEventData([
                        [_0xB90A[62],
                            [_0xB90A[146], _0xD255]
                        ]
                    ]))
                };
                _0xD093.searchItemValue = function(_0xD39A) {
                    var _0xD255;
                    if (_0xD093.themeChoice == 0) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).cool
                    };
                    if (_0xD093.themeChoice == 1) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).glam
                    };
                    if (_0xD093.themeChoice == 2) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).pink
                    };
                    if (_0xD093.themeChoice == 3) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).retro
                    };
                    if (_0xD093.themeChoice == 4) {
                        _0xD255 = Components.LoadValuesComponent.VALUES[_0xB90A[8]](_0xD39A).sport
                    };
                    return _0xD255
                };
                _0xD093.handleItemsChange = function(_0xD417, _0xD3FE) {
                    var _0xD15B = Number(_0xD417[0]) - 1;
                    var _0xD430 = _0xD3FE[_0xD15B];
                    if (_0xD15B == 1 || _0xD15B == 2) {
                        _0xD093.hideCat(3, _0xD3FE)
                    };
                    if (_0xD15B == 3) {
                        _0xD093.hideCat(1, _0xD3FE);
                        _0xD093.hideCat(2, _0xD3FE)
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD430.length; _0xC6E8++) {
                        var _0xCE22 = _0xD430[_0xC6E8];
                        if (_0xCE22.tags[1] == _0xD417[0] && _0xCE22.tags[2] == _0xD417[1]) {
                            _0xCE22.visible = !_0xCE22.visible
                        } else {
                            _0xCE22.visible = false
                        }
                    }
                };
                _0xD093.hideCat = function(_0xD174, _0xD449) {
                    var _0xD430 = _0xD449[_0xD174];
                    _0xD430.forEach(function(_0xCE22) {
                        _0xCE22.visible = false
                    })
                };
                _0xD093.initMc = function() {
                    _0xD093.allDollsHead = GameObject.getObjectsByTag(_0xB90A[63], false, 1, 0);
                    _0xD093.player = GameObject.getObject(_0xB90A[147]);
                    _0xD093.enemy = GameObject.getObject(_0xB90A[148]);
                    _0xD093.playerButtons = GameObject.getObjectsByTag(_0xB90A[145], true);
                    _0xD093.buttonValuesArray = GameObject.getObjectsByTag(_0xB90A[149], true);
                    _0xD093.backgrounds = GameObject.getObjectsByTag(_0xB90A[150], true);
                    _0xD093.createItemArray(_0xD093.player, _0xD093.playerItemsArray);
                    _0xD093.createItemArray(_0xD093.enemy, _0xD093.enemyItemsArray);
                    _0xD093.createCategories(_0xD093.playerItemsArray, _0xD093.playerCategories);
                    _0xD093.createCategories(_0xD093.enemyItemsArray, _0xD093.enemyCategories)
                };
                _0xD093.createCategories = function(_0xD462, _0xD47B) {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD462.length; _0xC6E8++) {
                        var _0xCD8C = _0xD462[_0xC6E8].tags;
                        if (!_0xD47B[Number(_0xCD8C[1]) - 1]) {
                            _0xD47B[Number(_0xCD8C[1]) - 1] = []
                        };
                        _0xD47B[Number(_0xCD8C[1]) - 1].push(_0xD462[_0xC6E8])
                    }
                };
                _0xD093.createItemArray = function(_0xC652, _0xD0F7) {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xC652.children.length; _0xC6E8++) {
                        var _0xCE22 = _0xC652.children[_0xC6E8];
                        if (_0xB93C(_0xCE22, GameObject) && _0xCE22.children.length != 0 && _0xCE22.name.split(_0xB90A[61])[0] != _0xB90A[126]) {
                            _0xD093.createItemArray(_0xCE22, _0xD0F7)
                        } else {
                            if (_0xB93C(_0xCE22, GameObject) && _0xCE22.name.split(_0xB90A[61])[0] == _0xB90A[126]) {
                                _0xD0F7.push(_0xCE22)
                            }
                        }
                    }
                };
                _0xD093.initChars = function() {
                    _0xD093.handleBodyDefaults(_0xD093.playerItemsArray, _0xD093.playerChoice);
                    _0xD093.handleBodyDefaults(_0xD093.enemyItemsArray, _0xD093.settings.enemyDollNameTag)
                };
                _0xD093.handleBodyDefaults = function(_0xD0F7, _0xD4C6) {
                    if (_0xD4C6 == _0xD093.playerChoice) {
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                            var _0xCE22 = _0xD0F7[_0xC6E8];
                            if (_0xCE22.name == _0xD4C6) {
                                _0xCE22.visible = true
                            } else {
                                _0xCE22.visible = false
                            }
                        }
                    } else {
                        for (var _0xD4AD = 0; _0xD4AD < _0xD0F7.length; _0xD4AD++) {
                            var _0xD494 = _0xD0F7[_0xD4AD];
                            if (_0xD494.name.indexOf(_0xD4C6) != -1) {
                                _0xD494.visible = true;
                                if (_0xD494.tags[1] == _0xB90A[142]) {
                                    _0xD093.bossBody = _0xD494
                                }
                            } else {
                                _0xD494.visible = false
                            }
                        }
                    }
                };
                _0xD093.initMcProp = function() {
                    _0xD093.backgrounds.forEach(function(_0xCE22) {
                        _0xCE22.visible = false
                    });
                    _0xD093.backgrounds[Number(_0xD093.settings.world) - 1].visible = true;
                    _0xD093.buttonValuesArray.forEach(function(_0xCE22) {
                        _0xCE22.visible = false
                    })
                };
                _0xD093.handleThemeChoice = function(_0xCF35) {
                    _0xD093.themeChoice = parseInt(_0xCF35.getData(_0xB90A[62]));;;
                    _0xD093.events.throwEvent(_0xD061.RESET_BATTLE)
                };
                return _0xD093
            }
            _0xB987(_0xD061, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.events.removeEventListener(_0xB90A[29], this.handleTimer);
                _get(_getPrototypeOf(_0xD061.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                _0xD061.win = 0;
                _0xD061.lost = 0;
                _0xD061.bossPhase = 0;
                this.settings = _0xD061.battleSetings[_0xB90A[8]](_0xB90A[94] + Components.LevSelAnimManager.unitTag);
                this.initMc();
                this.initMcProp();
                this.initLocalEvents();
                this.manageDollHeads();
                this.bossItemsAvailable();
                this.events.throwEvent(Components.PanelBattle.CREATE_PANEL)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xD061
        }(Scene.Component);
        _0xD061.START_BOT = _0xB90A[151];
        _0xD061.BATTLE_LOST = _0xB90A[152];
        _0xD061.BATTLE_WIN = _0xB90A[134];
        _0xD061.WAR_LOST = _0xB90A[153];
        _0xD061.WAR_WIN = _0xB90A[153];
        _0xD061.RESET_BATTLE = _0xB90A[132];
        _0xD061.ITEM_CHANGED = _0xB90A[154];
        _0xD061.BATTLE_END = _0xB90A[155];
        _0xD061.START_DRESSUP_TIMER = _0xB90A[156];
        _0xD061.bossPhase = 0;
        _0xD061.win = 0;
        _0xD061.lost = 0;
        _0xD061.battleSetings = new Map([
            [_0xB90A[157], _0xC639(_0xB90A[158], 0, _0xB90A[159], _0xB90A[160], _0xB90A[161], _0xB90A[142], _0xB90A[162], [
                [10, 20],
                [25, 35],
                [45, 50]
            ], _0xB90A[163], [
                [2000, 2500],
                [1500, 2000],
                [500, 1000]
            ], _0xB90A[164], 5000, _0xB90A[165], false, _0xB90A[166], _0xB90A[167], _0xB90A[168], [_0xB90A[169], _0xB90A[170], _0xB90A[171]], _0xB90A[172], 30)],
            [_0xB90A[173], _0xC639(_0xB90A[158], 1, _0xB90A[159], _0xB90A[174], _0xB90A[161], _0xB90A[142], _0xB90A[162], [
                [40, 50],
                [10, 15],
                [10, 15]
            ], _0xB90A[163], [
                [2000, 2500],
                [1500, 2000],
                [500, 1000]
            ], _0xB90A[164], 5000, _0xB90A[165], false, _0xB90A[175], _0xB90A[176], _0xB90A[168], [_0xB90A[177], _0xB90A[178], _0xB90A[179], _0xB90A[180], _0xB90A[181]], _0xB90A[172], 30)],
            [_0xB90A[182], _0xC639(_0xB90A[158], 2, _0xB90A[159], _0xB90A[183], _0xB90A[161], _0xB90A[184], _0xB90A[162], [
                [70, 80],
                [75, 85],
                [90, 100]
            ], _0xB90A[163], [
                [2000, 2500],
                [1500, 2000],
                [500, 1000]
            ], _0xB90A[164], 5000, _0xB90A[165], false, _0xB90A[166], _0xB90A[185], _0xB90A[168], [_0xB90A[186], _0xB90A[187], _0xB90A[188]], _0xB90A[172], 35)],
            [_0xB90A[189], _0xC639(_0xB90A[158], 3, _0xB90A[159], _0xB90A[190], _0xB90A[161], _0xB90A[184], _0xB90A[162], [
                [70, 80],
                [75, 85],
                [90, 100]
            ], _0xB90A[163], [
                [2000, 2500],
                [1500, 2000],
                [500, 1000]
            ], _0xB90A[164], 5000, _0xB90A[165], false, _0xB90A[175], _0xB90A[191], _0xB90A[168], [_0xB90A[192], _0xB90A[193], _0xB90A[194], _0xB90A[195]], _0xB90A[172], 35)],
            [_0xB90A[196], _0xC639(_0xB90A[158], 4, _0xB90A[159], _0xB90A[197], _0xB90A[161], _0xB90A[198], _0xB90A[162], [
                [70, 80],
                [75, 85],
                [90, 100]
            ], _0xB90A[163], [
                [2000, 2500],
                [1500, 2000],
                [500, 1000]
            ], _0xB90A[164], 5000, _0xB90A[165], false, _0xB90A[166], _0xB90A[199], _0xB90A[168], [_0xB90A[200], _0xB90A[201], _0xB90A[202]], _0xB90A[172], 35)],
            [_0xB90A[203], _0xC639(_0xB90A[158], 5, _0xB90A[159], _0xB90A[204], _0xB90A[161], _0xB90A[198], _0xB90A[162], [
                [70, 80],
                [75, 85],
                [90, 100]
            ], _0xB90A[163], [
                [2000, 2500],
                [1500, 2000],
                [500, 1000]
            ], _0xB90A[164], 5000, _0xB90A[165], false, _0xB90A[175], _0xB90A[205], _0xB90A[168], [_0xB90A[206], _0xB90A[207], _0xB90A[208], _0xB90A[209]], _0xB90A[172], 35)],
            [_0xB90A[210], _0xC639(_0xB90A[158], 6, _0xB90A[159], _0xB90A[211], _0xB90A[161], _0xB90A[212], _0xB90A[162], [
                [70, 80],
                [75, 85],
                [90, 100]
            ], _0xB90A[163], [
                [2000, 2500],
                [1500, 2000],
                [500, 1000]
            ], _0xB90A[164], 5000, _0xB90A[165], false, _0xB90A[166], _0xB90A[213], _0xB90A[168], [_0xB90A[214], _0xB90A[215], _0xB90A[216], _0xB90A[217]], _0xB90A[172], 35)],
            [_0xB90A[218], _0xC639(_0xB90A[158], 7, _0xB90A[159], _0xB90A[219], _0xB90A[161], _0xB90A[212], _0xB90A[162], [
                [70, 80],
                [75, 85],
                [90, 100]
            ], _0xB90A[163], [
                [2000, 2500],
                [1500, 2000],
                [500, 1000]
            ], _0xB90A[164], 5000, _0xB90A[165], false, _0xB90A[175], _0xB90A[220], _0xB90A[168], [_0xB90A[221], _0xB90A[222], _0xB90A[223], _0xB90A[224]], _0xB90A[172], 35)]
        ]);
        Components.DressupBattleComponent = _0xD061
    }

    function _0xBAFE(Components) {
        var _0xD4DF = function(_0xD4F8) {
            _0xBA1D(_0xD4DF, _0xD4F8);

            function _0xD4DF() {
                _0xB955(this, _0xD4DF);
                return _0xB9A0(this, _getPrototypeOf(_0xD4DF).apply(this, arguments))
            }
            _0xB987(_0xD4DF, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xD511 = new XMLHttpRequest();
                _0xD511.overrideMimeType(_0xB90A[225]);
                _0xD511.open(_0xB90A[226], _0xB90A[227], true);
                _0xD511.onload = function() {
                    var _0xD52A = JSON.parse(_0xD511.responseText);
                    for (var _0xC6E8 in _0xD52A) {
                        _0xD4DF.VALUES[_0xB90A[95]](_0xC6E8, _0xD52A[_0xC6E8])
                    };
                    trace(_0xD4DF.VALUES)
                };
                _0xD511.send(null)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xD4DF
        }(Scene.Component);
        _0xD4DF.VALUES = new Map();
        Components.LoadValuesComponent = _0xD4DF
    }

    function _0xBB17(Components) {
        var _0xD543 = function(_0xD55C) {
            _0xBA1D(_0xD543, _0xD55C);

            function _0xD543() {
                var _0xD575;
                _0xB955(this, _0xD543);
                _0xD575 = _0xB9A0(this, _getPrototypeOf(_0xD543).apply(this, arguments));
                _0xD575.buttonWidth = 100;
                _0xD575.buttonHeight = 150;
                _0xD575.vertical = true;
                _0xD575.addSidePadding = true;
                _0xD575.autoCheckButtonsSize = false;
                _0xD575.itemButtons = [];
                _0xD575.categories = [];
                _0xD575.xPositions = [];
                _0xD575.yPositions = [];
                _0xD575.buttonScale = 1;
                _0xD575.currentCat = 1;
                _0xD575.currentButtons = [];
                _0xD575.currentPage = 0;
                _0xD575.customSizes = [];
                _0xD575.allItemButtons = [];
                _0xD575.handleCreate = function() {
                    _0xD575.autoCheckButtonsSize = true;
                    _0xD575.initMc();
                    _0xD575.createCategories();
                    _0xD575.calculateItemButtonsSize();
                    _0xD575.initMcProp();
                    _0xD575.initLocalEvents();
                    _0xD575.changeAspect()
                };
                _0xD575.calculateItemButtonsSize = function() {
                    if (_0xD575.autoCheckButtonsSize) {
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.categories.length; _0xC6E8++) {
                            var _0xD58E = _0xD575.categories[_0xC6E8];
                            if (_0xD58E && _0xD58E.length != 0) {
                                _0xD575.searchCatSize(_0xC6E8, _0xD58E)
                            }
                        }
                    }
                };
                _0xD575.searchCatSize = function(_0xD58E, _0xD5A7) {
                    var _0xD5F2 = 0;
                    var _0xD5C0 = 0;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD5A7.length; _0xC6E8++) {
                        var _0xCE22 = _0xD5A7[_0xC6E8];
                        if (_0xCE22.getComponent(Components.GlowComponent) || _0xCE22.children.length == 0) {
                            if (_0xD5F2 < _0xCE22.width) {
                                _0xD5F2 = _0xCE22.width
                            };
                            if (_0xD5C0 < _0xCE22.height) {
                                _0xD5C0 = _0xCE22.height
                            }
                        } else {
                            var _0xD5D9 = _0xD575.findButton(_0xCE22);
                            if (_0xD5F2 < _0xD5D9[0]) {
                                _0xD5F2 = _0xD5D9[0]
                            };
                            if (_0xD5C0 < _0xD5D9[1]) {
                                _0xD5C0 = _0xD5D9[1]
                            }
                        }
                    };
                    _0xD575.customSizes[_0xD58E] = [_0xD5F2, _0xD5C0]
                };
                _0xD575.findButton = function(_0xC652) {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xC652.children.length; _0xC6E8++) {
                        var _0xCE22 = _0xC652.children[_0xC6E8];
                        if (_0xCE22.getComponent(Components.GlowComponent) || _0xCE22.children.length == 0) {
                            return [_0xCE22.width, _0xCE22.height]
                        } else {
                            _0xD575.findButton(_0xCE22)
                        }
                    }
                };
                _0xD575.initMcProp = function() {
                    _0xD575.panelHolder = _0xD575.gameObject;
                    _0xD575.vertical = _0xD575.panelHolder.x > _0xD575.panelHolder.y;
                    _0xD575.initialWidth = Core.Main.gameWidth;
                    _0xD575.initialHeight = Core.Main.gameHeight;
                    _0xD575.originalHolderHeight = _0xD575.panelHolder.height;
                    _0xD575.originalHolderWidth = _0xD575.panelHolder.width;
                    _0xD575.maxRation_X = _0xD575.panelHolder.width / _0xD575.initialWidth;
                    _0xD575.maxRation_Y = _0xD575.panelHolder.height / _0xD575.initialHeight
                };
                _0xD575.initMc = function() {
                    _0xD575.allItemButtons = GameObject.getObjectsByTag(_0xB90A[145], false, 1, 0);
                    _0xD575.allItemButtons.forEach(function(_0xCE22) {
                        _0xCE22.disableInput()
                    });
                    for (var _0xC6E8 = 0; _0xC6E8 < Components.SessionData.UNLOCKED_ITEMS.length; _0xC6E8++) {
                        var _0xCE22 = Components.SessionData.UNLOCKED_ITEMS[_0xC6E8];
                        var _0xCE6D = _0xCE22.split(_0xB90A[61]);
                        for (var _0xD656 = 0; _0xD656 < _0xD575.allItemButtons.length; _0xD656++) {
                            var _0xD63D = _0xD575.allItemButtons[_0xD656];
                            if (_0xCE6D[1] == _0xD63D.tags[1] && _0xCE6D[2] == _0xD63D.tags[2]) {
                                _0xD63D.enableInput();
                                _0xD63D.alpha = 1;
                                _0xD575.itemButtons.push(_0xD63D)
                            }
                        }
                    };
                    _0xD575.allItemButtons = _0xD575.itemButtons.slice();
                    _0xD575.catButtons = GameObject.getObjectsByTag(_0xD575.catButtonTag, true);
                    _0xD575.arrows = GameObject.getObjectsByTag(_0xD575.arrowsTag, true);
                    if (_0xD575.catButtons[0]) {
                        _0xD575.catIntialWidth = _0xD575.catButtons[0].width
                    };
                    for (var _0xD624 = 0; _0xD624 < _0xD575.catButtons.length; _0xD624++) {
                        var _0xD60B = _0xD575.catButtons[_0xD624];
                        _0xD575.categories[Number(_0xD60B.tags[1])] = []
                    }
                };
                _0xD575.initLocalEvents = function() {
                    if (_0xD575.arrows.length != 0) {
                        _0xD575.arrows.forEach(function(_0xCE22) {
                            _0xCE22.addButtonPressedCallback(_0xD575.handleArrowClick)
                        })
                    };
                    if (_0xD575.catButtons.length != 0) {
                        _0xD575.events.addEventListener(_0xB90A[228], _0xD575.handleCategClick)
                    };
                    _0xD575.events.addEventListener(_0xB90A[29], _0xD575.handleSwipe);
                    _0xD575.gameObject.game.scale.onSizeChange.add(_0xD575.changeAspect);
                    Core.game.input.onUp.add(_0xD575.handleUp);
                    Core.game.input.onDown.add(_0xD575.handleDown)
                };
                _0xD575.handleCategClick = function(_0xCF35) {
                    _0xD575.hideCurrentCat();
                    _0xD575.currentCat = Number(_0xCF35.getData(_0xB90A[229]));
                    _0xD575.changeAspect()
                };
                _0xD575.handleArrowClick = function(_0xCE3B) {
                    if (_0xCE3B == GameObject.getObject(_0xB90A[230])) {
                        _0xD575.swipe(false)
                    } else {
                        _0xD575.swipe(true)
                    }
                };
                _0xD575.hideCurrentCat = function() {
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    _0xD575.currentButtons.forEach(function(_0xCE22) {
                        _0xCE22.visible = false
                    })
                };
                _0xD575.handleUp = function() {
                    _0xD575.swipeEndX = _0xD575.gameObject.game.input.x;
                    _0xD575.swipeEndY = _0xD575.gameObject.game.input.y;
                    _0xD575.checkSwipe();
                    _0xD575.mouseDown = false
                };
                _0xD575.handleDown = function() {
                    _0xD575.mouseDown = false;
                    var _0xD2D2;
                    _0xD575.createTempPos();
                    if (_0xD575.vertical) {
                        _0xD2D2 = _0xD575.gameObject.game.input.x > Core.game.canvas.width - _0xD575.panelHolder.width
                    } else {
                        _0xD2D2 = _0xD575.gameObject.game.input.y > Core.game.canvas.height - _0xD575.panelHolder.height
                    };
                    if (_0xD2D2) {
                        _0xD575.mouseDown = true;
                        _0xD575.swipeStartX = _0xD575.gameObject.game.input.x;
                        _0xD575.swipeStartY = _0xD575.gameObject.game.input.y
                    }
                };
                _0xD575.checkSwipe = function() {
                    if (_0xD575.mouseDown) {
                        if (_0xD575.vertical) {
                            _0xD575.checkVerticalSwipe()
                        } else {
                            _0xD575.checkHorizontalSwipe()
                        }
                    }
                };
                _0xD575.handleSwipe = function() {
                    if (_0xD575.mouseDown) {
                        _0xD575.trySwipe()
                    }
                };
                _0xD575.createTempPos = function() {
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    _0xD575.tempX = [];
                    _0xD575.tempY = [];
                    _0xD575.currentButtons.forEach(function(_0xCE22) {
                        _0xD575.tempX.push(_0xCE22.x);
                        _0xD575.tempY.push(_0xCE22.y)
                    })
                };
                _0xD575.trySwipe = function() {
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.currentButtons.length; _0xC6E8++) {
                        var _0xCE3B = _0xD575.currentButtons[_0xC6E8];
                        var _0xD6BA = _0xD575.tempY[_0xC6E8];
                        var _0xD6A1 = _0xD575.tempX[_0xC6E8];
                        if (_0xD575.vertical) {
                            var _0xD688 = _0xD6BA - (_0xD575.swipeStartY - _0xD575.gameObject.game.input.y);
                            _0xCE3B.y = _0xD688
                        } else {
                            var _0xD66F = _0xD6A1 - (_0xD575.swipeStartX - _0xD575.gameObject.game.input.x);
                            _0xCE3B.x = _0xD66F
                        }
                    }
                };
                _0xD575.checkHorizontalSwipe = function() {
                    var _0xD6D3 = Math.abs(_0xD575.swipeEndX - _0xD575.swipeStartX);
                    var _0xC684 = _0xD575.swipeEndX > _0xD575.swipeStartX;
                    if (_0xD6D3 > 100) {
                        _0xD575.swipe(!_0xC684)
                    } else {
                        _0xD575.swipeBack()
                    }
                };
                _0xD575.checkVerticalSwipe = function() {
                    var _0xD6EC = Math.abs(_0xD575.swipeEndY - _0xD575.swipeStartY);
                    var _0xD705 = _0xD575.swipeEndY < _0xD575.swipeStartY;
                    if (_0xD6EC > 100) {
                        _0xD575.swipe(_0xD705)
                    } else {
                        _0xD575.swipeBack()
                    }
                };
                _0xD575.swipe = function(_0xD71E) {
                    if (_0xD71E) {
                        _0xD575.currentPage++
                    } else {
                        _0xD575.currentPage--
                    };
                    if (_0xD575.currentPage > _0xD575.maxPage - 1) {
                        _0xD575.currentPage = _0xD575.maxPage - 1
                    };
                    if (_0xD575.currentPage <= 0) {
                        _0xD575.currentPage = 0
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.currentButtons.length; _0xC6E8++) {
                        var _0xCE3B = _0xD575.currentButtons[_0xC6E8];
                        var _0xD6A1 = _0xD575.vertical ? _0xD575.xPositions[_0xC6E8] : _0xD575.xPositions[_0xC6E8] - Core.game.canvas.width * _0xD575.currentPage;
                        var _0xD6BA = _0xD575.vertical ? _0xD575.yPositions[_0xC6E8] - Core.game.canvas.height * _0xD575.currentPage : _0xD575.yPositions[_0xC6E8];
                        Components.Tweens.create(_0xCE3B, true).to(_0xC639(_0xB90A[43], _0xD6A1, _0xB90A[44], _0xD6BA), 200, null, true)
                    }
                };
                _0xD575.swipeBack = function() {
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.currentButtons.length; _0xC6E8++) {
                        var _0xCE3B = _0xD575.currentButtons[_0xC6E8];
                        var _0xD6A1 = _0xD575.tempX[_0xC6E8];
                        var _0xD6BA = _0xD575.tempY[_0xC6E8];
                        Components.Tweens.create(_0xCE3B, true).to(_0xC639(_0xB90A[43], _0xD6A1, _0xB90A[44], _0xD6BA), 100, null, true)
                    }
                };
                _0xD575.createCategories = function() {
                    if (_0xD575.catButtons.length != 0) {
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.itemButtons.length; _0xC6E8++) {
                            var _0xCE3B = _0xD575.itemButtons[_0xC6E8];
                            var _0xD15B = Number(_0xCE3B.tags[1]) - 2;
                            trace(_0xCE3B.name, _0xCE3B.x, _0xCE3B.y, _0xCE3B.alpha);
                            _0xCE3B.visible = false;
                            if (!_0xD575.categories[_0xD15B]) {
                                _0xD575.categories[_0xD15B] = []
                            };
                            _0xD575.categories[_0xD15B].push(_0xCE3B)
                        }
                    };
                    if (!_0xD575.categories[_0xD15B]) {
                        return
                    };
                    _0xD575.catButtons.forEach(function(_0xCE22) {
                        var _0xD15B = Number(_0xCE22.tags[1]) - 1;
                        if (_0xD575.categories[_0xD15B].length == 0) {
                            _0xCE22.alpha = 0.5;
                            _0xCE22.disableInput()
                        }
                    });
                    _0xD575.catButtons.push(GameObject.getObject(_0xB90A[231]));
                    _0xD575.catButtons.unshift(GameObject.getObject(_0xB90A[230]))
                };
                _0xD575.changeAspect = function() {
                    _0xD575.resizePanel();
                    _0xD575.handleCatButtonsPosition();
                    _0xD575.handleCatButtonsScale();
                    _0xD575.createButtonPostionsMatrix();
                    _0xD575.showButtons(0, 0);
                    _0xD575.fixePosition();
                    _0xD575.handleArrows();
                    _0xD575.handleToggleButton()
                };
                _0xD575.handleToggleButton = function() {
                    if (_0xD575.toggleButton) {
                        _0xD575.toggleButton.x = _0xD575.vertical ? Core.game.canvas.width - _0xD575.panelHolder.width - _0xD575.toggleButton.width / 2 : _0xD575.toggleButton.width / 2;
                        _0xD575.toggleButton.y = _0xD575.vertical ? _0xD575.toggleButton.height / 2 : Core.game.canvas.height - _0xD575.panelHolder.height - _0xD575.toggleButton.height / 2
                    }
                };
                _0xD575.handleArrows = function() {
                    if (_0xD575.maxPage > 1) {
                        _0xD575.arrows.forEach(function(_0xCE22) {
                            _0xCE22.visible = true
                        })
                    }
                };
                _0xD575.fixePosition = function() {
                    _0xD575.xPositions = [];
                    _0xD575.yPositions = [];
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    _0xD575.currentButtons.forEach(function(_0xCE22) {
                        _0xD575.xPositions.push(_0xCE22.x);
                        _0xD575.yPositions.push(_0xCE22.y)
                    })
                };
                _0xD575.createButtonPostionsMatrix = function() {
                    if (!_0xD575.customSizes[_0xD575.currentCat - 1]) {
                        return
                    };
                    if (_0xD575.autoCheckButtonsSize && _0xD575.customSizes.length != 0) {
                        _0xD575.buttonWidth = _0xD575.customSizes[_0xD575.currentCat - 1][0];
                        _0xD575.buttonHeight = _0xD575.customSizes[_0xD575.currentCat - 1][1]
                    };
                    _0xD575.currentPage = 0;
                    _0xD575.buttonScale = 1;
                    _0xD575.columns = 0;
                    _0xD575.rows = 0;
                    _0xD575.xPositions = [];
                    _0xD575.yPositions = [];
                    if (_0xD575.catButtons.length != 0) {
                        _0xD575.currentButtons = _0xD575.categories[_0xD575.currentCat - 1]
                    };
                    if (_0xD575.categories.length == 0) {
                        _0xD575.currentButtons = _0xD575.itemButtons
                    };
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    var _0xD750 = 0;
                    _0xD575.buttonPadding = 4;
                    _0xD575.sidesPadding = _0xD575.vertical ? Core.game.canvas.height / 7 : Core.game.canvas.width / 7;
                    if (!_0xD575.addSidePadding) {
                        _0xD575.sidesPadding = _0xD575.buttonPadding
                    };
                    if (_0xD575.catButtons.length != 0) {
                        _0xD750 = _0xD575.vertical ? _0xD575.catButtons[0].width / 2 : _0xD575.catButtons[0].height / 2
                    };
                    _0xD575.startX = _0xD575.vertical ? Core.game.canvas.width - _0xD575.panelHolder.width + _0xD750 + _0xD575.buttonPadding : _0xD575.sidesPadding;
                    _0xD575.startY = _0xD575.vertical ? _0xD575.sidesPadding + Core.game.canvas.height / 10 : Core.game.canvas.height - _0xD575.panelHolder.height + _0xD750 + _0xD575.buttonPadding;
                    _0xD575.xLimit = _0xD575.vertical ? Core.game.canvas.width - _0xD575.buttonPadding : Core.game.canvas.width - _0xD575.sidesPadding;
                    _0xD575.yLimit = _0xD575.vertical ? Core.game.canvas.height - _0xD575.sidesPadding : Core.game.canvas.height - _0xD575.buttonPadding;
                    _0xD575.availableWidth = Math.floor(_0xD575.xLimit - _0xD575.startX);
                    _0xD575.availableHeight = Math.floor(_0xD575.yLimit - _0xD575.startY);
                    if (_0xD575.vertical) {
                        _0xD575.findColumns(_0xD575.buttonScale);
                        _0xD575.findRows(_0xD575.buttonScale);
                        if (_0xD575.rows >= _0xD575.currentButtons.length / _0xD575.columns) {
                            _0xD575.rows = Math.ceil(_0xD575.currentButtons.length / _0xD575.columns)
                        }
                    } else {
                        _0xD575.findRows(_0xD575.buttonScale);
                        _0xD575.findColumns(_0xD575.buttonScale);
                        if (_0xD575.columns >= _0xD575.currentButtons.length / _0xD575.rows) {
                            _0xD575.columns = Math.ceil(_0xD575.currentButtons.length / _0xD575.rows)
                        }
                    };
                    if (_0xD575.rows == 1) {
                        _0xD575.yPositions.push(_0xD575.yLimit - _0xD575.availableHeight / 2)
                    } else {
                        var _0xD782 = _0xD575.availableHeight / _0xD575.rows;
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.rows; _0xC6E8++) {
                            var _0xD688 = _0xD575.startY + _0xD575.buttonHeight * _0xD575.buttonScale / 2 + (_0xD782 - _0xD575.buttonHeight * _0xD575.buttonScale) / 2 + _0xD782 * _0xC6E8;
                            _0xD575.yPositions.push(Math.floor(_0xD688))
                        }
                    };
                    if (_0xD575.columns == 1) {
                        _0xD575.xPositions.push(_0xD575.xLimit - _0xD575.availableWidth / 2)
                    } else {
                        var _0xD769 = _0xD575.availableWidth / _0xD575.columns;
                        for (var _0xD737 = 0; _0xD737 < _0xD575.columns; _0xD737++) {
                            var _0xD66F = _0xD575.startX + _0xD575.buttonWidth * _0xD575.buttonScale / 2 + (_0xD769 - _0xD575.buttonWidth * _0xD575.buttonScale) / 2 + _0xD769 * _0xD737;
                            _0xD575.xPositions.push(Math.floor(_0xD66F))
                        };
                        trace(_0xD575.xPositions, _0xB90A[232])
                    }
                };
                _0xD575.findColumns = function(_0xD79B) {
                    var _0xD5F2 = _0xD575.buttonWidth * _0xD79B;
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.currentButtons.length; _0xC6E8++) {
                        var _0xD6A1 = _0xD575.startX + _0xD5F2 / 2 + _0xD5F2 * _0xC6E8 + _0xD575.buttonPadding * _0xC6E8 + _0xD575.buttonPadding;
                        if (_0xD6A1 <= _0xD575.xLimit - _0xD575.buttonPadding - _0xD5F2 / 2) {
                            _0xD575.columns++
                        }
                    };
                    if (_0xD575.columns == 0) {
                        _0xD575.buttonScale = _0xD575.availableWidth / _0xD575.buttonWidth;
                        _0xD575.columns = 1
                    }
                };
                _0xD575.findRows = function(_0xD79B) {
                    var _0xD5C0 = _0xD575.buttonHeight * _0xD79B;
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.currentButtons.length; _0xC6E8++) {
                        var _0xD6BA = _0xD575.startY + _0xD5C0 / 2 + _0xD5C0 * _0xC6E8 + _0xD575.buttonPadding * _0xC6E8 + _0xD575.buttonPadding;
                        if (_0xD6BA <= _0xD575.yLimit - _0xD575.buttonPadding - _0xD5C0 / 2) {
                            _0xD575.rows++
                        }
                    };
                    if (_0xD575.rows == 0) {
                        _0xD575.buttonScale = _0xD575.availableHeight / _0xD575.buttonHeight;
                        _0xD575.rows = 1
                    }
                };
                _0xD575.showButtons = function(_0xD818, _0xD7FF) {
                    _0xD575.maxPage = _0xD818 + 1;
                    var _0xD6A1;
                    var _0xD6BA;
                    var _0xD7E6 = _0xD575.vertical ? Core.game.canvas.height * _0xD818 : Core.game.canvas.width * _0xD818;
                    if (_0xD575.vertical) {
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.yPositions.length; _0xC6E8++) {
                            _0xD6BA = _0xD575.yPositions[_0xC6E8] + _0xD7E6;
                            for (var _0xC9D6 = 0; _0xC9D6 < _0xD575.xPositions.length; _0xC9D6++) {
                                _0xD6A1 = _0xD575.xPositions[_0xC9D6];
                                if (_0xD575.currentButtons[_0xD7FF]) {
                                    _0xD575.currentButtons[_0xD7FF].visible = true;
                                    _0xD575.currentButtons[_0xD7FF].position[_0xB90A[95]](_0xD6A1, _0xD6BA);
                                    _0xD575.currentButtons[_0xD7FF].scale[_0xB90A[95]](_0xD575.buttonScale, _0xD575.buttonScale);
                                    _0xD7FF++
                                }
                            }
                        }
                    } else {
                        for (var _0xD7B4 = 0; _0xD7B4 < _0xD575.xPositions.length; _0xD7B4++) {
                            _0xD6A1 = _0xD575.xPositions[_0xD7B4] + _0xD7E6;
                            for (var _0xD7CD = 0; _0xD7CD < _0xD575.yPositions.length; _0xD7CD++) {
                                _0xD6BA = _0xD575.yPositions[_0xD7CD];
                                if (_0xD575.currentButtons[_0xD7FF]) {
                                    _0xD575.currentButtons[_0xD7FF].visible = true;
                                    _0xD575.currentButtons[_0xD7FF].position[_0xB90A[95]](_0xD6A1, _0xD6BA);
                                    _0xD575.currentButtons[_0xD7FF].scale[_0xB90A[95]](_0xD575.buttonScale, _0xD575.buttonScale);
                                    _0xD7FF++
                                }
                            }
                        }
                    };
                    if (!_0xD575.currentButtons) {
                        return
                    };
                    if (_0xD7FF < _0xD575.currentButtons.length) {
                        _0xD575.showButtons(_0xD818 + 1, _0xD7FF)
                    }
                };
                _0xD575.resizePanel = function() {
                    _0xD575.widthChange = Core.game.canvas.width / _0xD575.initialWidth;
                    _0xD575.heightChange = Core.game.canvas.height / _0xD575.initialHeight;
                    _0xD575.scale = _0xD575.widthChange > _0xD575.heightChange ? _0xD575.widthChange : _0xD575.heightChange;
                    _0xD575.panelHolder.scale[_0xB90A[95]](_0xD575.scale, _0xD575.scale);
                    if (_0xD575.panelHolder.width / Core.game.canvas.width > _0xD575.maxRation_X) {
                        while (_0xD575.panelHolder.width / Core.game.canvas.width > _0xD575.maxRation_X) {
                            _0xD575.panelHolder.width--
                        }
                    };
                    if (_0xD575.panelHolder.height / Core.game.canvas.height > _0xD575.maxRation_Y) {
                        while (_0xD575.panelHolder.height / Core.game.canvas.height > _0xD575.maxRation_Y) {
                            _0xD575.panelHolder.height--
                        }
                    };
                    _0xD575.panelHolder.x = Core.game.canvas.width - _0xD575.panelHolder.width / 2;
                    _0xD575.panelHolder.y = Core.game.canvas.height - _0xD575.panelHolder.height * _0xD575.panelHolder.anchor.y;
                    if (_0xD575.vertical) {
                        Components.Panel.AVAILABLE_SPACE = Math.floor(Core.game.canvas.width - _0xD575.panelHolder.width);
                        _0xD575.events.throwEvent(Components.Panel.FREE_SPACE, Util.Util.createEventData([
                            [Components.Panel.FREE_SPACE, [Math.floor(Core.game.canvas.width - _0xD575.panelHolder.width), _0xD575.vertical]]
                        ]))
                    } else {
                        Components.Panel.AVAILABLE_SPACE = Math.floor(Core.game.canvas.height - _0xD575.panelHolder.height);
                        _0xD575.events.throwEvent(Components.Panel.FREE_SPACE, Util.Util.createEventData([
                            [Components.Panel.FREE_SPACE, [Core.game.canvas.height, _0xD575.vertical]]
                        ]))
                    }
                };
                _0xD575.handleCatButtonsPosition = function() {
                    if (_0xD575.catButtons.length != 0) {
                        if (_0xD575.vertical) {
                            var _0xD895 = (_0xD575.panelHolder.height - _0xD575.panelHolder.height / 7) / (_0xD575.catButtons.length + 1);
                            for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.catButtons.length; _0xC6E8++) {
                                var _0xD863 = _0xD575.catButtons[_0xC6E8];
                                _0xD863.x = _0xD575.panelHolder.x - _0xD575.panelHolder.width / 2;
                                _0xD863.y = _0xD575.panelHolder.height / 7 + _0xD895 * (_0xC6E8 + 1)
                            }
                        } else {
                            var _0xD87C = _0xD575.panelHolder.width / (_0xD575.catButtons.length + 1);
                            for (var _0xD84A = 0; _0xD84A < _0xD575.catButtons.length; _0xD84A++) {
                                var _0xD831 = _0xD575.catButtons[_0xD84A];
                                _0xD831.x = _0xD87C * (_0xD84A + 1);
                                _0xD831.y = _0xD575.panelHolder.y - _0xD575.panelHolder.height / 2
                            }
                        }
                    }
                };
                _0xD575.handleCatButtonsScale = function() {
                    if (_0xD575.catButtons.length != 0) {
                        var _0xD8F9 = _0xD575.panelHolder.height / _0xD575.originalHolderHeight;
                        if (Components.DevUtils.getCurrentUnitName() == _0xB90A[233]) {
                            _0xD8F9 = 0.8
                        } else {
                            if (_0xD8F9 >= 1) {
                                _0xD8F9 = 1
                            }
                        };
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xD575.catButtons.length; _0xC6E8++) {
                            var _0xD863 = _0xD575.catButtons[_0xC6E8];
                            _0xD863.scale[_0xB90A[95]](_0xD8F9, _0xD8F9)
                        };
                        var _0xD8C7 = Phaser.Math.distancePow(_0xD575.catButtons[0].x, _0xD575.catButtons[0].y, _0xD575.catButtons[1].x, _0xD575.catButtons[1].y);
                        var _0xD8E0 = _0xD8C7 - _0xD575.catButtons[0].height;
                        while (_0xD8E0 < _0xD575.catButtons[0].height / 10) {
                            _0xD575.catButtons.forEach(function(_0xCE22) {
                                _0xCE22.width--;
                                _0xCE22.height--
                            });
                            _0xD8C7 = Phaser.Math.distancePow(_0xD575.catButtons[0].x, _0xD575.catButtons[0].y, _0xD575.catButtons[1].x, _0xD575.catButtons[1].y);
                            _0xD8E0 = _0xD8C7 - _0xD575.catButtons[0].height
                        };
                        var _0xD8AE = _0xD575.catButtons[0].width / _0xD575.catIntialWidth;
                        _0xD575.catButtons.forEach(function(_0xCE22) {
                            _0xCE22.scale[_0xB90A[95]](_0xD8AE, _0xD8AE)
                        });
                        _0xD575.events.throwEvent(_0xB90A[101]);
                        _0xD575.gameObject.game.time.events.add(100, function() {
                            _0xD575.events.throwEvent(_0xB90A[101])
                        }, _0xB9B9(_0xD575))
                    }
                };
                return _0xD575
            }
            _0xB987(_0xD543, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0xD543.CREATE_PANEL, this.handleCreate)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                Core.game.input.onDown.remove(this.handleUp);
                Core.game.input.onUp.remove(this.handleDown);
                this.gameObject.game.scale.onSizeChange.remove(this.changeAspect);
                _get(_getPrototypeOf(_0xD543.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0xD543
        }(Scene.Component);
        _0xD543.CREATE_PANEL = _0xB90A[234];
        _0xD543.FREE_SPACE = _0xB90A[235];
        _0xD543.AVAILABLE_SPACE = 0;
        Components.PanelBattle = _0xD543
    }

    function _0xBB30(Components) {
        var _0xD912 = function(_0xD92B) {
            _0xBA1D(_0xD912, _0xD92B);

            function _0xD912() {
                var _0xD95D;
                _0xB955(this, _0xD912);
                _0xD95D = _0xB9A0(this, _getPrototypeOf(_0xD912).apply(this, arguments));
                _0xD95D.hide = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD95D.buttons.length; _0xC6E8++) {
                        var _0xCE22 = _0xD95D.buttons[_0xC6E8].parent;
                        _0xD95D.buttons[_0xC6E8].disableInput();
                        _0xCE22.scale[_0xB90A[95]](0, 0)
                    };
                    _0xD95D.gameObject.alpha = 0
                };
                _0xD95D.handleBossPanel = function() {
                    _0xD95D.showPanel();
                    _0xD95D.animBossChoice(5, 0)
                };
                _0xD95D.animBossChoice = function(_0xD98F, _0xCC2E) {
                    _0xD95D.buttons.forEach(function(_0xCE22) {
                        _0xCE22.getComponent(Components.GlowComponent).removeStaticGlow()
                    });
                    if (_0xCC2E <= _0xD98F) {
                        var _0xD976 = _0xD95D.buttons[Math.floor(Math.random() * _0xD95D.buttons.length)];
                        _0xD976.getComponent(Components.GlowComponent).staticGlow();
                        _0xD95D.gameObject.game.time.events.add(700, function() {
                            _0xD95D.animBossChoice(_0xD98F, _0xCC2E + 1)
                        }, _0xB9B9(_0xD95D))
                    } else {
                        _0xD95D.animRandomChoice()
                    }
                };
                _0xD95D.animRandomChoice = function() {
                    var _0xD976 = _0xD95D.buttons[Math.floor(Math.random() * _0xD95D.buttons.length)];
                    _0xD976.getComponent(Components.GlowComponent).staticGlow();
                    _0xD95D.events.throwEvent(_0xD912.CURENT_THEME, Util.Util.createEventData([
                        [_0xB90A[62], _0xD976.tags[1]]
                    ]));
                    Components.Tweens.create(_0xD976.scale).to(_0xC639(_0xB90A[43], 1.1, _0xB90A[44], 1.1), 100, null, true, 0, 3, true).onComplete.addOnce(function() {
                        _0xD95D.handleThemeChoice(_0xD976)
                    })
                };
                _0xD95D.handlePlayerPanel = function() {
                    _0xD95D.showPanel();
                    _0xD95D.gameObject.game.time.events.add(1000, function() {
                        _0xD95D.buttonsStatus(true)
                    }, _0xB9B9(_0xD95D))
                };
                _0xD95D.showPanel = function() {
                    _0xD95D.buttons.forEach(function(_0xCE22) {
                        _0xCE22.getComponent(Components.GlowComponent).removeStaticGlow()
                    });
                    _0xD95D.darkLayer.alpha = 0;
                    _0xD95D.darkLayer.visible = true;
                    _0xD95D.darkLayer.enableInput();
                    Components.Tweens.create(_0xD95D.darkLayer).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                    Components.Tweens.create(_0xD95D.gameObject).to(_0xC639(_0xB90A[45], 1), 200, null, true).onComplete.addOnce(function() {
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xD95D.buttons.length; _0xC6E8++) {
                            var _0xCE22 = _0xD95D.buttons[_0xC6E8].parent;
                            Components.Tweens.create(_0xCE22.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 100, null, true, 50 * _0xC6E8)
                        }
                    })
                };
                _0xD95D.handleThemeChoice = function(_0xCE3B) {
                    _0xCE3B.visible = false;
                    _0xCE3B.parent.visible = false;
                    _0xCE3B.disableInput();
                    _0xD95D.buttons.splice(_0xD95D.buttons.indexOf(_0xCE3B), 1);
                    _0xD95D.buttonsStatus(false);
                    _0xD95D.closePanel();
                    _0xD95D.events.throwEvent(_0xD912.CURENT_THEME, Util.Util.createEventData([
                        [_0xB90A[62], _0xCE3B.tags[1]]
                    ]))
                };
                _0xD95D.closePanel = function() {
                    Components.Tweens.create(_0xD95D.darkLayer).to(_0xC639(_0xB90A[45], 0), 200, null, true).onComplete.addOnce(function() {
                        _0xD95D.darkLayer.visible = false;
                        _0xD95D.darkLayer.disableInput()
                    });
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD95D.buttons.length; _0xC6E8++) {
                        var _0xCE22 = _0xD95D.buttons[_0xC6E8].parent;
                        Components.Tweens.create(_0xCE22.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 100, null, true, 50 * _0xC6E8)
                    };
                    _0xD95D.gameObject.game.time.events.add(200, function() {
                        Components.Tweens.create(_0xD95D.gameObject).to(_0xC639(_0xB90A[45], 0), 100, null, true);
                        _0xD95D.events.throwEvent(Components.BattleDollPanel.SHOW_DOLL_PANEL)
                    }, _0xB9B9(_0xD95D))
                };
                _0xD95D.buttonsStatus = function(_0xCE86) {
                    _0xD95D.buttons.forEach(function(_0xCE22) {
                        if (_0xCE86) {
                            _0xCE22.enableInput()
                        } else {
                            _0xCE22.disableInput()
                        }
                    })
                };
                return _0xD95D
            }
            _0xB987(_0xD912, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xD944 = this;
                this.buttons = GameObject.getObjectsByTag(_0xB90A[236], true);
                this.darkLayer = GameObject.getObject(_0xB90A[64]);
                this.darkLayer.visible = false;
                this.darkLayer.disableInput();
                this.buttons.forEach(function(_0xCE22) {
                    _0xCE22.disableInput();
                    _0xCE22.addButtonPressedCallback(_0xD944.handleThemeChoice)
                });
                this.events.addEventListener(_0xD912.SHOW_THEME_BOSS_PANEL, this.handleBossPanel);
                this.events.addEventListener(_0xD912.SHOW_THEME_PLAYER_PANEL, this.handlePlayerPanel);
                this.hide()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xD912
        }(Scene.Component);
        _0xD912.SHOW_THEME_PLAYER_PANEL = _0xB90A[237];
        _0xD912.SHOW_THEME_BOSS_PANEL = _0xB90A[238];
        _0xD912.HIDE_THEME_PANEL = _0xB90A[239];
        _0xD912.CURENT_THEME = _0xB90A[240];
        Components.ThemePanelComponent = _0xD912
    }

    function _0xBB49(Components) {
        var _0xD9A8 = function(_0xD9C1) {
            _0xBA1D(_0xD9A8, _0xD9C1);

            function _0xD9A8() {
                var _0xD9DA;
                _0xB955(this, _0xD9A8);
                _0xD9DA = _0xB9A0(this, _getPrototypeOf(_0xD9A8).apply(this, arguments));
                _0xD9DA.gameHolderName = _0xB90A[241];
                _0xD9DA.ballName = _0xB90A[242];
                _0xD9DA.brickTag = _0xB90A[243];
                _0xD9DA.brickTypeTag = _0xB90A[244];
                _0xD9DA.playerName = _0xB90A[245];
                _0xD9DA.standardSpeed = 300;
                _0xD9DA.maxSpeed = 300;
                _0xD9DA.bricksArray = [];
                _0xD9DA.ballDefaultPos = true;
                _0xD9DA.game_over = false;
                _0xD9DA.newPlayerScale = 1;
                _0xD9DA.brickType = [];
                _0xD9DA.rows = 8;
                _0xD9DA.brickOffset = 3;
                _0xD9DA.starCounter = 0;
                _0xD9DA.once = true;
                _0xD9DA.hardBrickHitCounter = 0;
                _0xD9DA.brickHitArray = [];
                _0xD9DA.hardBrickArray = [];
                _0xD9DA.metalBrickArray = [];
                _0xD9DA.newBallScaleY = 0.7;
                _0xD9DA.newBallScaleX = 0.7;
                _0xD9DA.metalBrickCounter = 0;
                _0xD9DA.addBricks = function() {
                    var _0xD9F3;
                    var _0xDA0C;
                    var _0xD5F2 = _0xD9DA.brickType[0].width;
                    var _0xD5C0 = _0xD9DA.brickType[0].height;
                    var _0xDA25 = _0xD9DA.searchColumnsLimit();
                    var _0xDAA2 = _0xD9DA.limitsMc.x - _0xD9DA.limitsMc.width * _0xD9DA.limitsMc.anchor.x + (_0xD9DA.limitsMc.width - (_0xDA25 * _0xD5F2 + _0xDA25 * _0xD9DA.brickOffset)) / 2 + _0xD5F2 / 2;
                    var _0xDABB = _0xD9DA.limitsMc.y - _0xD9DA.limitsMc.height * _0xD9DA.limitsMc.anchor.y + _0xD5C0 / 2 + _0xD9DA.brickOffset * 2;
                    var _0xDA3E = 0;
                    _0xD9DA.metalBrickCounter = 0;
                    var _0xDA57 = 0;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xDA25; _0xC6E8++) {
                        _0xD9F3 = _0xDAA2 + _0xC6E8 * _0xD5F2 + _0xC6E8 * _0xD9DA.brickOffset;
                        if (Components.DevUtils.getCurrentUnitName() == _0xB90A[246]) {
                            _0xD9DA.rows = 5
                        };
                        if (Components.DevUtils.getCurrentUnitName() == _0xB90A[247]) {
                            _0xD9DA.rows = 6
                        };
                        if (Components.DevUtils.getCurrentUnitName() == _0xB90A[248]) {
                            _0xD9DA.rows = 6
                        };
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xD9DA.rows; _0xC9D6++) {
                            _0xDA0C = _0xDABB + _0xC9D6 * _0xD5C0 + _0xC9D6 * _0xD9DA.brickOffset;
                            _0xDA3E++;
                            var _0xDA89 = _0xD9DA.brickType[Math.floor(Math.random() * _0xD9DA.brickType.length)];
                            var _0xDA70 = new GameObject(_0xD9DA.gameObject.game, _0xD9DA.brickTag + _0xB90A[61] + _0xDA89.tags[1] + _0xB90A[61] + _0xDA3E);
                            _0xDA70.loadTexture(_0xDA89.texture);
                            if (_0xDA89.tags[2] == _0xB90A[249]) {
                                _0xDA57++;
                                _0xDA70.name = _0xDA70.name + _0xDA57;
                                _0xD9DA.hardBrickArray.push(_0xDA70)
                            };
                            if (_0xDA89.tags[2] == _0xB90A[250] && _0xD9DA.metalBrickCounter < 5) {
                                _0xD9DA.metalBrickCounter++;
                                _0xD9DA.metalBrickArray.push(_0xDA70)
                            };
                            if (_0xD9DA.metalBrickCounter > 4) {
                                if (_0xDA70.tags[1] != _0xB90A[251]) {
                                    _0xD9DA.brickType[0].parent.addChild(_0xDA70);
                                    _0xDA70.anchor[_0xB90A[95]](0.5, 0.5);
                                    _0xDA70.position[_0xB90A[95]](_0xD9F3, _0xDA0C);
                                    _0xD9DA.bricksArray.push(_0xDA70)
                                }
                            } else {
                                _0xD9DA.brickType[0].parent.addChild(_0xDA70);
                                _0xDA70.anchor[_0xB90A[95]](0.5, 0.5);
                                _0xDA70.position[_0xB90A[95]](_0xD9F3, _0xDA0C);
                                _0xD9DA.bricksArray.push(_0xDA70)
                            }
                        }
                    }
                };
                _0xD9DA.searchColumnsLimit = function() {
                    var _0xD5F2 = _0xD9DA.brickType[0].width;
                    var _0xDAD4 = 0;
                    while (_0xDAD4 * _0xD5F2 + _0xDAD4 * _0xD9DA.brickOffset < _0xD9DA.limitsMc.width) {
                        _0xDAD4++
                    };
                    return _0xDAD4 - 1
                };
                _0xD9DA.initMc = function() {
                    _0xD9DA.limitsMc = GameObject.getObject(_0xD9DA.gameHolderName);
                    _0xD9DA.ball = GameObject.getObject(_0xD9DA.ballName);
                    _0xD9DA.brickType = GameObject.getObjectsByTag(_0xD9DA.brickTypeTag, true);
                    _0xD9DA.player = GameObject.getObject(_0xD9DA.playerName);
                    _0xD9DA.maxSpeed = _0xD9DA.standardSpeed;
                    _0xD9DA.ps = GameObject.getObject(_0xB90A[252]).getComponent(Components.ParticleSystem)
                };
                _0xD9DA.initMcProp = function() {
                    _0xD9DA.brickType.forEach(function(_0xCE22) {
                        _0xCE22.visible = false
                    });
                    _0xD9DA.gameObject.game.physics.startSystem(Phaser.Physics.ARCADE);
                    _0xD9DA.lastSpeed.x = -_0xD9DA.maxSpeed;
                    _0xD9DA.lastSpeed.y = _0xD9DA.maxSpeed;
                    _0xD9DA.createBallPhysiscs();
                    _0xD9DA.createBounds();
                    _0xD9DA.createBricks();
                    _0xD9DA.createPlayer();
                    _0xD9DA.changeAspect();
                    _0xD9DA.moveToDefaultPos()
                };
                _0xD9DA.createPlayer = function() {
                    _0xD9DA.gameObject.game.physics.enable(_0xD9DA.player, Phaser.Physics.ARCADE);
                    _0xD9DA.player.body.enableBody = true;
                    _0xD9DA.player.body.immovable = true
                };
                _0xD9DA.createBricks = function() {
                    _0xD9DA.bricksGroup = _0xD9DA.gameObject.game.add.physicsGroup(Phaser.Physics.ARCADE, _0xD9DA.limitsMc.parent);
                    _0xD9DA.bricksGroup.enableBody = true;
                    _0xD9DA.bricksArray.forEach(function(_0xCE22) {
                        _0xD9DA.bricksGroup.add(_0xCE22);
                        _0xCE22.body.immovable = true;
                        _0xCE22.body.bounce[_0xB90A[95]](1)
                    })
                };
                _0xD9DA.createBallPhysiscs = function() {
                    _0xD9DA.gameObject.game.physics.enable(_0xD9DA.ball, Phaser.Physics.ARCADE);
                    _0xD9DA.ball.body.bounce[_0xB90A[95]](1);
                    _0xD9DA.ball.body.velocity[_0xB90A[95]](0);
                    _0xD9DA.ball.body.mass = 1;
                    _0xD9DA.ball.body.collideWorldBounds = true;
                    var _0xDAED = (_0xD9DA.ball.width + _0xD9DA.ball.height) / 2 * _0xD9DA.gameObject.scale.x / 2 - _0xD9DA.ball.width / 2;
                    var _0xDB06 = (_0xD9DA.ball.width + _0xD9DA.ball.height) / 2 * _0xD9DA.gameObject.scale.y / 2 - _0xD9DA.ball.height / 2;
                    _0xD9DA.ball.body.setSize((_0xD9DA.ball.width + _0xD9DA.ball.height) / 2 * _0xD9DA.gameObject.scale.x, (_0xD9DA.ball.width + _0xD9DA.ball.height) / 2 * _0xD9DA.gameObject.scale.y, -_0xDAED, -_0xDB06)
                };
                _0xD9DA.createBounds = function() {
                    _0xD9DA.limits = Components.DevUtils.getBounds(_0xD9DA.limitsMc);
                    _0xD9DA.gameObject.game.physics.arcade.bounds = _0xD9DA.limits
                };
                _0xD9DA.initLocalEvents = function() {
                    _0xD9DA.events.addEventListener(Components.SessionData.NO_LIVES, _0xD9DA.handleGameOver);
                    _0xD9DA.events.addEventListener(_0xB90A[253], _0xD9DA.changeAspect);
                    _0xD9DA.events.addEventListener(_0xD9A8.RESTART, _0xD9DA.handleRestart);
                    _0xD9DA.events.addEventListener(Components.BricksModifier.MODIFY, _0xD9DA.handleModifier);
                    _0xD9DA.events.addEventListener(_0xD9A8.WIN, _0xD9DA.showFinalPopUp);
                    _0xD9DA.events.addEventListener(_0xB90A[254], function() {
                        Managers.SceneManager.instance.loadUnit(Components.DevUtils.getCurrentUnitName(), true)
                    })
                };
                _0xD9DA.handleModifier = function(_0xCF35) {
                    var _0xDB1F = _0xCF35.getData(_0xB90A[62]);
                    if (_0xDB1F[0] == _0xB90A[255]) {
                        _0xD9DA.newPlayerScale = _0xD9DA.player.scale.x + _0xDB1F[1] / 100
                    };
                    if (_0xDB1F[0] == _0xB90A[256]) {
                        _0xD9DA.maxSpeed = _0xD9DA.maxSpeed + _0xD9DA.standardSpeed * _0xDB1F[1] / 100;
                        if (_0xD9DA.maxSpeed < _0xD9DA.standardSpeed / 2) {
                            _0xD9DA.maxSpeed = _0xD9DA.standardSpeed / 2
                        };
                        if (_0xD9DA.maxSpeed > 375) {
                            _0xD9DA.maxSpeed = 375
                        };
                        _0xD9DA.ball.body.velocity.x = Math.sign(_0xD9DA.ball.body.velocity.x) * _0xD9DA.maxSpeed;
                        _0xD9DA.ball.body.velocity.y = Math.sign(_0xD9DA.ball.body.velocity.y) * _0xD9DA.maxSpeed
                    };
                    if (_0xDB1F[0] == _0xB90A[257]) {
                        if (Components.SessionData.lostLives > 0) {
                            _0xD9DA.events.throwEvent(Components.SessionData.ADD_LIFE)
                        }
                    };
                    if (_0xDB1F[0] == _0xB90A[258]) {
                        _0xD9DA.starCounter = parseInt(_0xDB1F[1])
                    };
                    if (_0xDB1F[0] == _0xB90A[259]) {
                        _0xD9DA.newBallScaleX = _0xD9DA.ball.scale.x + _0xDB1F[1] / 100;
                        _0xD9DA.newBallScaleY = _0xD9DA.ball.scale.y + _0xDB1F[1] / 100;
                        _0xD9DA.handleBallBodyPosition()
                    };
                    Components.Tweens.create(_0xD9DA.gameObject, true).to({}, 7000, null, true).onComplete.addOnce(function() {
                        _0xD9DA.ball.scale.x = 1;
                        _0xD9DA.ball.scale.y = 1;
                        _0xD9DA.newBallScaleX = _0xD9DA.ball.scale.x;
                        _0xD9DA.newBallScaleY = _0xD9DA.ball.scale.x;
                        _0xD9DA.handleBallBodyPosition()
                    });
                    if (_0xDB1F[0] == _0xB90A[260]) {
                        _0xD9DA.events.throwEvent(_0xB90A[261]);
                        Components.DevUtils.playSound(_0xB90A[262]);
                        var _0xDB38 = _0xD9DA.player.x - _0xD9DA.player.width / 2;
                        var _0xDB51 = _0xD9DA.player.x + _0xD9DA.player.width / 2;
                        _0xD9DA.bricksArray.forEach(function(_0xCE22) {
                            if (_0xCE22.x > _0xDB38 && _0xCE22.x < _0xDB51) {
                                if (_0xCE22.tags[1] == _0xB90A[251]) {
                                    _0xD9DA.metalBrickCounter--;
                                    _0xD9DA.hardBrickArray.splice(_0xD9DA.hardBrickArray.indexOf(_0xCE22), 1)
                                };
                                _0xCE22.kill();
                                if (_0xD9DA.bricksGroup.countLiving() == 0) {
                                    _0xD9DA.events.throwEvent(_0xD9A8.WIN);
                                    _0xD9DA.events.removeEventListener(_0xB90A[29], _0xD9DA.handleUpdate);
                                    _0xD9DA.resetGame();
                                    _0xD9DA.ball.kill();
                                    _0xD9DA.player.kill();
                                    trace(_0xB90A[263])
                                }
                            }
                        })
                    };
                    Components.Tweens.create(_0xD9DA.gameObject, true).to({}, 7000, null, true).onComplete.addOnce(function() {
                        _0xD9DA.player.scale.x = 1;
                        _0xD9DA.newPlayerScale = 1;
                        _0xD9DA.maxSpeed = _0xD9DA.standardSpeed
                    })
                };
                _0xD9DA.handleRestart = function() {
                    _0xD9DA.resetGame();
                    _0xD9DA.ball.visible = true;
                    _0xD9DA.game_over = false
                };
                _0xD9DA.changeAspect = function() {
                    _0xD9DA.handleLimitBodiesPosition();
                    _0xD9DA.handleBricksBodyPosition();
                    _0xD9DA.handlePlayesBodyPosition();
                    _0xD9DA.handleBallBodyPosition()
                };
                _0xD9DA.handleGameOver = function() {
                    _0xD9DA.once = false;
                    if (_0xD9DA.once) {
                        trace(_0xB90A[264]);
                        _0xD9DA.events.throwEvent(Components.SessionData.SHOW_EXTRA_TIME_POPUP);
                        _0xD9DA.once = false
                    } else {
                        console.log(_0xB90A[265], "AICICICICICICICICICICICICICICICCI");
                        _0xD9DA.ball.body.velocity[_0xB90A[95]](0, 0);
                        _0xD9DA.game_over = true;
                        _0xD9DA.ball.visible = false;
                        Components.DevUtils.playSound(_0xB90A[266]);
                        _0xD9DA.events.throwEvent(Components.SessionData.SHOW_TRY_AGAIN_POPUP)
                    }
                };
                _0xD9DA.handlePlayesBodyPosition = function() {
                    _0xD9DA.player.scale.x = _0xD9DA.newPlayerScale;
                    var _0xDB6A = _0xD9DA.player.width * _0xD9DA.gameObject.scale.x / 2 - _0xD9DA.player.width / 2;
                    var _0xDB83 = _0xD9DA.player.height * _0xD9DA.gameObject.scale.y / 2 - _0xD9DA.player.height / 2;
                    _0xD9DA.player.body.setSize(_0xD9DA.player.width * _0xD9DA.gameObject.scale.x / _0xD9DA.player.scale.x, _0xD9DA.player.height * _0xD9DA.gameObject.scale.y, -_0xDB6A, -_0xDB83)
                };
                _0xD9DA.handleBallBodyPosition = function() {
                    _0xD9DA.ball.scale.x = _0xD9DA.newBallScaleX;
                    _0xD9DA.ball.scale.y = _0xD9DA.newBallScaleY;
                    var _0xDAED = (_0xD9DA.ball.width + _0xD9DA.ball.height) / 2 * _0xD9DA.gameObject.scale.x / 2 - _0xD9DA.ball.width / 2;
                    var _0xDB06 = (_0xD9DA.ball.width + _0xD9DA.ball.height) / 2 * _0xD9DA.gameObject.scale.y / 2 - _0xD9DA.ball.height / 2;
                    _0xD9DA.ball.body.setSize(_0xD9DA.ball.width * _0xD9DA.gameObject.scale.x / _0xD9DA.ball.scale.x, _0xD9DA.ball.height * _0xD9DA.gameObject.scale.y / _0xD9DA.ball.scale.y, -_0xDAED, -_0xDB06)
                };
                _0xD9DA.handleLimitBodiesPosition = function() {
                    _0xD9DA.gameObject.game.physics.arcade.bounds.resize(_0xD9DA.limitsMc.width * _0xD9DA.gameObject.scale.x, _0xD9DA.limitsMc.height * _0xD9DA.gameObject.scale.y);
                    _0xD9DA.gameObject.game.physics.arcade.bounds.x = _0xD9DA.gameObject.x - _0xD9DA.limitsMc.width * _0xD9DA.limitsMc.anchor.x * _0xD9DA.gameObject.scale.x;
                    _0xD9DA.gameObject.game.physics.arcade.bounds.y = _0xD9DA.gameObject.y - _0xD9DA.limitsMc.height * _0xD9DA.limitsMc.anchor.y * _0xD9DA.gameObject.scale.y
                };
                _0xD9DA.handleBricksBodyPosition = function() {
                    var _0xDB6A;
                    var _0xDB83;
                    _0xD9DA.bricksArray.forEach(function(_0xCE22) {
                        _0xDB6A = _0xCE22.width * _0xD9DA.gameObject.scale.x / 2 - _0xCE22.width / 2;
                        _0xDB83 = _0xCE22.height * _0xD9DA.gameObject.scale.y / 2 - _0xCE22.height / 2;
                        _0xCE22.body.setSize(_0xCE22.width * _0xD9DA.gameObject.scale.x, _0xCE22.height * _0xD9DA.gameObject.scale.y, -_0xDB6A, -_0xDB83)
                    })
                };
                _0xD9DA.handleUpdate = function() {
                    if (_0xD9DA.game_over) {
                        return
                    };
                    _0xD9DA.handlePlayesBodyPosition();
                    if (!_0xD9DA.ballDefaultPos) {
                        _0xD9DA.gameObject.game.physics.arcade.collide(_0xD9DA.ball, _0xD9DA.player, _0xD9DA.handlePaddleHit);
                        _0xD9DA.gameObject.game.physics.arcade.collide(_0xD9DA.ball, _0xD9DA.bricksGroup, _0xD9DA.handleBrickHit)
                    };
                    _0xD9DA.handlePlayerMove();
                    _0xD9DA.checkTheFloorIsLava()
                };
                _0xD9DA.checkTheFloorIsLava = function() {
                    if (_0xD9DA.ball.body.onFloor() && !_0xD9DA.ballDefaultPos) {
                        _0xD9DA.resetGame();
                        _0xD9DA.events.throwEvent(Components.SessionData.LOSE_LIFE)
                    }
                };
                _0xD9DA.handlePlayerMove = function() {
                    if (_0xD9DA.bricksGroup.countLiving() != 0 && !_0xD9DA.game_over) {
                        _0xD9DA.player.x = _0xD9DA.player.parent.toLocal(_0xD9DA.gameObject.game.input.position, _0xD9DA.gameObject.game.world).x;
                        if (_0xD9DA.player.x < _0xD9DA.limitsMc.x - _0xD9DA.limitsMc.width * _0xD9DA.limitsMc.anchor.x + _0xD9DA.player.width * _0xD9DA.player.anchor.x) {
                            _0xD9DA.player.x = _0xD9DA.limitsMc.x - _0xD9DA.limitsMc.width * _0xD9DA.limitsMc.anchor.x + _0xD9DA.player.width * _0xD9DA.player.anchor.x
                        };
                        if (_0xD9DA.player.x > _0xD9DA.limitsMc.x + _0xD9DA.limitsMc.width * _0xD9DA.limitsMc.anchor.x - _0xD9DA.player.width * _0xD9DA.player.anchor.x) {
                            _0xD9DA.player.x = _0xD9DA.limitsMc.x + _0xD9DA.limitsMc.width * _0xD9DA.limitsMc.anchor.x - _0xD9DA.player.width * _0xD9DA.player.anchor.x
                        };
                        if (_0xD9DA.ballDefaultPos) {
                            _0xD9DA.moveToDefaultPos()
                        }
                    }
                };
                _0xD9DA.startGame = function() {
                    if (_0xD9DA.ballDefaultPos && _0xD9DA.bricksGroup.countLiving() != 0 && !_0xD9DA.game_over) {
                        _0xD9DA.ballDefaultPos = false;
                        _0xD9DA.ball.body.velocity[_0xB90A[95]](Math.sign(Math.random() - 0.5) * _0xD9DA.maxSpeed, -_0xD9DA.maxSpeed)
                    }
                };
                _0xD9DA.handleBrickHit = function(_0xDB9C, _0xDBB5) {
                    if (!_0xD9DA.ballDefaultPos) {
                        if (_0xDBB5.tags[1] != _0xB90A[251]) {
                            var _0xDBCE = Components.DevUtils.getBounds(_0xDBB5);
                            _0xD9DA.ps.showParticleAt(_0xDBCE.centerX, _0xDBCE.centerY, Number(_0xDBB5.tags[1]) - 1, true)
                        };
                        if (_0xD9DA.hardBrickArray.indexOf(_0xDBB5) != -1) {
                            if (!_0xD9DA.brickHitArray[Number(_0xDBB5.tags[2])]) {
                                _0xD9DA.brickHitArray[Number(_0xDBB5.tags[2])] = 0
                            };
                            _0xD9DA.brickHitArray[Number(_0xDBB5.tags[2])] = _0xD9DA.brickHitArray[Number(_0xDBB5.tags[2])] + 1;
                            trace(_0xD9DA.brickHitArray, _0xB90A[267], _0xD9DA.hardBrickArray);
                            if (!_0xD9DA.ballDefaultPos && _0xD9DA.brickHitArray[Number(_0xDBB5.tags[2])] == 1) {
                                _0xDBB5.loadTexture(GameObject.getObject(_0xB90A[268]).texture);
                                _0xD9DA.hardBrickHitCounter++;
                                Components.DevUtils.playSound(_0xB90A[269])
                            };
                            if (!_0xD9DA.ballDefaultPos && _0xD9DA.brickHitArray[Number(_0xDBB5.tags[2])] == 2) {
                                _0xDBB5.loadTexture(GameObject.getObject(_0xB90A[270]).texture);
                                _0xD9DA.hardBrickHitCounter++;
                                Components.DevUtils.playSound(_0xB90A[269])
                            };
                            if (!_0xD9DA.ballDefaultPos && _0xD9DA.brickHitArray[Number(_0xDBB5.tags[2])] > 2) {
                                _0xD9DA.events.throwEvent(_0xD9A8.HIT, Util.Util.createEventData([
                                    [_0xB90A[62], _0xDBB5.position]
                                ]));
                                _0xDBB5.kill();
                                Components.DevUtils.playSound(_0xB90A[269])
                            }
                        } else {
                            if (_0xD9DA.metalBrickArray.indexOf(_0xDBB5) != -1) {
                                return
                            } else {
                                _0xD9DA.events.throwEvent(_0xD9A8.HIT, Util.Util.createEventData([
                                    [_0xB90A[62], _0xDBB5.position]
                                ]));
                                _0xDBB5.kill();
                                Components.DevUtils.playSound(_0xB90A[269])
                            }
                        };
                        trace(_0xD9DA.bricksGroup, _0xB90A[271]);
                        if (_0xD9DA.bricksGroup.countLiving() - _0xD9DA.metalBrickCounter == 0) {
                            _0xD9DA.events.throwEvent(_0xD9A8.WIN);
                            _0xD9DA.events.removeEventListener(_0xB90A[29], _0xD9DA.handleUpdate);
                            _0xD9DA.resetGame();
                            _0xD9DA.ball.kill();
                            _0xD9DA.player.kill()
                        }
                    }
                };
                _0xD9DA.showFinalPopUp = function() {
                    if (_0xD9DA.starCounter == 1 || _0xD9DA.starCounter == 0) {
                        _0xD9DA.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                            [Components.SessionData.STAR, Components.SessionData.THREE_STAR]
                        ]))
                    } else {
                        if (_0xD9DA.starCounter == 2) {
                            _0xD9DA.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                [Components.SessionData.STAR, Components.SessionData.TWO_STAR]
                            ]))
                        } else {
                            if (_0xD9DA.starCounter == 3) {
                                _0xD9DA.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                    [Components.SessionData.STAR, Components.SessionData.THREE_STAR]
                                ]))
                            }
                        }
                    }
                };
                _0xD9DA.lastSpeed = _0xC639(_0xB90A[43], 0, _0xB90A[44], 0);
                _0xD9DA.handlePaddleHit = function(_0xDC19, _0xDB9C) {
                    if (!_0xD9DA.ballDefaultPos) {
                        Components.DevUtils.playSound(_0xB90A[272]);
                        var _0xDBE7 = Math.abs(_0xD9DA.player.x - _0xD9DA.ball.x);
                        if (_0xDBE7 > _0xD9DA.player.width / 2 * 0.60) {
                            _0xDBE7 -= _0xD9DA.player.width / 2 * 0.60;
                            var _0xDC00 = Phaser.Math.linear(1, 1.2, _0xDBE7 / 20);
                            _0xD9DA.ball.body.velocity.x = Math.sign(_0xD9DA.ball.body.velocity.x) * _0xD9DA.maxSpeed * _0xDC00
                        } else {
                            _0xD9DA.ball.body.velocity.x = Math.sign(_0xD9DA.ball.body.velocity.x) * _0xD9DA.maxSpeed
                        };
                        _0xD9DA.ball.body.velocity.y = Math.sign(_0xD9DA.ball.body.velocity.y) * _0xD9DA.maxSpeed
                    }
                };
                _0xD9DA.moveToDefaultPos = function() {
                    _0xD9DA.player.scale.x = 1;
                    _0xD9DA.newPlayerScale = 1;
                    _0xD9DA.maxSpeed = _0xD9DA.standardSpeed;
                    _0xD9DA.ball.x = _0xD9DA.player.x;
                    _0xD9DA.ball.y = _0xD9DA.player.y - _0xD9DA.player.height * _0xD9DA.player.anchor.y - _0xD9DA.ball.height * _0xD9DA.ball.anchor.y;
                    _0xD9DA.ball.body.velocity[_0xB90A[95]](0)
                };
                _0xD9DA.resetGame = function() {
                    _0xD9DA.changeAspect();
                    _0xD9DA.ballDefaultPos = true;
                    _0xD9DA.moveToDefaultPos();
                    _0xD9DA.changeAspect()
                };
                _0xD9DA.handleBotttomHit = function(_0xCF35) {
                    trace(_0xCF35)
                };
                return _0xD9DA
            }
            _0xB987(_0xD9A8, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xDC32 = this;
                this.events.addEventListener(_0xB90A[28], function() {
                    if (Components.SessionData.UNLOCKED_LEVELS.length > 2) {
                        _0xDC32.events.throwEvent(_0xB90A[120])
                    }
                });
                this.initMc();
                this.addBricks();
                this.initMcProp();
                this.initLocalEvents();
                this.moveToDefaultPos();
                this.ball.alpha = 0;
                this.events.addEventListener(_0xB90A[273], function() {
                    _0xDC32.changeAspect();
                    _0xDC32.gameObject.game.time.events.add(20, _0xDC32.changeAspect, _0xDC32)
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                var _0xDC4B = this;
                this.events.addEventListener(Components.SessionData.SHOW_EXTRA_TIME_POPUP, function() {
                    _0xDC4B.gameObject.game.input.onDown.remove(_0xDC4B.startGame);
                    _0xDC4B.events.removeEventListener(_0xB90A[29], _0xDC4B.handleUpdate)
                });
                this.events.addEventListener(_0xB90A[274], function() {
                    _0xDC4B.gameObject.game.input.onDown.add(_0xDC4B.startGame);
                    _0xDC4B.events.addEventListener(_0xB90A[29], _0xDC4B.handleUpdate)
                });
                this.gameObject.game.time.events.add(210, function() {
                    _0xDC4B.gameObject.game.input.onDown.add(_0xDC4B.startGame);
                    _0xDC4B.events.addEventListener(_0xB90A[29], _0xDC4B.handleUpdate);
                    _0xDC4B.ball.alpha = 1
                }, this);
                this.gameObject.game.time.events.add(200, this.changeAspect);
                if (Components.DevUtils.getCurrentUnitName() == _0xB90A[246] && Components.DevUtils.getUnitStartTimes(_0xB90A[246]) == 1) {
                    this.gameObject.game.input.onDown.remove(this.startGame);
                    this.events.removeEventListener(_0xB90A[29], this.handleUpdate);
                    this.events.addEventListener(_0xB90A[121], function() {
                        _0xDC4B.gameObject.game.input.onDown.add(_0xDC4B.startGame);
                        _0xDC4B.events.addEventListener(_0xB90A[29], _0xDC4B.handleUpdate)
                    })
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.input.onDown.remove(this.startGame);
                _get(_getPrototypeOf(_0xD9A8.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0xD9A8
        }(Scene.Component);
        _0xD9A8.LIFE_LOST = _0xB90A[275];
        _0xD9A8.WIN = _0xB90A[276];
        _0xD9A8.RESTART = _0xB90A[277];
        _0xD9A8.HIT = _0xB90A[278];
        Components.BricksComponent = _0xD9A8
    }

    function _0xBB62(Components) {
        var _0xDC64 = function(_0xDC7D) {
            _0xBA1D(_0xDC64, _0xDC7D);

            function _0xDC64() {
                var _0xDC96;
                _0xB955(this, _0xDC64);
                _0xDC96 = _0xB9A0(this, _getPrototypeOf(_0xDC64).apply(this, arguments));
                _0xDC96.modifierTag = _0xB90A[279];
                _0xDC96.probability = 20;
                _0xDC96.modiferMap = new Map();
                _0xDC96.modifiersGroup = [];
                _0xDC96.initMc = function() {
                    _0xDC96.modifiers = GameObject.getObjectsByTag(_0xDC96.modifierTag, true);
                    _0xDC96.player = GameObject.getObject(_0xB90A[245]);
                    _0xDC96.mapModifiers()
                };
                _0xDC96.initLocalEvents = function() {
                    _0xDC96.events.addEventListener(Components.BricksComponent.HIT, _0xDC96.handleModifier);
                    _0xDC96.events.addEventListener(_0xB90A[29], _0xDC96.hanldeUpdate);
                    _0xDC96.events.addEventListener(_0xB90A[280], _0xDC96.changeAspect);
                    _0xDC96.events.addEventListener(Components.BricksComponent.WIN, _0xDC96.killAll)
                };
                _0xDC96.killAll = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xDC96.modifiersGroup.length; _0xC6E8++) {
                        var _0xCE22 = _0xDC96.modifiersGroup[_0xC6E8];
                        if (_0xCE22 && _0xCE22.alive) {
                            _0xCE22.kill();
                            _0xDC96.modifiersGroup.splice(_0xDC96.modifiersGroup.indexOf(_0xCE22), 1);
                            _0xC6E8--
                        }
                    }
                };
                _0xDC96.changeAspect = function() {
                    var _0xDB6A;
                    var _0xDB83;
                    var _0xD79B = _0xDC96.gameObject.parent.parent.scale;
                    _0xDC96.modifiersGroup.forEach(function(_0xCE22) {
                        _0xDB6A = _0xCE22.width * _0xD79B.x / 2 - _0xCE22.width / 2;
                        _0xDB83 = _0xCE22.height * _0xD79B.y / 2 - _0xCE22.height / 2;
                        _0xCE22.body.setSize(_0xCE22.width * _0xD79B.x, _0xCE22.height * _0xD79B.y, -_0xDB6A, -_0xDB83)
                    })
                };
                _0xDC96.mapModifiers = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xDC96.modifiers.length; _0xC6E8++) {
                        var _0xCE22 = _0xDC96.modifiers[_0xC6E8];
                        _0xCE22.visible = false;
                        _0xDC96.modiferMap[_0xB90A[95]](_0xCE22.tags[0] + _0xB90A[61] + _0xCE22.tags[1], [_0xCE22.tags[2], Number(_0xCE22.tags[3])])
                    }
                };
                _0xDC96.hanldeUpdate = function() {
                    var _0xDCAF = function _0xDCAF(_0xDCC8) {
                        var _0xCE22 = _0xDC96.modifiersGroup[_0xDCC8];
                        if (_0xCE22 && _0xCE22.y > _0xDC96.player.y && _0xCE22.alive) {
                            _0xCE22.kill();
                            _0xDC96.modifiersGroup.splice(_0xDC96.modifiersGroup.indexOf(_0xCE22), 1);
                            _0xDCC8--
                        };
                        _0xDC96.gameObject.game.physics.arcade.collide(_0xCE22, _0xDC96.player, function() {
                            Components.DevUtils.playSound(_0xB90A[281]);
                            _0xCE22.kill();
                            var _0xCD8C = _0xDC96.modiferMap[_0xB90A[8]](_0xCE22.name);
                            _0xDC96.events.throwEvent(_0xDC64.MODIFY, Util.Util.createEventData([
                                [_0xB90A[62], _0xCD8C]
                            ]))
                        });
                        _0xC6E8 = _0xDCC8
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xDC96.modifiersGroup.length; _0xC6E8++) {
                        _0xDCAF(_0xC6E8)
                    }
                };
                _0xDC96.handleModifier = function(_0xCF35) {
                    var _0xDD2C = _0xCF35.getData(_0xB90A[62]);
                    trace(_0xDD2C, _0xDC96.gameObject.parent.name, _0xB90A[282]);
                    if (Math.random() <= _0xDC96.probability / 100) {
                        var _0xDCE1 = _0xDC96.modifiers[Math.floor(Math.random() * _0xDC96.modifiers.length)];
                        var _0xDCFA = _0xDCE1.tags[0] + _0xB90A[61] + _0xDCE1.tags[1];
                        var _0xDD13 = new GameObject(_0xDC96.gameObject.game, _0xDCFA);
                        _0xDD13.loadTexture(_0xDCE1.texture);
                        _0xDC96.gameObject.addChild(_0xDD13);
                        _0xDC96.modifiersGroup.push(_0xDD13);
                        _0xDD13.anchor[_0xB90A[95]](0.5, 0.5);
                        _0xDD13.position = _0xDD2C;
                        _0xDC96.gameObject.game.physics.enable(_0xDD13, Phaser.Physics.ARCADE);
                        _0xDD13.body.enableBody = true;
                        _0xDD13.body.gravity.y = 100
                    }
                };
                return _0xDC96
            }
            _0xB987(_0xDC64, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                this.events.addEventListener(Scene.Unit.DEBUG, function() {})
            })]);
            return _0xDC64
        }(Scene.Component);
        _0xDC64.SIZE = _0xB90A[255];
        _0xDC64.SPEED = _0xB90A[256];
        _0xDC64.MODIFY = _0xB90A[256];
        Components.BricksModifier = _0xDC64
    }

    function _0xBB7B(Components) {
        var _0xDD45 = function(_0xDD5E) {
            _0xBA1D(_0xDD45, _0xDD5E);

            function _0xDD45() {
                var _0xDF20;
                _0xB955(this, _0xDD45);
                _0xDF20 = _0xB9A0(this, _getPrototypeOf(_0xDD45).apply(this, arguments));
                _0xDF20.stepsMs = 8;
                _0xDF20.stepS = 8 / 1000;
                _0xDF20.velocity = new PIXI.Point(0, 0);
                _0xDF20.lastTime = 0;
                _0xDF20.collisionTargets = [];
                _0xDF20.timeDiff = 0;
                _0xDF20.isWhiteBall = false;
                _0xDF20.isRainbow = false;
                _0xDF20.isBricks = false;
                _0xDF20.Update = function(_0xCBFC) {
                    if (_0xCBFC - _0xDF20.lastTime > 1000) {
                        _0xDF20.lastTime = _0xCBFC
                    };
                    if (_0xDF20.velocity.x != 0 && _0xDF20.velocity.y != 0) {
                        _0xDF20.timeDiff += _0xCBFC - _0xDF20.lastTime;
                        while (_0xDF20.timeDiff >= _0xDF20.stepsMs) {
                            _0xDF20.timeDiff -= _0xDF20.stepsMs;
                            _0xDF20.lastPosition[_0xB90A[95]](_0xDF20.gameObject.x, _0xDF20.gameObject.y);
                            _0xDF20.gameObject.x += _0xDF20.velocity.x * _0xDF20.stepS;
                            _0xDF20.gameObject.y += _0xDF20.velocity.y * _0xDF20.stepS;
                            for (var _0xDF39 = _0xDF20.collisionTargets.length - 1; _0xDF39 >= 0; _0xDF39--) {
                                var _0xC71A = _0xDF20.collisionTargets[_0xDF39];
                                if (_0xDF20.checkCollisionCircle(_0xC71A)) {
                                    _0xDF20.onBubbleCollisionCallback(_0xB9B9(_0xDF20), _0xC71A);
                                    Components.DevUtils.playSound(_0xB90A[283]);
                                    return
                                }
                            };
                            if (_0xDF20.checkCollisionBounds(_0xDF20.rectBounds)) {
                                var _0xDF52 = _0xDF20.gameObject.x > _0xDF20.rectBounds.centerX ? _0xDF20.rectBounds.right - _0xDF20.radius : _0xDF20.rectBounds.left + _0xDF20.radius;
                                var _0xDF84 = (_0xDF52 - _0xDF20.lastPosition.x) / (_0xDF20.gameObject.x - _0xDF20.lastPosition.x);
                                var _0xDF9D = 1 - _0xDF84;
                                _0xDF20.velocity.x *= -1;
                                _0xDF20.gameObject.x += _0xDF20.velocity.x * _0xDF20.stepS * _0xDF9D;
                                _0xDF20.gameObject.y += _0xDF20.velocity.y * _0xDF20.stepS * _0xDF9D;
                                _0xDF20.gameObject.scale[_0xB90A[95]](_0xDF20.originalScale.y - _0xDF20.originalScale.x / 4, _0xDF20.originalScale.y);
                                Components.Tweens.create(_0xDF20.gameObject.scale).to(_0xC639(_0xB90A[43], _0xDF20.originalScale.x), 200, null, true)
                            };
                            if (_0xDF20.checkCollisionSides(_0xDF20.rectBounds)) {
                                var _0xDF6B = _0xDF20.gameObject.y > _0xDF20.rectBounds.centerY ? _0xDF20.rectBounds.bottom - _0xDF20.radius : _0xDF20.rectBounds.top + _0xDF20.radius;
                                var _0xDF84 = (_0xDF6B - _0xDF20.lastPosition.y) / (_0xDF20.gameObject.y - _0xDF20.lastPosition.y);
                                var _0xDF9D = 1 - _0xDF84;
                                _0xDF20.velocity.y *= -1;
                                _0xDF20.gameObject.x += _0xDF20.velocity.x * _0xDF20.stepS * _0xDF9D;
                                _0xDF20.gameObject.y += _0xDF20.velocity.y * _0xDF20.stepS * _0xDF9D;
                                _0xDF20.gameObject.scale[_0xB90A[95]](_0xDF20.originalScale.x, _0xDF20.originalScale.x - _0xDF20.originalScale.x / 4);
                                Components.Tweens.create(_0xDF20.gameObject.scale).to(_0xC639(_0xB90A[44], _0xDF20.originalScale.y), 200, null, true);
                                Components.DevUtils.playSound(_0xB90A[283]);
                                if (_0xDF20.onBoundsCollisionCallback) {
                                    _0xDF20.onBoundsCollisionCallback(_0xB9B9(_0xDF20), null);
                                    return
                                }
                            }
                        };
                        _0xDF20.lastTime = _0xCBFC
                    }
                };
                return _0xDF20
            }
            _0xB987(_0xDD45, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.whiteBallPrefab = GameObject.getObject(_0xB90A[284])
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.calculateBounds()
            }), _0xC639(_0xB90A[13], _0xB90A[285], _0xB90A[5], function _0xDDC2() {
                this.radius = this.gameObject.unscaledWidth / 2 * this.gameObject.scale.x;
                this.originalScale = new PIXI.Point(this.gameObject.scale.x, this.gameObject.scale.y)
            }), _0xC639(_0xB90A[13], _0xB90A[286], _0xB90A[5], function _0xDDA9() {
                this.whiteBall = new GameObject(this.gameObject.game, this.gameObject.name + _0xB90A[287]);
                this.whiteBall.loadTexture(this.whiteBallPrefab.texture);
                this.gameObject.addChild(this.whiteBall);
                this.whiteBall.anchor[_0xB90A[95]](this.gameObject.anchor.x, this.gameObject.anchor.y);
                this.whiteBall.position[_0xB90A[95]](0, 0);
                this.isWhiteBall = true
            }), _0xC639(_0xB90A[13], _0xB90A[288], _0xB90A[5], function _0xDD77() {
                var _0xDED5 = GameObject.getObject(_0xB90A[289]);
                var _0xDEBC = new GameObject(this.gameObject.game, this.gameObject.name + _0xB90A[290]);
                _0xDEBC.loadTexture(_0xDED5.texture);
                this.gameObject.addChild(_0xDEBC);
                _0xDEBC.anchor[_0xB90A[95]](this.gameObject.anchor.x, this.gameObject.anchor.y);
                _0xDEBC.position[_0xB90A[95]](0, 0);
                this.isBricks = true
            }), _0xC639(_0xB90A[13], _0xB90A[291], _0xB90A[5], function _0xDD90() {
                var _0xDF07 = GameObject.getObject(_0xB90A[292]);
                var _0xDEEE = new GameObject(this.gameObject.game, this.gameObject.name + _0xB90A[290]);
                _0xDEEE.loadTexture(_0xDF07.texture);
                this.gameObject.addChild(_0xDEEE);
                _0xDEEE.anchor[_0xB90A[95]](this.gameObject.anchor.x, this.gameObject.anchor.y);
                _0xDEEE.position[_0xB90A[95]](0, 0);
                this.isRainbow = true
            }), _0xC639(_0xB90A[13], _0xB90A[293], _0xB90A[5], function _0xDE3F() {
                Components.Tweens.create(this.whiteBall).to(_0xC639(_0xB90A[45], 0.3), 1300, Phaser.Easing.Sinusoidal.InOut, true, 200, 0, true)
            }), _0xC639(_0xB90A[13], _0xB90A[294], _0xB90A[5], function _0xDE26() {
                if (!this.isWhiteBall) {
                    return
                };
                this.isWhiteBall = false;
                Components.Tweens.create(this.whiteBall, true).to(_0xC639(_0xB90A[45], 0), 200, null, true)
            }), _0xC639(_0xB90A[13], _0xB90A[295], _0xB90A[5], function _0xDEA3(_0xE033, _0xDFB6) {
                this.calculateBounds();
                this.setBounds(_0xDFB6);
                this.setVelocity(_0xE033.x, _0xE033.y);
                this.lastPosition = new Phaser.Point(this.gameObject.x, this.gameObject.y)
            }), _0xC639(_0xB90A[13], _0xB90A[296], _0xB90A[5], function _0xDE71(_0xE001, _0xE01A) {
                this.collisionTargets = _0xE001;
                this.onBubbleCollisionCallback = _0xE01A
            }), _0xC639(_0xB90A[13], _0xB90A[297], _0xB90A[5], function _0xDE58(_0xDFB6) {
                this.rectBounds = _0xDFB6
            }), _0xC639(_0xB90A[13], _0xB90A[298], _0xB90A[5], function _0xDE8A(_0xD6A1, _0xD6BA) {
                this.velocity.x = _0xD6A1;
                this.velocity.y = _0xD6BA
            }), _0xC639(_0xB90A[13], _0xB90A[299], _0xB90A[5], function _0xDDF4(_0xDFE8) {
                var _0xDFCF = this.gameObject.position.distance(_0xDFE8.gameObject.position);
                return _0xDFCF <= this.radius * 0.9 + _0xDFE8.radius * 0.9
            }), _0xC639(_0xB90A[13], _0xB90A[300], _0xB90A[5], function _0xDDDB(_0xDFB6) {
                if (_0xDFB6.right - this.radius <= this.gameObject.x) {
                    return true
                };
                if (_0xDFB6.left + this.radius >= this.gameObject.x) {
                    return true
                };
                return false
            }), _0xC639(_0xB90A[13], _0xB90A[301], _0xB90A[5], function _0xDE0D(_0xDFB6) {
                if (_0xDFB6.bottom - this.radius * 0.9 <= this.gameObject.y) {
                    return true
                };
                if (_0xDFB6.top + this.radius * 0.9 >= this.gameObject.y) {
                    return true
                };
                return false
            })]);
            return _0xDD45
        }(Scene.Component);
        Components.BubbleBall = _0xDD45
    }

    function _0xBB94(Components) {
        var _0xE04C = function(_0xE097) {
            _0xBA1D(_0xE04C, _0xE097);

            function _0xE04C() {
                var _0xE259;
                _0xB955(this, _0xE04C);
                _0xE259 = _0xB9A0(this, _getPrototypeOf(_0xE04C).apply(this, arguments));
                _0xE259.dataMap = new Map();
                _0xE259.pairMap = new Map();
                _0xE259.width = 30;
                _0xE259.height = 24;
                _0xE259.filledRows = 12;
                _0xE259.ballScale = 0.25;
                _0xE259.maxBalls = 1280;
                _0xE259.whiteBallRows = 7;
                _0xE259.bubblesToBreak = 10;
                _0xE259.extraRowsToGenerate = 100;
                _0xE259.brokenBubbles = 0;
                _0xE259.size = 0;
                _0xE259.spacing = 2;
                _0xE259.bubbleBalls = [];
                _0xE259.activeBubbleCount = 0;
                _0xE259.allBubbles = [];
                _0xE259.updatingBubbles = [];
                _0xE259.remainingColorMap = new Map();
                _0xE259.disableInput = false;
                _0xE259.xheckStatusAfterLastBubble = false;
                _0xE259.once = true;
                _0xE259.generateNewRow = function() {
                    if (_0xE259.extraRowsToGenerate <= 0) {
                        return
                    };
                    _0xE259.extraRowsToGenerate--;
                    for (var _0xE272 = _0xE259.matrix.height - 1; _0xE272 >= 0; _0xE272--) {
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xE259.matrix.width; _0xC9D6++) {
                            if (_0xE272 == _0xE259.matrix.height - 1 && _0xE259.pairMap.has(_0xE259.matrix[_0xB90A[8]](_0xC9D6, _0xE272))) {
                                trace(_0xB90A[302]);
                                return
                            };
                            if (_0xE259.pairMap.has(_0xE259.matrix[_0xB90A[8]](_0xC9D6, _0xE272))) {
                                var _0xE2BD = _0xE259.matrix[_0xB90A[8]](_0xC9D6, _0xE272);
                                _0xE259.matrix.add(_0xC9D6, _0xE272, new _0xE07E(_0xC9D6, _0xE272, -1));
                                var _0xCC47 = _0xE259.pairMap[_0xB90A[8]](_0xE2BD);
                                var _0xE2A4 = _0xE259.gridToWorldPosition(_0xCC47, _0xC9D6, _0xE272 + 1);
                                Components.Tweens.create(_0xCC47).to(_0xC639(_0xB90A[43], _0xE2A4.x, _0xB90A[44], _0xE2A4.y), 200, null, true);
                                _0xE259.matrix.add(_0xC9D6, _0xE272 + 1, _0xE2BD);
                                _0xE2BD.y = _0xE272 + 1
                            }
                        }
                    };
                    for (var _0xE28B = 0; _0xE28B < _0xE259.matrix.width; _0xE28B++) {
                        var _0xE2D6 = true;
                        if (_0xE28B == 0 && !_0xE259.pairMap[_0xB90A[8]](_0xE259.matrix[_0xB90A[8]](0, 1)).getComponent(Components.BubbleBall).isWhiteBall) {
                            _0xE2D6 = false
                        } else {
                            if (_0xE28B != 0 && !_0xE259.pairMap[_0xB90A[8]](_0xE259.matrix[_0xB90A[8]](_0xE28B, 1)).getComponent(Components.BubbleBall).isWhiteBall && !_0xE259.pairMap[_0xB90A[8]](_0xE259.matrix[_0xB90A[8]](_0xE28B - 1, 1)).getComponent(Components.BubbleBall).isWhiteBall) {
                                _0xE2D6 = false
                            }
                        };
                        var _0xCE22 = _0xE259.generateBall(0, _0xE28B, _0xE2D6, false, true);
                        _0xCE22.scale[_0xB90A[95]](0, 0);
                        Components.Tweens.create(_0xCE22.scale).to(_0xC639(_0xB90A[43], _0xE259.ballScale, _0xB90A[44], _0xE259.ballScale), 200, null, true, 50)
                    };
                    _0xE259.gameObject.game.time.events.add(10000, _0xE259.generateNewRow, _0xB9B9(_0xE259));
                    _0xE259.gameObject.game.time.events.add(300, function() {
                        _0xE259.checkHangingBubbles()
                    }, _0xB9B9(_0xE259))
                };
                _0xE259.revealWhite = function() {
                    for (var _0xE2EF = 0; _0xE2EF < _0xE259.matrix.height; _0xE2EF++) {
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xE259.matrix.height; _0xC9D6++) {
                            if (_0xE259.pairMap.has(_0xE259.matrix[_0xB90A[8]](_0xC9D6, _0xE2EF)) && Math.random() > 0.9 && _0xE259.pairMap[_0xB90A[8]](_0xE259.matrix[_0xB90A[8]](_0xC9D6, _0xE2EF)).getComponent(Components.BubbleBall).isWhiteBall) {
                                _0xE259.pairMap[_0xB90A[8]](_0xE259.matrix[_0xB90A[8]](_0xC9D6, _0xE2EF)).getComponent(Components.BubbleBall).flashWhite()
                            }
                        }
                    };
                    _0xE259.gameObject.game.time.events.add(15000, _0xE259.revealWhite, _0xB9B9(_0xE259))
                };
                _0xE259.onUpdate = function() {
                    var _0xCBFC = Date.now();
                    for (var _0xE308 = 0; _0xE308 < _0xE259.updatingBubbles.length; _0xE308++) {
                        var _0xE321 = _0xE259.updatingBubbles[_0xE308];
                        _0xE321.Update(_0xCBFC)
                    };
                    if (_0xE259.disableInput) {
                        return
                    };
                    if (_0xE259.activeBubble && _0xE259.updatingBubbles.indexOf(_0xE259.activeBubble.getComponent(Components.BubbleBall)) == -1) {
                        var _0xE36C = new Phaser.Point(_0xE259.gameObject.game.input.x, _0xE259.gameObject.game.input.y);
                        var _0xE33A = Components.DevUtils.getBounds(_0xE259.bubbleCircle);
                        _0xE33A.height = _0xE33A.width;
                        var _0xDFCF = _0xE36C.subtract(_0xE33A.centerX, _0xE33A.centerY);
                        _0xDFCF.normalize();
                        if (_0xDFCF.y > -0.1) {
                            _0xDFCF.y = -0.1;
                            _0xDFCF.x = Math.sign(_0xDFCF.x) * Math.sqrt(1 - _0xDFCF.y * _0xDFCF.y)
                        };
                        _0xE259.direction = _0xDFCF.clone();
                        _0xDFCF.multiply(_0xE33A.width / 2 - 15, _0xE33A.height / 2 - 15);
                        _0xDFCF.add(_0xE33A.centerX, _0xE33A.centerY);
                        var _0xE353 = _0xE259.activeBubble.parent.toLocal(_0xDFCF, _0xE259.gameObject.game.world);
                        _0xE259.activeBubble.position.x = _0xE353.x;
                        _0xE259.activeBubble.position.y = _0xE353.y;
                        _0xE259.aimContainer.position.x = _0xE353.x;
                        _0xE259.aimContainer.position.y = _0xE353.y
                    };
                    _0xE259.updateTrace()
                };
                _0xE259.traces = [];
                _0xE259.unusedTraces = [];
                _0xE259.swapBubbles = function() {
                    var _0xC85F = _0xE259.nextBubble.position.clone();
                    Components.Tweens.create(_0xE259.nextBubble).to(_0xC639(_0xB90A[43], _0xE259.activeBubble.x, _0xB90A[44], _0xE259.activeBubble.y), 200, null, true);
                    Components.Tweens.create(_0xE259.activeBubble).to(_0xC639(_0xB90A[43], _0xC85F.x, _0xB90A[44], _0xC85F.y), 200, null, true);
                    var _0xD223 = _0xE259.activeBubble;
                    _0xE259.activeBubble = _0xE259.nextBubble;
                    _0xE259.nextBubble = _0xD223;
                    Components.DevUtils.disableInputFor(_0xE259.swapButton, 200)
                };
                _0xE259.generateMatrix = function() {
                    _0xE259.originalContainerBounds = Components.DevUtils.getBounds(_0xE259.holder);
                    _0xE259.size = _0xE259.bubbles[0].unscaledWidth / Math.sqrt(3) * _0xE259.ballScale;
                    _0xE259.ballRadius = _0xE259.bubbles[0].unscaledWidth / 2 * _0xE259.ballScale;
                    for (var _0xE385 = 0; _0xE385 < _0xE259.filledRows; _0xE385++) {
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xE259.width; _0xC9D6++) {
                            var _0xE39E = _0xE385 == 0 && _0xC9D6 == ~~(_0xE259.width / 2);
                            var _0xE3B7 = _0xE385 < _0xE259.whiteBallRows;
                            if (Components.DevUtils.getCurrentUnitName() == _0xB90A[303] || Components.DevUtils.getCurrentUnitName() == _0xB90A[304] || Components.DevUtils.getCurrentUnitName() == _0xB90A[305]) {
                                _0xE259.generateBall(_0xE385, _0xC9D6, _0xE3B7, false)
                            } else {
                                _0xE259.generateBall(_0xE385, _0xC9D6, _0xE3B7, _0xE39E)
                            }
                        }
                    }
                };
                _0xE259.lastAimIndex = 0;
                _0xE259.onTopCollision = function(_0xDB9C, _0xDFB6) {
                    var _0xE3E9 = new PIXI.Point(_0xE259.size / 2 - _0xE259.holder.unscaledWidth * _0xE259.holder.anchor.x - 4, 10 + _0xE259.size / 2 - _0xE259.holder.unscaledHeight * _0xE259.holder.anchor.y);
                    var _0xC85F = new PIXI.Point(_0xDB9C.gameObject.x);
                    var _0xE3D0 = 0;
                    for (var _0xC9D6 = 0; _0xC9D6 < _0xE259.width; _0xC9D6++) {
                        var _0xD6A1 = _0xE3E9.x + _0xC9D6 * (_0xE259.bubbles[0].unscaledWidth * _0xE259.ballScale + _0xE259.spacing) + _0xE259.ballRadius;
                        if (_0xD6A1 < _0xC85F.x) {
                            _0xE3D0 = _0xC9D6
                        } else {
                            break
                        }
                    };
                    var _0xE402 = _0xE3E9.x + _0xE3D0 * (_0xE259.bubbles[0].unscaledWidth * _0xE259.ballScale + _0xE259.spacing) + _0xE259.ballRadius;
                    var _0xE41B = _0xE3E9.x + (_0xE3D0 + 1) * (_0xE259.bubbles[0].unscaledWidth * _0xE259.ballScale + _0xE259.spacing) + _0xE259.ballRadius;
                    if (_0xC85F.x - _0xE402 > _0xE41B - _0xC85F.x) {
                        _0xE3D0++
                    };
                    _0xDB9C.setVelocity(0, 0);
                    _0xE259.updatingBubbles.splice(_0xE259.updatingBubbles.indexOf(_0xDB9C), 1);
                    _0xE259.allBubbles.push(_0xDB9C);
                    var _0xD255 = Number(_0xDB9C.gameObject.tags[2]);
                    if (_0xE259.remainingColorMap.has(_0xD255)) {
                        _0xE259.remainingColorMap[_0xB90A[95]](_0xD255, _0xE259.remainingColorMap[_0xB90A[8]](_0xD255) + 1)
                    };
                    var _0xE2BD = new _0xE07E(_0xE3D0, 0, _0xD255);
                    if (_0xE2BD.x >= _0xE259.width) {
                        _0xE2BD.x = _0xE259.width - 1
                    };
                    if (_0xE259.matrix[_0xB90A[8]](_0xE2BD.x, 0).val != -1) {
                        if (_0xE2BD.x + 1 < _0xE259.width && _0xE259.matrix[_0xB90A[8]](_0xE2BD.x + 1, 0).val == -1) {
                            _0xE2BD.x++
                        } else {
                            _0xE2BD.x--
                        }
                    };
                    if (_0xDB9C.isRainbow) {
                        Components.Tweens.create(_0xDB9C.gameObject).to(_0xC639(_0xB90A[45], 0), 200, null, true, 100).onComplete.addOnce(function() {
                            _0xE259.allBubbles.splice(_0xE259.allBubbles.indexOf(_0xDB9C), 1)
                        })
                    } else {
                        _0xE259.dataMap[_0xB90A[95]](_0xDB9C.gameObject, _0xE2BD);
                        _0xE259.pairMap[_0xB90A[95]](_0xE2BD, _0xDB9C.gameObject);
                        _0xE259.matrix.add(_0xE2BD.x, _0xE2BD.y, _0xE2BD)
                    };
                    var _0xE2A4 = _0xE259.gridToWorldPosition(_0xDB9C.gameObject, _0xE2BD.x, _0xE2BD.y);
                    if (!_0xDB9C.isRainbow) {
                        _0xE259.breakMatchingBubbles(_0xE2BD, null)
                    };
                    Components.Tweens.create(_0xDB9C.gameObject).to(_0xC639(_0xB90A[43], _0xE2A4.x, _0xB90A[44], _0xE2A4.y), 100, null, true);
                    if (_0xE259.allBubbles.length != 0 && _0xE259.maxBalls < 0) {
                        trace(_0xB90A[306]);
                        _0xE259.events.throwEvent(_0xE04C.BUBBLESHOOTER_LOSE);
                        _0xE259.disableInput = true;
                        if (_0xE259.once) {
                            _0xE259.events.throwEvent(_0xB90A[307]);
                            _0xE259.once = false
                        } else {
                            Components.DevUtils.playSound(_0xB90A[266]);
                            _0xE259.events.throwEvent(Components.SessionData.SHOW_TRY_AGAIN_POPUP)
                        }
                    }
                };
                _0xE259.onShootBubble = function() {
                    if (_0xE259.disableInput) {
                        return
                    };
                    var _0xE466 = GameObject.getObject(_0xB90A[308]);
                    var _0xDFB6 = new Phaser.Rectangle(-_0xE466.anchor.x * _0xE466.unscaledWidth, -_0xE466.anchor.y * _0xE466.unscaledHeight, _0xE466.unscaledWidth, _0xE466.unscaledHeight);
                    var _0xE44D = Components.DevUtils.getBounds(_0xE259.activeBubble);
                    var _0xE033 = new Phaser.Point(_0xE259.gameObject.game.input.x - _0xE44D.centerX, _0xE259.gameObject.game.input.y - _0xE44D.centerY);
                    var _0xE033 = _0xE259.direction.clone();
                    _0xE033.multiply(900, 900);
                    var _0xE434 = _0xE259.activeBubble.getComponent(Components.BubbleBall);
                    _0xE434.shootBubble(_0xE033, _0xDFB6);
                    _0xE434.setCollisionTargets(_0xE259.allBubbles, _0xE259.onBubbleColision);
                    _0xE259.updatingBubbles.push(_0xE434);
                    _0xE259.generateBubble();
                    Components.DevUtils.playSound(_0xB90A[309])
                };
                _0xE259.onBubbleColision = function(_0xE47F, _0xE4CA) {
                    _0xE47F.setVelocity(0, 0);
                    _0xE259.updatingBubbles.splice(_0xE259.updatingBubbles.indexOf(_0xE47F), 1);
                    _0xE259.allBubbles.push(_0xE47F);
                    var _0xD255 = Number(_0xE47F.gameObject.tags[2]);
                    if (_0xE259.remainingColorMap.has(_0xD255)) {
                        _0xE259.remainingColorMap[_0xB90A[95]](_0xD255, _0xE259.remainingColorMap[_0xB90A[8]](_0xD255) + 1)
                    };
                    var _0xE2BD = _0xE259.dataMap[_0xB90A[8]](_0xE4CA.gameObject);
                    _0xE2BD = new _0xE07E(_0xE2BD.x, _0xE2BD.y);
                    var _0xE4B1 = _0xE2BD.y;
                    if (_0xE47F.gameObject.y > _0xE4CA.gameObject.y + _0xE259.ballRadius / 2) {
                        _0xE2BD.y++
                    } else {
                        if (_0xE47F.gameObject.y < _0xE4CA.gameObject.y - _0xE259.ballRadius) {
                            _0xE2BD.y--
                        }
                    };
                    if (_0xE4B1 != _0xE2BD.y && _0xE2BD.y % 2 == 1 && _0xE47F.gameObject.position.x < _0xE4CA.gameObject.position.x) {
                        _0xE2BD.x--
                    };
                    if (_0xE4B1 != _0xE2BD.y && _0xE2BD.y % 2 == 0 && _0xE47F.gameObject.position.x > _0xE4CA.gameObject.position.x) {
                        _0xE2BD.x++
                    };
                    if (_0xE4B1 == _0xE2BD.y) {
                        if (_0xE47F.gameObject.position.x < _0xE4CA.gameObject.position.x) {
                            _0xE2BD.x--
                        } else {
                            if (_0xE47F.gameObject.position.x > _0xE4CA.gameObject.position.x) {
                                _0xE2BD.x++
                            }
                        }
                    };
                    var _0xE498 = new _0xE07E(_0xE2BD.x, _0xE2BD.y, Number(_0xE47F.gameObject.tags[2]));
                    if (_0xE498.y > _0xE259.matrix.height - 1) {
                        trace(_0xB90A[310]);
                        _0xE259.events.throwEvent(_0xE04C.BUBBLESHOOTER_LOSE);
                        if (_0xE259.once) {
                            _0xE259.events.throwEvent(_0xB90A[307]);
                            _0xE259.once = false
                        } else {
                            Components.DevUtils.playSound(_0xB90A[266]);
                            _0xE259.events.throwEvent(Components.SessionData.SHOW_TRY_AGAIN_POPUP)
                        };
                        _0xE259.disableInput = true;
                        var _0xE227 = _0xE259.allBubbles.indexOf(_0xE47F);
                        if (_0xE227 != -1) {
                            _0xE259.allBubbles.splice(_0xE227, 1)
                        };
                        if (_0xE259.remainingColorMap.has(_0xD255)) {
                            _0xE259.remainingColorMap[_0xB90A[95]](_0xD255, _0xE259.remainingColorMap[_0xB90A[8]](_0xD255) - 1)
                        };
                        _0xE47F.gameObject.visible = false;
                        return
                    };
                    if (_0xE498.x < 0) {
                        _0xE498.x = 0
                    };
                    if (_0xE498.x >= _0xE259.matrix.width) {
                        _0xE498.x = _0xE259.matrix.width - 1
                    };
                    if (_0xE498.y < 0) {
                        _0xE498.y = 0
                    };
                    if (_0xE259.matrix[_0xB90A[8]](_0xE498.x, _0xE498.y).val != -1) {
                        var _0xC66B = _0xE259.matrix[_0xB90A[8]](_0xE498.x - 1, _0xE498.y);
                        if (_0xE47F.gameObject.position.x < _0xE4CA.gameObject.position.x) {
                            if (_0xE498.x > 0 && _0xE259.matrix[_0xB90A[8]](_0xE498.x - 1, _0xE498.y).val == -1) {
                                _0xE498.x--
                            } else {
                                if (_0xE498.x <= 0) {
                                    _0xE498.y++
                                }
                            }
                        } else {
                            if (_0xE498.x < _0xE259.matrix.width - 1 && _0xE259.matrix[_0xB90A[8]](_0xE498.x + 1, _0xE498.y).val == -1) {
                                _0xE498.x++
                            } else {
                                if (_0xE498.x >= _0xE259.matrix.width - 1) {
                                    _0xE498.y++
                                }
                            }
                        }
                    };
                    if (_0xE498.x < 0) {
                        _0xE498.y++;
                        _0xE498.x = 0
                    };
                    if (_0xE498.x >= _0xE259.matrix.width) {
                        _0xE498.y++;
                        _0xE498.x = _0xE259.matrix.width - 1
                    };
                    if (_0xE498.y < 0) {
                        return
                    };
                    if (_0xE498.y > _0xE259.matrix.height - 1) {
                        trace(_0xB90A[310]);
                        return
                    };
                    _0xE259.dataMap[_0xB90A[95]](_0xE47F.gameObject, _0xE498);
                    _0xE259.pairMap[_0xB90A[95]](_0xE498, _0xE47F.gameObject);
                    _0xE259.matrix.add(_0xE498.x, _0xE498.y, _0xE498);
                    var _0xE2A4 = _0xE259.gridToWorldPosition(_0xE47F.gameObject, _0xE498.x, _0xE498.y);
                    Components.Tweens.create(_0xE47F.gameObject).to(_0xC639(_0xB90A[43], _0xE2A4.x, _0xB90A[44], _0xE2A4.y), 100, null, true);
                    if (_0xE47F.isRainbow) {
                        _0xE498 = _0xE259.dataMap[_0xB90A[8]](_0xE4CA.gameObject)
                    };
                    if (_0xE47F.isRainbow && _0xE4CA.isBricks) {
                        _0xE259.toBreak = [];
                        _0xE259.toBreak.push(_0xE259.dataMap[_0xB90A[8]](_0xE47F.gameObject));
                        _0xE259.toBreak.push(_0xE259.dataMap[_0xB90A[8]](_0xE4CA.gameObject));
                        _0xE259.breakBubbles();
                        _0xE259.checkHangingBubbles()
                    } else {
                        _0xE259.breakMatchingBubbles(_0xE498, _0xE47F.isRainbow ? _0xE259.dataMap[_0xB90A[8]](_0xE47F.gameObject) : null)
                    };
                    if (_0xE259.allBubbles.length == 0) {
                        _0xE259.events.throwEvent(_0xE04C.BUBBLESHOOTER_WIN);
                        _0xE259.disableInput = true;
                        if (_0xE259.maxBalls < 2) {
                            _0xE259.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                [Components.SessionData.STAR, Components.SessionData.ONE_STAR]
                            ]))
                        } else {
                            if (_0xE259.maxBalls < 6) {
                                _0xE259.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                    [Components.SessionData.STAR, Components.SessionData.TWO_STAR]
                                ]))
                            } else {
                                _0xE259.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                    [Components.SessionData.STAR, Components.SessionData.THREE_STAR]
                                ]))
                            }
                        }
                    } else {
                        if (_0xE259.allBubbles.length != 0 && _0xE259.maxBalls < 0) {
                            trace(_0xB90A[306]);
                            _0xE259.events.throwEvent(_0xE04C.BUBBLESHOOTER_LOSE);
                            _0xE259.disableInput = true;
                            _0xE259.once = false;
                            if (_0xE259.once) {
                                _0xE259.events.throwEvent(_0xB90A[307]);
                                _0xE259.once = false
                            } else {

                                Components.DevUtils.playSound(_0xB90A[266]);
                                _0xE259.events.throwEvent(Components.SessionData.SHOW_TRY_AGAIN_POPUP)

                            }
                        }
                    }
                };
                _0xE259.toBreak = [];
                return _0xE259
            }
            _0xB987(_0xE04C, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xE76D = this;
                this.events.throwEvent("closePowerPanel");
                this.tracePrefab = GameObject.getObject(_0xB90A[311]);
                this.maxBalls++;
                this.bubbles = GameObject.getObjectsByTag(_0xB90A[312], true);
                this.holder = GameObject.getObject(_0xB90A[308]);
                this.matrix = new _0xE065(this.width, this.height);
                this.aimContainer = GameObject.getObject(_0xB90A[313]);
                this.powerLevels = GameObject.getObjectsByTag(_0xB90A[314], true);
                Components.Tweens.create(this.aimContainer).to(_0xC639(_0xB90A[46], 360), 8000, null, true, 0, -1);
                this.scoreHolder = GameObject.getObject(_0xB90A[315]);
                this.scoreHolder.getComponent(Components.TextLabel).setText(this.maxBalls.toString());
                this.generateMatrix();
                this.events.addEventListener(_0xB90A[29], this.onUpdate);
                this.bubbleCircle = GameObject.getObject(_0xB90A[316]);
                if (!this.gameObject.game.device.desktop) {
                    this.holder.addButtonPressedCallback(this.onShootBubble)
                } else {
                    this.holder.addButtonPressedCallback(this.onShootBubble)
                };
                this.generateBubble();
                this.generateBubble();
                this.ps = this.holder.getComponent(Components.ParticleSystem);
                this.gameObject.game.time.events.add(15000, this.revealWhite, this);
                this.swapButton = GameObject.getObject(_0xB90A[317]);
                this.swapButton.addButtonPressedCallback(this.swapBubbles);
                this.swapButton.visible = false;
                this.gameObject.game.time.events.add(10000, this.generateNewRow, this);
                this.visitedHash = new Set();
                this.addGayBallButton = GameObject.getObject(_0xB90A[318]);
                this.addGayBallButton.addButtonPressedCallback(function() {
                    _0xE76D.brokenBubbles = _0xE76D.bubblesToBreak;
                    _0xE76D.checkRainbowBubble()
                });
                this.addMovesButton = GameObject.getObject(_0xB90A[319]);
                this.addMovesButton.addButtonPressedCallback(function() {
                    _0xE76D.maxBalls += 5;
                    _0xE76D.scoreHolder.getComponent(Components.TextLabel).setText(_0xE76D.maxBalls.toString())
                });
                this.events.addEventListener(_0xB90A[320], function() {
                    _0xE76D.maxBalls += 8;
                    _0xE76D.scoreHolder.getComponent(Components.TextLabel).setText(_0xE76D.maxBalls.toString());
                    _0xE76D.generateBubble();
                    _0xE76D.generateBubble()
                });
                this.ps.objScale = this.ballScale;
                this.events.addEventListener(_0xB90A[254], function() {
                    Managers.SceneManager.instance.loadUnit(Components.DevUtils.getCurrentUnitName(), true)
                });
                this.events.addEventListener(_0xB90A[321], function() {
                    _0xE76D.swapButton.visible = true
                });
                this.checkBubblesOutline();
                this.events.addEventListener(_0xB90A[322], function() {
                    _0xE76D.events.throwEvent(Components.SessionData.LOSE_LIFE)
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[323], _0xB90A[5], function _0xE1DC() {
                var _0xE835 = this.direction.clone();
                this.unusedTraces = this.traces;
                for (var _0xE7EA = 0; _0xE7EA < this.unusedTraces.length; _0xE7EA++) {
                    var _0xE880 = this.unusedTraces[_0xE7EA];
                    _0xE880.visible = false
                };
                if (!this.activeBubble) {
                    return
                };
                this.traces = [];
                var _0xE81C = this.activeBubble.position.clone();
                var _0xE466 = this.holder;
                var _0xDFB6 = new Phaser.Rectangle(-_0xE466.anchor.x * _0xE466.unscaledWidth, -_0xE466.anchor.y * _0xE466.unscaledHeight, _0xE466.unscaledWidth, _0xE466.unscaledHeight);
                var _0xC684 = _0xDFB6.right;
                var _0xC66B = _0xDFB6.left;
                var _0xE899 = 500;
                while (_0xE81C.y > _0xDFB6.top && _0xE899 > 0) {
                    var _0xC652 = this.getTraceObject();
                    _0xC652.position.copyFrom(_0xE81C);
                    var _0xD87C = this.direction.x * 20;
                    var _0xD895 = this.direction.y * 20;
                    if (_0xE81C.x + _0xD87C > _0xC684) {
                        _0xE81C.x = _0xC684 - (_0xD87C - (_0xC684 - _0xE81C.x));
                        this.direction.x *= -1
                    } else {
                        if (_0xE81C.x + _0xD87C < _0xC66B) {
                            _0xE81C.x = _0xC66B + (-_0xD87C - (_0xE81C.x - _0xC66B));
                            this.direction.x *= -1
                        } else {
                            _0xE81C.x += _0xD87C
                        }
                    };
                    var _0xE84E = this.activeBubble.width + this.activeBubble.width / 10;
                    var _0xE867 = false;
                    var _0xD8C7 = 0;
                    for (var _0xE803 = 0; _0xE803 < this.toCheckAgainst.length; _0xE803++) {
                        var _0xCE22 = this.toCheckAgainst[_0xE803];
                        _0xD8C7 = Phaser.Math.distance(_0xE81C.x, _0xE81C.y, _0xCE22.x, _0xCE22.y);
                        if (_0xD8C7 <= _0xE84E) {
                            _0xE867 = true;
                            break
                        }
                    };
                    if (_0xE867) {
                        _0xC652.visible = false;
                        break
                    };
                    _0xE81C.y += _0xD895;
                    _0xE899--
                };
                this.direction = _0xE835
            }), _0xC639(_0xB90A[13], _0xB90A[324], _0xB90A[5], function _0xE15F() {
                var _0xCC47;
                if (this.unusedTraces.length != 0) {
                    _0xCC47 = this.unusedTraces.shift()
                } else {
                    _0xCC47 = new GameObject(this.gameObject.game, _0xB90A[325] + this.traces.length);
                    _0xCC47.anchor[_0xB90A[95]](0.5, 0.5);
                    _0xCC47.loadTexture(this.tracePrefab.texture);
                    _0xCC47.scale[_0xB90A[95]](0.15, 0.15);
                    this.holder.addChild(_0xCC47)
                };
                _0xCC47.visible = true;
                this.traces.push(_0xCC47);
                return _0xCC47
            }), _0xC639(_0xB90A[13], _0xB90A[326], _0xB90A[5], function _0xE114() {
                if (!this.activeBubble) {
                    return
                };
                if (this.brokenBubbles >= this.bubblesToBreak) {
                    this.activeBubble.getComponent(Components.BubbleBall).addRainbowBall();
                    for (var _0xE641 = 0; _0xE641 < this.powerLevels.length; _0xE641++) {
                        var _0xCE22 = this.powerLevels[_0xE641];
                        _0xCE22.visible = true
                    };
                    this.brokenBubbles = 0
                } else {
                    var _0xC85F = this.brokenBubbles / this.bubblesToBreak;
                    var _0xE68C = 1 / this.powerLevels.length;
                    var _0xE673 = ~~(_0xC85F / _0xE68C);
                    for (var _0xE65A = 0; _0xE65A < this.powerLevels.length; _0xE65A++) {
                        var _0xE628 = this.powerLevels[_0xE65A];
                        if (_0xE65A < _0xE673) {
                            _0xE628.visible = true
                        } else {
                            _0xE628.visible = false
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[327], _0xB90A[5], function _0xE12D(_0xC6E8, _0xC9D6, _0xE3B7, _0xE39E) {
                var _0xE6D7 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
                var _0xD255 = Math.floor(Math.random() * this.bubbles.length + 1);
                var _0xE2BD = new _0xE07E(_0xC9D6, _0xC6E8, _0xD255);
                this.matrix.add(_0xC9D6, _0xC6E8, _0xE2BD);
                var _0xE6BE = new GameObject(this.gameObject.game, _0xB90A[328] + _0xC6E8 + _0xB90A[27] + _0xC9D6 + _0xB90A[61] + _0xD255);
                _0xE6BE.loadTexture(this.bubbles[_0xD255 - 1].texture);
                this.dataMap[_0xB90A[95]](_0xE6BE, _0xE2BD);
                this.pairMap[_0xB90A[95]](_0xE2BD, _0xE6BE);
                this.holder.addChild(_0xE6BE);
                _0xE6BE.anchor[_0xB90A[95]](0.5, 0.5);
                _0xE6BE.scale[_0xB90A[95]](this.ballScale, this.ballScale);
                var _0xDD2C = this.gridToWorldPosition(_0xE6BE, _0xC9D6, _0xC6E8);
                _0xE6BE.position[_0xB90A[95]](_0xDD2C.x, _0xDD2C.y);
                var _0xE6A5 = new Components.BubbleBall();
                this.bubbleBalls.push(_0xE6A5);
                _0xE6BE.addComponent(_0xE6A5);
                if (_0xE6D7) {
                    _0xE6A5.init()
                };
                if (_0xE3B7) {
                    _0xE6A5.addWhiteBall()
                };
                if (_0xE39E) {
                    _0xE6A5.addBricks();
                    _0xE2BD.val = 99;
                    _0xE6BE.name = _0xB90A[328] + _0xC6E8 + _0xB90A[27] + _0xC9D6 + _0xB90A[61] + 99
                };
                this.allBubbles.push(_0xE6A5);
                if (this.remainingColorMap.has(_0xD255)) {
                    this.remainingColorMap[_0xB90A[95]](_0xD255, this.remainingColorMap[_0xB90A[8]](_0xD255) + 1)
                } else {
                    this.remainingColorMap[_0xB90A[95]](_0xD255, 1)
                };
                return _0xE6BE
            }), _0xC639(_0xB90A[13], _0xB90A[329], _0xB90A[5], function _0xE178(_0xC7FB, _0xE754, _0xE722) {
                var _0xC6E8 = _0xE722;
                var _0xC9D6 = _0xE754;
                var _0xDFB6 = this.originalContainerBounds;
                var _0xE3E9 = new PIXI.Point(this.size / 2 - this.holder.unscaledWidth * this.holder.anchor.x - 4, 10 + this.size / 2 - this.holder.unscaledHeight * this.holder.anchor.y);
                var _0xD6A1 = _0xE3E9.x + _0xC9D6 * (this.bubbles[0].unscaledWidth * this.ballScale + this.spacing) + (_0xC6E8 % 2 == 1 ? this.bubbles[0].unscaledWidth * this.ballScale / 2 : 0) + this.ballRadius;
                var _0xD6BA = _0xE3E9.y + _0xC6E8 * (3 / 4 * 2 * this.size + this.spacing) + this.ballRadius;
                var _0xE73B = new PIXI.Point(_0xD6A1, _0xD6BA);
                return _0xE73B
            }), _0xC639(_0xB90A[13], _0xB90A[330], _0xB90A[5], function _0xE191() {
                var _0xE786 = this;
                var _0xE79F = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                this.disableInput = true;
                this.activeBubble = this.nextBubble;
                if (!_0xE79F) {
                    var _0xE36C = new Phaser.Point(this.gameObject.game.input.x, this.gameObject.game.input.y);
                    var _0xE33A = Components.DevUtils.getBounds(this.bubbleCircle);
                    var _0xDFCF = this.direction ? this.direction.clone() : _0xE36C.subtract(_0xE33A.centerX, _0xE33A.centerY);
                    _0xDFCF.normalize();
                    _0xDFCF.multiply(_0xE33A.width / 2 - 15, _0xE33A.height / 2 - 15);
                    _0xDFCF.add(_0xE33A.centerX, _0xE33A.centerY);
                    var _0xE7B8 = this.activeBubble.parent.toLocal(_0xDFCF, this.gameObject.game.world);
                    Components.Tweens.create(this.activeBubble).to(_0xC639(_0xB90A[43], _0xE7B8.x, _0xB90A[44], _0xE7B8.y), 200, null, true).onComplete.addOnce(function() {
                        _0xE786.disableInput = false
                    })
                } else {
                    this.activeBubble.position[_0xB90A[95]](this.bubbleCircle.x, this.bubbleCircle.y - this.bubbleCircle.height * this.bubbleCircle.anchor.y);
                    this.disableInput = false
                };
                var _0xE227 = Number(this.activeBubble.tags[2]) - 1;
                if (_0xE227 > this.aimContainer.children.length - 1) {
                    _0xE227 = this.aimContainer.children.length - 1
                };
                this.lastAimIndex = _0xE227;
                this.nextBubble = null
            }), _0xC639(_0xB90A[13], _0xB90A[331], _0xB90A[5], function _0xE146() {
                this.activeBubble = null;
                this.maxBalls--;
                if (this.maxBalls <= 0) {
                    if (this.nextBubble != null) {
                        this.moveNextBallToPosition();
                        this.disableInput = true;
                        this.xheckStatusAfterLastBubble = true
                    };
                    return
                };
                var _0xE709 = true;
                for (var _0xE6F0 = 1; _0xE6F0 <= this.bubbles.length; _0xE6F0++) {
                    if (this.remainingColorMap[_0xB90A[8]](_0xE6F0) != 0) {
                        _0xE709 = false;
                        break
                    }
                };
                if (_0xE709) {
                    return
                };
                var _0xE466 = GameObject.getObject(_0xB90A[308]);
                var _0xD255 = Math.floor(Math.random() * this.bubbles.length + 1);
                while (this.remainingColorMap[_0xB90A[8]](_0xD255) == 0) {
                    _0xD255 = Math.floor(Math.random() * this.bubbles.length + 1)
                };
                if (this.nextBubble != null) {
                    this.moveNextBallToPosition(this.activeBubbleCount == 0)
                };
                this.nextBubble = new GameObject(this.gameObject.game, _0xB90A[332] + this.activeBubbleCount + _0xB90A[61] + _0xD255);
                this.nextBubble.loadTexture(this.bubbles[_0xD255 - 1].texture);
                _0xE466.addChild(this.nextBubble);
                this.nextBubble.anchor[_0xB90A[95]](0.5, 0.5);
                this.nextBubble.scale[_0xB90A[95]](this.ballScale, this.ballScale);
                this.nextBubble.position.x = this.bubbleCircle.x + this.bubbleCircle.width * (1 - this.bubbleCircle.anchor.x) + this.nextBubble.width * this.nextBubble.anchor.x;
                this.nextBubble.position.y = this.bubbleCircle.y + this.bubbleCircle.height * (1 - this.bubbleCircle.anchor.y) - this.nextBubble.height * 0.75;
                this.nextBubble.alpha = 0;
                Components.Tweens.create(this.nextBubble).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                var _0xE434 = new Components.BubbleBall();
                this.nextBubble.addComponent(_0xE434);
                _0xE434.onBoundsCollisionCallback = this.onTopCollision;
                this.activeBubbleCount++;
                this.scoreHolder.getComponent(Components.TextLabel).setText(this.maxBalls.toString())
            }), _0xC639(_0xB90A[13], _0xB90A[333], _0xB90A[5], function _0xE0C9(_0xE240, _0xDEEE) {
                this.toBreak = [];
                this.visitedHash = new Set();
                this.recBreak(_0xE240, Number(this.pairMap[_0xB90A[8]](_0xE240).tags[2]));
                this.checkBubblesOutline();
                if (this.toBreak.length <= 2 && !_0xDEEE) {
                    return
                };
                if (_0xDEEE) {
                    this.toBreak.push(_0xDEEE)
                };
                this.brokenBubbles += this.toBreak.length;
                this.breakBubbles();
                this.checkHangingBubbles();
                this.checkRainbowBubble();
                this.checkBubblesOutline()
            }), _0xC639(_0xB90A[13], _0xB90A[334], _0xB90A[5], function _0xE0E2() {
                this.toCheckAgainst = [];
                for (var _0xE4E3 = 0; _0xE4E3 < this.width; _0xE4E3++) {
                    var _0xE4FC = 0;
                    for (var _0xC9D6 = this.height - 1; _0xC9D6 >= 0; _0xC9D6--) {
                        if (this.matrix[_0xB90A[8]](_0xE4E3, _0xC9D6).val != -1) {
                            this.toCheckAgainst.push(this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xE4E3, _0xC9D6)));
                            if (_0xE4FC > 1) {
                                break
                            };
                            _0xE4FC++
                        };
                        if (_0xE4E3 != 0 && this.matrix[_0xB90A[8]](_0xE4E3 - 1, _0xC9D6).val != -1) {
                            this.toCheckAgainst.push(this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xE4E3 - 1, _0xC9D6)))
                        };
                        if (_0xE4E3 != this.width - 1 && this.matrix[_0xB90A[8]](_0xE4E3 + 1, _0xC9D6).val != -1) {
                            this.toCheckAgainst.push(this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xE4E3 + 1, _0xC9D6)))
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[335], _0xB90A[5], function _0xE0B0() {
                var _0xE20E = this;
                for (var _0xE1F5 = 0; _0xE1F5 < this.toBreak.length; _0xE1F5++) {
                    var _0xCE22 = this.pairMap[_0xB90A[8]](this.toBreak[_0xE1F5]);
                    if (!_0xCE22) {
                        return
                    };
                    this.showWhiteNeighbours(this.toBreak[_0xE1F5]);
                    Components.Tweens.create(_0xCE22.scale).to(_0xC639(_0xB90A[43], this.ballScale + 0.15, _0xB90A[44], this.ballScale + 0.15), 100, Phaser.Easing.Quadratic.Out, true, _0xE1F5 * 25, 0, true);
                    Components.Tweens.create(_0xCE22.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 150, null, true, 200 + _0xE1F5 * 25);
                    Components.Tweens.create(_0xCE22).to(_0xC639(_0xB90A[45], 0), 150, null, true, 200 + _0xE1F5 * 25);
                    this.gameObject.game.time.events.add(_0xE1F5 * 25 + 200, function(_0xC652) {
                        Components.ScoreManager.instance.addScore(100);
                        _0xE20E.ps.showParticleAt(_0xC652.x, _0xC652.y, Number(_0xC652.tags[2]) - 1, false)
                    }, this, _0xCE22);
                    var _0xE227 = this.allBubbles.indexOf(_0xCE22.getComponent(Components.BubbleBall));
                    if (_0xE227 != -1) {
                        this.allBubbles.splice(_0xE227, 1)
                    };
                    if (this.remainingColorMap.has(this.dataMap[_0xB90A[8]](_0xCE22).val)) {
                        this.remainingColorMap[_0xB90A[95]](this.dataMap[_0xB90A[8]](_0xCE22).val, this.remainingColorMap[_0xB90A[8]](this.dataMap[_0xB90A[8]](_0xCE22).val) - 1)
                    };
                    this.dataMap[_0xB90A[8]](_0xCE22).val = -1;
                    this.dataMap[_0xB90A[336]](_0xCE22);
                    this.pairMap[_0xB90A[336]](this.toBreak[_0xE1F5]);
                    this.gameObject.game.time.events.add(100 + _0xE1F5 * 25, function() {
                        Components.DevUtils.playSound(_0xB90A[337])
                    }, this)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[338], _0xB90A[5], function _0xE1C3(_0xE240) {
                var _0xD6A1 = _0xE240.x;
                var _0xD6BA = _0xE240.y;
                if (_0xD6A1 + 1 < this.matrix.width && this.pairMap.has(this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA))) {
                    this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA)).getComponent(Components.BubbleBall).destroyWhiteBall()
                };
                if (_0xD6A1 - 1 >= 0 && this.pairMap.has(this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA))) {
                    this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA)).getComponent(Components.BubbleBall).destroyWhiteBall()
                };
                if (_0xD6BA + 1 < this.matrix.height && this.pairMap.has(this.matrix[_0xB90A[8]](_0xD6A1, _0xD6BA + 1))) {
                    this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xD6A1, _0xD6BA + 1)).getComponent(Components.BubbleBall).destroyWhiteBall()
                };
                if (_0xD6BA - 1 >= 0 && this.pairMap.has(this.matrix[_0xB90A[8]](_0xD6A1, _0xD6BA - 1))) {
                    this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xD6A1, _0xD6BA - 1)).getComponent(Components.BubbleBall).destroyWhiteBall()
                };
                if (_0xD6BA % 2 == 1) {
                    if (_0xD6A1 + 1 < this.matrix.width && _0xD6BA - 1 >= 0 && this.pairMap.has(this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA - 1))) {
                        this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA - 1)).getComponent(Components.BubbleBall).destroyWhiteBall()
                    };
                    if (_0xD6A1 + 1 < this.matrix.width && _0xD6BA + 1 < this.matrix.height && this.pairMap.has(this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA + 1))) {
                        this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA + 1)).getComponent(Components.BubbleBall).destroyWhiteBall()
                    }
                } else {
                    if (_0xD6A1 - 1 >= 0 && _0xD6BA - 1 >= 0 && this.pairMap.has(this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA - 1))) {
                        this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA - 1)).getComponent(Components.BubbleBall).destroyWhiteBall()
                    };
                    if (_0xD6A1 - 1 >= 0 && _0xD6BA + 1 < this.matrix.height && this.pairMap.has(this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA + 1))) {
                        this.pairMap[_0xB90A[8]](this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA + 1)).getComponent(Components.BubbleBall).destroyWhiteBall()
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[339], _0xB90A[5], function _0xE0FB() {
                var _0xE5F6 = [];
                this.toBreak = [];
                this.visitedHash.clear();
                for (var _0xE560 = 0; _0xE560 < this.width; _0xE560++) {
                    if (this.matrix[_0xB90A[8]](_0xE560, 0).val != -1) {
                        this.recBreak(this.matrix[_0xB90A[8]](_0xE560, 0), -1);
                        for (var _0xE579 = 0; _0xE579 < this.toBreak.length; _0xE579++) {
                            var _0xCE22 = this.toBreak[_0xE579];
                            _0xE5F6.push(_0xCE22)
                        }
                    }
                };
                var _0xE60F = [];
                for (var _0xE592 = 0; _0xE592 < this.allBubbles.length; _0xE592++) {
                    var _0xE515 = this.dataMap[_0xB90A[8]](this.allBubbles[_0xE592].gameObject);
                    if (_0xE5F6.indexOf(_0xE515) == -1) {
                        _0xE60F.push(_0xE515);
                        this.allBubbles.splice(_0xE592, 1);
                        _0xE592--;
                        if (this.remainingColorMap.has(_0xE515.val)) {
                            this.remainingColorMap[_0xB90A[95]](_0xE515.val, this.remainingColorMap[_0xB90A[8]](_0xE515.val) - 1)
                        }
                    }
                };
                this.brokenBubbles += _0xE60F.length;
                var _0xE5DD = -100000;
                for (var _0xE5AB = 0; _0xE5AB < _0xE60F.length; _0xE5AB++) {
                    var _0xE52E = this.pairMap[_0xB90A[8]](_0xE60F[_0xE5AB]);
                    if (_0xE52E.y > _0xE5DD) {
                        _0xE5DD = _0xE52E.y
                    }
                };
                for (var _0xE5C4 = 0; _0xE5C4 < _0xE60F.length; _0xE5C4++) {
                    var _0xE547 = _0xE60F[_0xE5C4];
                    var _0xC652 = this.pairMap[_0xB90A[8]](_0xE547);
                    _0xE547.val = -1;
                    Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[44], this.holder.unscaledHeight - this.holder.unscaledHeight * this.holder.anchor.y - (_0xE5DD - _0xC652.y)), 1300, Phaser.Easing.Cubic.Out, true, 200);
                    Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[45], 0), 1250, Phaser.Easing.Circular.Out, true, 200);
                    this.dataMap[_0xB90A[336]](this.pairMap[_0xB90A[8]](_0xE60F[_0xE5C4]));
                    this.pairMap[_0xB90A[336]](_0xE60F[_0xE5C4])
                };
                Components.ScoreManager.instance.addScore(150 * _0xE60F.length)
            }), _0xC639(_0xB90A[13], _0xB90A[340], _0xB90A[5], function _0xE1AA(_0xE240, _0xE7D1) {
                if (!_0xE240) {
                    return
                };
                var _0xD255 = Number(_0xE240.val);
                if (_0xE7D1 != -1) {
                    if (_0xD255 != _0xE7D1 && this.pairMap.has(_0xE240) && !this.pairMap[_0xB90A[8]](_0xE240).getComponent(Components.BubbleBall).isRainbow || this.visitedHash.has(_0xE240)) {
                        return
                    };
                    if (_0xE7D1 != _0xD255) {
                        return
                    }
                } else {
                    if (_0xD255 == -1 || this.visitedHash.has(_0xE240)) {
                        return
                    }
                };
                if (this.pairMap.has(_0xE240) && this.pairMap[_0xB90A[8]](_0xE240).getComponent(Components.BubbleBall).isWhiteBall && _0xE7D1 != -1) {
                    return
                };
                if (!this.pairMap.has(_0xE240)) {
                    return
                };
                var _0xD6A1 = _0xE240.x;
                var _0xD6BA = _0xE240.y;
                this.toBreak.push(_0xE240);
                this.visitedHash.add(_0xE240);
                if (_0xD6A1 + 1 < this.matrix.width) {
                    this.recBreak(this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA), _0xE7D1)
                };
                if (_0xD6A1 - 1 >= 0) {
                    this.recBreak(this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA), _0xE7D1)
                };
                if (_0xD6BA + 1 < this.matrix.height) {
                    this.recBreak(this.matrix[_0xB90A[8]](_0xD6A1, _0xD6BA + 1), _0xE7D1)
                };
                if (_0xD6BA - 1 >= 0) {
                    this.recBreak(this.matrix[_0xB90A[8]](_0xD6A1, _0xD6BA - 1), _0xE7D1)
                };
                if (_0xD6BA % 2 == 1) {
                    if (_0xD6A1 + 1 < this.matrix.width && _0xD6BA - 1 >= 0) {
                        this.recBreak(this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA - 1), _0xE7D1)
                    };
                    if (_0xD6A1 + 1 < this.matrix.width && _0xD6BA + 1 < this.matrix.height) {
                        this.recBreak(this.matrix[_0xB90A[8]](_0xD6A1 + 1, _0xD6BA + 1), _0xE7D1)
                    }
                } else {
                    if (_0xD6A1 - 1 >= 0 && _0xD6BA - 1 >= 0) {
                        this.recBreak(this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA - 1), _0xE7D1)
                    };
                    if (_0xD6A1 - 1 >= 0 && _0xD6BA + 1 < this.matrix.height) {
                        this.recBreak(this.matrix[_0xB90A[8]](_0xD6A1 - 1, _0xD6BA + 1), _0xE7D1)
                    }
                }
            })]);
            return _0xE04C
        }(Scene.Component);
        _0xE04C.BUBBLESHOOTER_WIN = _0xB90A[341];
        _0xE04C.BUBBLESHOOTER_LOSE = _0xB90A[342];
        Components.BubbleShooter = _0xE04C;
        var _0xE065 = function() {
            function _0xE065(_0xE92F, _0xE916) {
                _0xB955(this, _0xE065);
                this.data = [
                    []
                ];
                this.resize(_0xE92F, _0xE916)
            }
            _0xB987(_0xE065, [_0xC639(_0xB90A[13], _0xB90A[343], _0xB90A[5], function _0xE8E4(_0xE92F, _0xE916) {
                this.width = _0xE92F;
                this.height = _0xE916;
                for (var _0xE948 = 0; _0xE948 < this.data.length; _0xE948++) {
                    var _0xE97A = this.data[_0xE948];
                    _0xE97A.length = 0
                };
                this.data = [];
                for (var _0xE961 = 0; _0xE961 < this.height; _0xE961++) {
                    var _0xD0F7 = [];
                    for (var _0xC9D6 = 0; _0xC9D6 < this.width; _0xC9D6++) {
                        _0xD0F7.push(new _0xE07E(_0xC9D6, _0xE961, -1))
                    };
                    this.data.push(_0xD0F7)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[344], _0xB90A[5], function _0xE8B2(_0xD6A1, _0xD6BA, _0xE8FD) {
                this.data[_0xD6BA][_0xD6A1] = _0xE8FD
            }), _0xC639(_0xB90A[13], _0xB90A[8], _0xB90A[5], function _0xE8CB(_0xD6A1, _0xD6BA) {
                if (_0xD6BA < 0) {
                    _0xD6BA = 0
                };
                if (_0xD6A1 < 0) {
                    _0xD6A1 = 0
                };
                return this.data[_0xD6BA][_0xD6A1]
            })]);
            return _0xE065
        }();
        Components.HexMatrix = _0xE065;
        var _0xE07E = function _0xE07E(_0xD6A1, _0xD6BA) {
            var _0xE8FD = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
            _0xB955(this, _0xE07E);
            this.x = _0xD6A1;
            this.y = _0xD6BA;
            this.val = _0xE8FD
        };
        Components.Pair = _0xE07E
    }

    function _0xBBAD(Components) {
        var _0xE993 = function(_0xE9AC) {
            _0xBA1D(_0xE993, _0xE9AC);

            function _0xE993() {
                var _0xE9C5;
                _0xB955(this, _0xE993);
                _0xE9C5 = _0xB9A0(this, _getPrototypeOf(_0xE993).apply(this, arguments));
                _0xE9C5.allItems = [];
                _0xE9C5.allDolls = [];
                _0xE9C5.pictureUp = [];
                _0xE9C5.pictureDown = [];
                _0xE9C5.once = true;
                _0xE9C5.initObjects = function() {
                    _0xE9C5.allItems = GameObject.getObjectsByTag(_0xE9C5.itemTag, true, 1, 0);
                    _0xE9C5.allDolls = GameObject.getObjectsByTag(_0xE9C5.itemContainerTag);
                    for (var _0xE9DE = 0; _0xE9DE < _0xE9C5.allItems.length; _0xE9DE++) {
                        var _0xCE22 = _0xE9C5.allItems[_0xE9DE];
                        for (var _0xC9D6 = 0; _0xC9D6 < Components.SessionData.UNLOCKED_ITEMS.length; _0xC9D6++) {
                            var _0xD63D = Components.SessionData.UNLOCKED_ITEMS[_0xC9D6];
                            if (_0xCE22.name == _0xD63D) {
                                _0xCE22.alpha = 1
                            }
                        }
                    };
                    _0xE9C5.pictureUp = GameObject.getObjectsByTag(_0xB90A[345], false, 1, 0);
                    _0xE9C5.pictureDown = GameObject.getObjectsByTag(_0xB90A[346], false, 1, 0);
                    Phaser.ArrayUtils.shuffle(_0xE9C5.pictureUp);
                    Phaser.ArrayUtils.shuffle(_0xE9C5.pictureDown);
                    _0xE9C5.events.addEventListener(_0xB90A[347], _0xE9C5.animateCatalogue)
                };
                _0xE9C5.checkItems = function() {
                    for (var _0xE9F7 = 0; _0xE9F7 < _0xE9C5.allDolls.length; _0xE9F7++) {
                        var _0xCE22 = _0xE9C5.allDolls[_0xE9F7];
                        var _0xEA10 = 0;
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xCE22.children.length; _0xC9D6++) {
                            var _0xEA29 = _0xCE22.children[_0xC9D6];
                            if (_0xEA29.alpha == 1) {
                                _0xEA10++
                            }
                        };
                        if (_0xEA10 == _0xCE22.children.length) {
                            var _0xEA42 = _0xCE22.getChildAt(0).name.split(_0xB90A[61]);
                            var _0xEA5B = _0xE9C5.itemTag + _0xB90A[61] + _0xB90A[142] + _0xB90A[61] + _0xEA42[2] + _0xB90A[61] + _0xEA42[3] + _0xB90A[61] + _0xEA42[4];
                            GameObject.getObject(_0xEA5B).alpha = 1;
                            Components.SessionData.UNLOCKED_ITEMS.push(_0xEA5B);
                            Components.Storage.saveData(_0xB90A[111], Components.SessionData.UNLOCKED_ITEMS, true)
                        }
                    }
                };
                _0xE9C5.animateCatalogue = function() {
                    _0xE9C5.pictureUp.forEach(function(_0xCE22) {
                        Components.Tweens.create(_0xCE22).to(_0xC639(_0xB90A[45], 0), 300, null, true)
                    });
                    _0xE9C5.pictureDown.forEach(function(_0xCE22) {
                        Components.Tweens.create(_0xCE22).to(_0xC639(_0xB90A[45], 0), 300, null, true)
                    });
                    _0xE9C5.gameObject.game.time.events.add(310, function() {
                        _0xE9C5.rndItem1 = Phaser.ArrayUtils.getRandomItem(_0xE9C5.pictureUp, 0, 7);
                        _0xE9C5.rndItem2 = Phaser.ArrayUtils.getRandomItem(_0xE9C5.pictureDown, 0, 7);
                        Components.Tweens.create(_0xE9C5.rndItem1).to(_0xC639(_0xB90A[45], 1), 10, null, true);
                        Components.Tweens.create(_0xE9C5.rndItem2).to(_0xC639(_0xB90A[45], 1), 10, null, true)
                    }, _0xB9B9(_0xE9C5))
                };
                return _0xE9C5
            }
            _0xB987(_0xE993, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initObjects();
                this.checkItems();
                this.animateCatalogue();
                this.events.addEventListener(_0xB90A[348], function() {
                    Components.SessionData.FIRST_CATALOGUE_ITEM = true;
                    Components.Storage.saveData(_0xB90A[349], Components.SessionData.FIRST_CATALOGUE_ITEM, false)
                });
                if (Components.SessionData.FIRST_CATALOGUE_ITEM) {
                    this.events.throwEvent(_0xB90A[348])
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xE993
        }(Scene.Component);
        Components.CatalogueManager = _0xE993
    }

    function _0xBBC6(Components) {
        var _0xEA74 = function(_0xEA8D) {
            _0xBA1D(_0xEA74, _0xEA8D);

            function _0xEA74() {
                var _0xEAD8;
                _0xB955(this, _0xEA74);
                _0xEAD8 = _0xB9A0(this, _getPrototypeOf(_0xEA74).apply(this, arguments));
                _0xEAD8.initEvents = function() {
                    _0xEAD8.coinsForAdButton.visible = false;
                    _0xEAD8.events.addEventListener(Components.SessionData.ADD_COINS, _0xEAD8.addCoins);
                    _0xEAD8.events.addEventListener(Components.SessionData.REMOVE_COINS, _0xEAD8.removeCoins);
                    _0xEAD8.events.throwEvent(Components.SessionData.DISPLAY_AMOUNT, Util.Util.createEventData([
                        [Components.TextLabel.TEXT, Components.SessionData.COIN_BALANCE]
                    ]));
                    _0xEAD8.events.addEventListener(_0xB90A[350], function() {
                        _0xEAD8.coinsForAdButton.visible = false
                    })
                };
                _0xEAD8.addCoins = function(_0xCF35) {
                    var _0xEAF1 = _0xCF35.getData(Components.SessionData.AMOUNT);
                    Components.SessionData.COIN_BALANCE += parseInt(_0xEAF1);
                    _0xEAD8.events.throwEvent(Components.SessionData.DISPLAY_AMOUNT, Util.Util.createEventData([
                        [Components.TextLabel.TEXT, Components.SessionData.COIN_BALANCE]
                    ]));
                    if (Components.SessionData.COIN_BALANCE > 0) {
                        _0xEAD8.coinsForAdButton.visible = false
                    };
                    Components.Storage.saveData(_0xB90A[351], Components.SessionData.COIN_BALANCE, false)
                };
                _0xEAD8.removeCoins = function(_0xCF35) {
                    if (Components.SessionData.COIN_BALANCE <= 0) {
                        return
                    };
                    var _0xEAF1 = _0xCF35.getData(Components.SessionData.AMOUNT);
                    Components.SessionData.COIN_BALANCE -= parseInt(_0xEAF1);
                    trace(_0xEAF1);
                    _0xEAD8.events.throwEvent(Components.SessionData.DISPLAY_AMOUNT, Util.Util.createEventData([
                        [Components.TextLabel.TEXT, Components.SessionData.COIN_BALANCE]
                    ]));
                    if (Components.SessionData.COIN_BALANCE <= 0) {
                        _0xEAD8.coinsForAdButton.visible = true
                    };
                    Components.Storage.saveData(_0xB90A[351], Components.SessionData.COIN_BALANCE, false)
                };
                return _0xEAD8
            }
            _0xB987(_0xEA74, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})], [_0xC639(_0xB90A[13], _0xB90A[352], _0xB90A[5], function _0xEAA6(_0xEABF) {
                Components.SessionData.COIN_BALANCE += _0xEABF;
                Components.Storage.saveData(_0xB90A[351], Components.SessionData.COIN_BALANCE, false)
            })]);
            return _0xEA74
        }(Scene.Component);
        Components.CoinManager = _0xEA74
    }

    function _0xBBDF(Components) {
        var _0xEB0A = function(_0xEB23) {
            _0xBA1D(_0xEB0A, _0xEB23);

            function _0xEB0A() {
                var _0xEB3C;
                _0xB955(this, _0xEB0A);
                _0xEB3C = _0xB9A0(this, _getPrototypeOf(_0xEB0A).apply(this, arguments));
                _0xEB3C.showPanel = function() {
                    Components.Tweens.create(_0xEB3C.mainContainer).to(_0xC639(_0xB90A[45], 1), 400, null, true).onComplete.addOnce(function() {
                        _0xEB3C.mainContainer.enableInput()
                    })
                };
                _0xEB3C.closePanel = function() {
                    Components.Tweens.create(_0xEB3C.mainContainer).to(_0xC639(_0xB90A[45], 0), 400, null, true).onComplete.addOnce(function() {
                        _0xEB3C.mainContainer.disableInput()
                    })
                };
                return _0xEB3C
            }
            _0xB987(_0xEB0A, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.mainContainer.alpha = 0;
                this.mainContainer.disableInput();
                this.events.addEventListener(_0xB90A[307], this.showPanel);
                this.closeButton.addButtonPressedCallback(this.closePanel);
                this.events.addEventListener(_0xB90A[353], function() {
                    Managers.SceneManager.instance.loadUnit(Components.DevUtils.getCurrentUnitName(), true)
                });
                this.events.addEventListener(_0xB90A[320], this.closePanel)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xEB0A
        }(Scene.Component);
        Components.ExtraMovesPopUp = _0xEB0A
    }

    function _0xBBF8(Components) {
        var _0xEB55 = function(_0xEB6E) {
            _0xBA1D(_0xEB55, _0xEB6E);

            function _0xEB55() {
                var _0xEB87;
                _0xB955(this, _0xEB55);
                _0xEB87 = _0xB9A0(this, _getPrototypeOf(_0xEB55).apply(this, arguments));
                _0xEB87.lifeReward = false;
                _0xEB87.initialStatus = function() {

                    _0xEB87.popUpCont.visible = false;
                    _0xEB87.time.alpha = 0;
                    _0xEB87.life.alpha = 0
                };
                _0xEB87.initEvents = function() {
                    _0xEB87.events.addEventListener(Components.SessionData.SHOW_EXTRA_TIME_POPUP, _0xEB87.showReward);
                    _0xEB87.closeButton.addButtonPressedCallback(_0xEB87.closePopUp)
                };
                _0xEB87.closePopUp = function() {
                    _0xEB87.popUpCont.disableInput();
                    Components.Tweens.create(_0xEB87.popUpCont).to(_0xC639(_0xB90A[45], 0), 300, null, true);
                    if (Components.DevUtils.getCurrentUnitName().split(_0xB90A[61])[0] != _0xB90A[354]) {
                        console.log("7777777777777777777777777777777777")
                        Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                    };
                    if (!_0xEB87.lifeReward) {
                        _0xEB87.events.throwEvent(Components.SessionData.LOSE_LIFE)
                    };
                    _0xEB87.events.throwEvent(_0xB90A[273])
                };
                _0xEB87.showReward = function() {
                    return;
                    _0xEB87.popUpCont.visible = true;
                    if (_0xEB87.lifeReward) {
                        _0xEB87.life.alpha = 1;
                        _0xEB87.events.addEventListener(_0xB90A[355], function() {
                            _0xEB87.events.throwEvent(Components.SessionData.ADD_LIFE);
                            _0xEB87.popUpCont.disableInput();
                            Components.Tweens.create(_0xEB87.popUpCont).to(_0xC639(_0xB90A[45], 0), 300, null, true).onComplete.addOnce(function() {
                                _0xEB87.events.throwEvent(_0xB90A[274]);
                                _0xEB87.events.throwEvent(_0xB90A[273])
                            })
                        })
                    } else {
                        _0xEB87.time.alpha = 1;
                        _0xEB87.events.addEventListener(_0xB90A[355], function() {
                            Components.GameTimer.instance.resetTimeAt(Components.TimerType.minigame, 40, true);
                            _0xEB87.popUpCont.disableInput();
                            Components.Tweens.create(_0xEB87.popUpCont).to(_0xC639(_0xB90A[45], 0), 300, null, true).onComplete.addOnce(function() {
                                _0xEB87.events.throwEvent(_0xB90A[274])
                            });;
                        })
                    }
                };
                return _0xEB87
            }
            _0xB987(_0xEB55, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initialStatus();
                this.initEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xEB55
        }(Scene.Component);
        Components.ExtraTimeLifePopUp = _0xEB55
    }

    function _0xBC11(Components) {
        var _0xEBA0 = function(_0xEBB9) {
            _0xBA1D(_0xEBA0, _0xEBB9);

            function _0xEBA0() {
                var _0xEBD2;
                _0xB955(this, _0xEBA0);
                _0xEBD2 = _0xB9A0(this, _getPrototypeOf(_0xEBA0).apply(this, arguments));
                _0xEBD2.functionCallCount = 0;
                _0xEBD2.giveItems = function() {
                    _0xEBD2.showItem()
                };
                _0xEBD2.giveReward = function() {
                    if (Components.SessionData.FIRST_TIME_LOGIN) {
                        _0xEBD2.invetoryBtn.disableInput();
                        _0xEBD2.catalogueBtn.disableInput();
                        _0xEBD2.nextBtn.disableInput();
                        _0xEBD2.events.throwEvent(_0xB90A[356]);
                        Components.DevUtils.playSound(_0xB90A[356]);
                        Components.SessionData.UNLOCKED_ITEMS.push(_0xB90A[357], _0xB90A[358], _0xB90A[359], _0xB90A[360], _0xB90A[361], _0xB90A[362]);
                        _0xEBD2.gameObject.game.time.events.add(6000, function() {
                            _0xEBD2.events.throwEvent(_0xB90A[363])
                        }, _0xB9B9(_0xEBD2));
                        Components.SessionData.FIRST_TIME_LOGIN = false;
                        Components.Storage.saveData(_0xB90A[364], Components.SessionData.FIRST_TIME_LOGIN, false);
                        Components.Storage.saveData(_0xB90A[111], Components.SessionData.UNLOCKED_ITEMS, true)
                    }
                };
                _0xEBD2.showItem = function() {
                    if (_0xEBD2.functionCallCount < _0xEBD2.allItems.length) {
                        Components.DevUtils.playSound(_0xB90A[365]);
                        _0xEBD2.itemElement = _0xEBD2.allItems[_0xEBD2.functionCallCount];
                        Components.Tweens.create(_0xEBD2.itemElement).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                        _0xEBD2.functionCallCount++;
                        var _0xEBEB = GameObject.getObject(_0xB90A[366]);
                        _0xEBEB.alpha = 1;
                        _0xEBD2.endEvent = _0xEBEB.getComponent(Components.AnimationScheduler).endEvent;
                        _0xEBD2.events.addEventListener(_0xEBD2.endEvent, _0xEBD2.handleShowItem);
                        _0xEBD2.events.throwEvent(_0xB90A[367])
                    } else {
                        Components.Tweens.create(_0xEBD2.dollReward).to(_0xC639(_0xB90A[45], 1), 400, null, true);
                        _0xEBD2.functionCallCount = 1;
                        _0xEBD2.allItems = [];
                        _0xEBD2.invetoryBtn.enableInput();
                        _0xEBD2.catalogueBtn.enableInput();
                        _0xEBD2.nextBtn.enableInput()
                    }
                };
                _0xEBD2.handleShowItem = function() {
                    if (_0xEBD2.itemElement) {
                        _0xEBD2.itemElement.alpha = 0;
                        _0xEBD2.itemElement = null
                    };
                    _0xEBD2.events.removeEventListener(_0xEBD2.endEvent, _0xEBD2.handleShowItem);
                    _0xEBD2.showItem()
                };
                return _0xEBD2
            }
            _0xB987(_0xEBA0, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0xB90A[28], function() {
                    if (!Components.SessionData.FIRST_TIME_LOGIN) {
                        GameObject.getObject(_0xB90A[368]).visible = false
                    }
                });
                this.allItems = GameObject.getObjectsByTag(_0xB90A[126], false, 1, 0);
                this.dollReward = GameObject.getObject(_0xB90A[369], 1, 0);
                this.events.addEventListener(_0xB90A[370], this.giveItems);
                var _0xEC04 = GameObject.getObject(_0xB90A[366], 1, 0);
                if (!Components.SessionData.FIRST_TIME_LOGIN) {
                    this.dollReward.alpha = 1;
                    GameObject.getObject(_0xB90A[371]).visible = false;
                    this.events.throwEvent(_0xB90A[372])
                };
                this.events.addEventListener(_0xB90A[372], this.giveReward)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (Components.SessionData.FIRST_TIME_LOGIN) {
                    this.events.throwEvent(_0xB90A[125])
                }
            })]);
            return _0xEBA0
        }(Scene.Component);
        Components.FirstTimeLoginReward = _0xEBA0
    }

    function _0xBC2A(Components) {
        var _0xEC1D = function(_0xEC36) {
            _0xBA1D(_0xEC1D, _0xEC36);

            function _0xEC1D() {
                var _0xEC4F;
                _0xB955(this, _0xEC1D);
                _0xEC4F = _0xB9A0(this, _getPrototypeOf(_0xEC1D).apply(this, arguments));
                _0xEC4F.onRescale = function() {
                    if (!Core.Main.game.device.desktop) {
                        if (Core.Main.game.scale.aspectRatio < 1) {
                            _0xEC4F.gameObject.alpha = 1;
                            _0xEC4F.gameObject.enableInput()
                        } else {
                            _0xEC4F.gameObject.alpha = 0;
                            _0xEC4F.gameObject.disableInput()
                        }
                    }
                };
                return _0xEC4F
            }
            _0xB987(_0xEC1D, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(_0xB90A[28], this.onRescale)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.gameObject.game.scale.onSizeChange.add(this.onRescale);
                this.gameObject.alpha = 0;
                this.gameObject.disableInput()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xEC1D
        }(Scene.Component);
        Components.ForceLandscape = _0xEC1D
    }

    function _0xBC43(Components) {
        var _0xEC68 = function(_0xEC9A) {
            _0xBA1D(_0xEC68, _0xEC9A);

            function _0xEC68() {
                var _0xEDDF;
                _0xB955(this, _0xEC68);
                _0xEDDF = _0xB9A0(this, _getPrototypeOf(_0xEC68).apply(this, arguments));
                _0xEDDF.timerMap = new Map();
                _0xEDDF.pauseMap = new Set();
                _0xEDDF.sentDone = new Set();
                _0xEDDF.timerUpdateMap = new Map();
                _0xEDDF.timerComplete = new Map();
                _0xEDDF.lastTime = -1;
                _0xEDDF.onUpdate = function() {
                    var _0xCBFC = Date.now();
                    if (_0xEDDF.lastTime == -1) {
                        _0xEDDF.lastTime = _0xCBFC
                    };
                    var _0xEDF8 = (_0xCBFC - _0xEDDF.lastTime) / 1000;
                    if (_0xEDF8 > 1) {
                        _0xEDF8 = 0
                    };
                    var _0xEE11 = _0xEDDF.timerMap.keys();
                    var _0xEE43 = _0xEE11.next();
                    while (!_0xEE43.done) {
                        var _0xD39A = _0xEE43.value;
                        var _0xE8FD = _0xEDDF.timerMap[_0xB90A[8]](_0xD39A);
                        if (_0xEDDF.pauseMap.has(_0xD39A)) {
                            _0xEE43 = _0xEE11.next();
                            continue
                        };
                        var _0xEE2A = _0xE8FD - _0xEDF8;
                        if (_0xEE2A < 0) {
                            _0xEE2A = 0
                        };
                        _0xEDDF.timerMap[_0xB90A[95]](_0xD39A, _0xEE2A);
                        if (_0xEDDF.timerUpdateMap.has(_0xD39A)) {
                            _0xEDDF.timerUpdateMap[_0xB90A[8]](_0xD39A).forEach(function(_0xEE5C) {
                                _0xEE5C(_0xEE2A)
                            })
                        };
                        if (_0xEE2A == 0) {
                            if (!_0xEDDF.sentDone.has(_0xD39A)) {
                                if (_0xEDDF.timerComplete.has(_0xD39A)) {
                                    _0xEDDF.timerComplete[_0xB90A[8]](_0xD39A).forEach(function(_0xEE5C) {
                                        _0xEE5C()
                                    })
                                };
                                _0xEDDF.sentDone.add(_0xD39A)
                            }
                        };
                        _0xEE43 = _0xEE11.next()
                    };
                    _0xEDDF.lastTime = _0xCBFC
                };
                return _0xEDDF
            }
            _0xB987(_0xEC68, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                RTRAnalyticsInit();
                _0xEC68.instance = this
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0xB90A[29], this.onUpdate);
                this.events.addEventListener(_0xB90A[28], function() {
                    RTRAnalyticsUnit(Components.DevUtils.getCurrentUnitName().split(_0xB90A[61]).join(_0xB90A[27]))
                })
            }), _0xC639(_0xB90A[13], _0xB90A[373], _0xB90A[5], function _0xED62(_0xEDAD, _0xEE75) {
                var _0xEE8E = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                this.timerMap[_0xB90A[95]](_0xEDAD, _0xEE75);
                trace(_0xB90A[374], _0xEE75, _0xEE8E, _0xEC81.spin == _0xEDAD, this.timerMap[_0xB90A[8]](_0xEDAD));
                this.sentDone[_0xB90A[336]](_0xEDAD);
                if (_0xEE8E) {
                    this.pauseMap[_0xB90A[336]](_0xEDAD)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[375], _0xB90A[5], function _0xECCC(_0xEDAD, _0xED94) {
                if (this.timerUpdateMap.has(_0xEDAD)) {
                    this.timerUpdateMap[_0xB90A[8]](_0xEDAD).push(_0xED94)
                } else {
                    this.timerUpdateMap[_0xB90A[95]](_0xEDAD, [_0xED94])
                }
            }), _0xC639(_0xB90A[13], _0xB90A[376], _0xB90A[5], function _0xECB3(_0xEDAD, _0xED94) {
                if (this.timerComplete.has(_0xEDAD)) {
                    this.timerComplete[_0xB90A[8]](_0xEDAD).push(_0xED94)
                } else {
                    this.timerComplete[_0xB90A[95]](_0xEDAD, [_0xED94])
                }
            }), _0xC639(_0xB90A[13], _0xB90A[377], _0xB90A[5], function _0xED49(_0xEDAD, _0xED94) {
                if (this.timerUpdateMap.has(_0xEDAD)) {
                    var _0xD0F7 = this.timerUpdateMap[_0xB90A[8]](_0xEDAD);
                    if (_0xD0F7.indexOf(_0xED94) != -1) {
                        _0xD0F7.splice(_0xD0F7.indexOf(_0xED94), 1)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[378], _0xB90A[5], function _0xED30(_0xEDAD, _0xED94) {
                if (this.timerComplete.has(_0xEDAD)) {
                    var _0xD0F7 = this.timerComplete[_0xB90A[8]](_0xEDAD);
                    if (_0xD0F7.indexOf(_0xED94) != -1) {
                        _0xD0F7.splice(_0xD0F7.indexOf(_0xED94), 1)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[379], _0xB90A[5], function _0xED17(_0xEDAD) {
                this.pauseMap.add(_0xEDAD)
            }), _0xC639(_0xB90A[13], _0xB90A[380], _0xB90A[5], function _0xED7B(_0xEDAD) {
                this.pauseMap[_0xB90A[336]](_0xEDAD)
            }), _0xC639(_0xB90A[13], _0xB90A[381], _0xB90A[5], function _0xECFE(_0xEDAD) {
                if (!this.timerMap.has(_0xEDAD)) {
                    return 0
                };
                return this.timerMap[_0xB90A[8]](_0xEDAD)
            }), _0xC639(_0xB90A[13], _0xB90A[382], _0xB90A[5], function _0xECE5(_0xEDAD, _0xD255) {
                if (!this.timerMap.has(_0xEDAD)) {
                    return
                };
                var _0xEDC6 = this.timerMap[_0xB90A[8]](_0xEDAD) + _0xD255;
                this.timerMap[_0xB90A[95]](_0xEDAD, _0xEDC6);
                trace(_0xB90A[383], _0xEDAD, _0xD255)
            })]);
            return _0xEC68
        }(Scene.Component);
        _0xEC68.COINS_TIME = 60;
        _0xEC68.SPIN_TIME = 60;
        Components.GameTimer = _0xEC68;
        var _0xEC81;
        (function(_0xEC81) {
            _0xEC81[_0xEC81[_0xB90A[384]] = 0] = _0xB90A[384];
            _0xEC81[_0xEC81[_0xB90A[385]] = 1] = _0xB90A[385];
            _0xEC81[_0xEC81[_0xB90A[386]] = 2] = _0xB90A[386];
            _0xEC81[_0xEC81[_0xB90A[387]] = 3] = _0xB90A[387];
            _0xEC81[_0xEC81[_0xB90A[388]] = 4] = _0xB90A[388];
            _0xEC81[_0xEC81[_0xB90A[389]] = 5] = _0xB90A[389];
            _0xEC81[_0xEC81[_0xB90A[390]] = 6] = _0xB90A[390];
            _0xEC81[_0xEC81[_0xB90A[391]] = 7] = _0xB90A[391];
            _0xEC81[_0xEC81[_0xB90A[392]] = 8] = _0xB90A[392];
            _0xEC81[_0xEC81[_0xB90A[393]] = 9] = _0xB90A[393];
            _0xEC81[_0xEC81[_0xB90A[394]] = 10] = _0xB90A[394];
            _0xEC81[_0xEC81[_0xB90A[395]] = 11] = _0xB90A[395];
            _0xEC81[_0xEC81[_0xB90A[396]] = 12] = _0xB90A[396];
            _0xEC81[_0xEC81[_0xB90A[397]] = 13] = _0xB90A[397];
            _0xEC81[_0xEC81[_0xB90A[398]] = 14] = _0xB90A[398]
        })(_0xEC81 = Components.TimerType || (Components.TimerType = {}))
    }

    function _0xBC5C(Components) {
        var _0xEEA7 = function(_0xEEC0) {
            _0xBA1D(_0xEEA7, _0xEEC0);

            function _0xEEA7() {
                var _0xEED9;
                _0xB955(this, _0xEEA7);
                _0xEED9 = _0xB9A0(this, _getPrototypeOf(_0xEEA7).apply(this, arguments));
                _0xEED9.allItemButtons = [];
                _0xEED9.allSellButtons = [];
                _0xEED9.duplicateItemPrice = [30, 50, 35, 20];
                _0xEED9.initObjects = function() {
                    _0xEED9.allItemButtons.forEach(function(_0xCE22) {
                        _0xCE22.visible = true;
                        if (_0xCE22.tags[1] != _0xB90A[142]) {
                            _0xEED9.createSellButtons(_0xEED9.sellButtonName, _0xCE22);
                            _0xEED9.createCounterItem(_0xEED9.itemCounterHolder, _0xCE22);
                            _0xEED9.countItems(_0xCE22.name);
                            _0xEED9.displayItemAmount(_0xCE22)
                        }
                    });
                    _0xEED9.allSellButtons.forEach(function(_0xCE22) {
                        _0xCE22.addButtonPressedCallback(_0xEED9.sellPrice)
                    });
                    _0xEED9.events.throwEvent(_0xB90A[399])
                };
                _0xEED9.changeButtonName = function() {
                    var _0xEEF2 = GameObject.getObjectsByTag(_0xEED9.itemButtonTag);
                    _0xEEF2.forEach(function(_0xCE22) {
                        _0xCE22.visible = false
                    });
                    Components.SessionData.UNLOCKED_ITEMS.forEach(function(_0xCE22) {
                        var _0xEF24 = GameObject.getObject(_0xCE22);
                        if (_0xEF24 != null) {
                            _0xEF24.name = _0xEED9.itemButtonTag + _0xB90A[61] + _0xEF24.tags[1] + _0xB90A[61] + _0xEF24.tags[2] + _0xB90A[61] + _0xEF24.tags[3] + _0xB90A[61] + _0xEF24.tags[4];
                            var _0xEF0B = GameObject.getObject(_0xEF24.name);
                            _0xEF0B.name = _0xB90A[400] + _0xEF24.name;
                            _0xEF0B.tags = _0xEF0B.name.split(_0xB90A[61]);
                            _0xEED9.allItemButtons.push(_0xEF0B)
                        }
                    });
                    GameObject.tagObjects[_0xB90A[95]](_0xB90A[400] + _0xEED9.itemButtonTag, _0xEED9.allItemButtons.slice());
                    _0xEED9.findDimension();
                    trace(_0xEED9.allItemButtons, _0xB90A[401])
                };
                _0xEED9.findDimension = function() {
                    _0xEED9.dimension = [];
                    for (var _0xEF3D = 0; _0xEF3D < _0xEED9.allItemButtons.length; _0xEF3D++) {
                        var _0xCE22 = _0xEED9.allItemButtons[_0xEF3D];
                        if (!_0xEED9.dimension[Number(_0xCE22.tags[1]) - 1] || _0xCE22.height > _0xEED9.dimension[Number(_0xCE22.tags[1]) - 1]) {
                            _0xEED9.dimension[Number(_0xCE22.tags[1]) - 1] = _0xCE22.height
                        }
                    };
                    trace(_0xEED9.dimension, _0xB90A[402])
                };
                _0xEED9.createSellButtons = function(_0xEFA1, _0xEF88) {
                    var _0xEF6F = new GameObject(_0xEED9.gameObject.game, _0xEFA1 + _0xB90A[61] + _0xEF88.tags[1] + _0xB90A[61] + _0xEF88.tags[2]);
                    _0xEF88.addChild(_0xEF6F);
                    _0xEF6F.loadTexture(GameObject.getObject(_0xEFA1).texture);
                    _0xEF6F.anchor[_0xB90A[95]](0.5, 0.5);
                    _0xEF6F.x = _0xEF88.width / 10;
                    _0xEF6F.y = _0xEED9.dimension[Number(_0xEF88.tags[1]) - 1] / 2 + _0xEF6F.height / 2;
                    _0xEF6F.addComponent(new Components.ButtonComponent());
                    _0xEF6F.addComponent(new Components.MouseInputComponent());
                    _0xEED9.allSellButtons.push(_0xEF6F);
                    var _0xE466 = new GameObject(_0xEED9.gameObject.game, _0xB90A[308] + _0xEF88.tags[1]);
                    _0xE466.loadTexture(GameObject.getObject(_0xEFA1).getChildAt(0).texture);
                    _0xEF6F.addChild(_0xE466);
                    _0xE466.anchor[_0xB90A[95]](0.5, 0.5);
                    _0xE466.position[_0xB90A[95]](0, 0);
                    var _0xEFBA = new GameObject(_0xEED9.gameObject.game, _0xB90A[403] + _0xEF88.tags[1]);
                    _0xEFBA.loadTexture(GameObject.getObject(_0xEFA1).getChildAt(2).texture);
                    _0xEF6F.addChild(_0xEFBA);
                    _0xEFBA.anchor[_0xB90A[95]](0.5, 0.5);
                    _0xEFBA.position[_0xB90A[95]](0, 0);
                    var _0xEF56 = new GameObject(_0xEED9.gameObject.game, _0xB90A[404] + _0xEF88.tags[1]);
                    _0xEF56.loadTexture(GameObject.getObject(_0xEFA1).getChildAt(1).texture);
                    _0xEF6F.addChild(_0xEF56);
                    _0xEF56.anchor[_0xB90A[95]](0.5, 0.5);
                    _0xEF56.position[_0xB90A[95]](_0xEFBA.x - 30, 0)
                };
                _0xEED9.createCounterItem = function(_0xEFA1, _0xEF88) {
                    var _0xEF6F = new GameObject(_0xEED9.gameObject.game, _0xEFA1 + _0xB90A[61] + _0xEF88.tags[1] + _0xB90A[61] + _0xEF88.tags[2]);
                    _0xEF88.addChild(_0xEF6F);
                    _0xEF6F.loadTexture(GameObject.getObject(_0xEFA1).texture);
                    _0xEF6F.anchor[_0xB90A[95]](0.5, 0.5);
                    _0xEF6F.position[_0xB90A[95]](-50, _0xEED9.dimension[Number(_0xEF88.tags[1]) - 1] / 2);
                    _0xEF6F.addComponent(new Components.TextLabel());
                    _0xEF6F.getComponent(Components.TextLabel).displayEvent = _0xEF88.name;
                    _0xEF6F.getComponent(Components.TextLabel).fontAndSize = _0xB90A[405];
                    _0xEF6F.getComponent(Components.TextLabel).created();
                    _0xEF6F.getComponent(Components.TextLabel).init()
                };
                _0xEED9.sellPrice = function(_0xC652) {
                    Components.DevUtils.playSound(_0xB90A[406]);
                    Components.SessionData.itemCountMap.forEach(function(_0xD255, _0xD39A) {
                        var _0xEA42 = _0xD39A.split(_0xB90A[61]);
                        if (_0xEA42[1] == _0xC652.tags[1] && _0xEA42[2] == _0xC652.tags[2]) {
                            if (Components.SessionData.itemCountMap[_0xB90A[8]](_0xD39A) == 1) {
                                trace(_0xEED9.sellButtonName + _0xB90A[61] + _0xC652.tags[1] + _0xB90A[61] + _0xC652.tags[2], _0xB90A[407]);
                                return
                            } else {
                                Components.SessionData.itemCountMap[_0xB90A[95]](_0xD39A, _0xD255 - 1);
                                _0xEED9.events.throwEvent(_0xD39A, Util.Util.createEventData([
                                    [Components.TextLabel.TEXT, Components.SessionData.itemCountMap[_0xB90A[8]](_0xD39A)]
                                ]));
                                trace(Components.SessionData.itemCountMap, _0xB90A[408]);
                                Components.Storage.saveData(_0xB90A[409], Components.SessionData.itemCountMap, true);
                                for (var _0xC6E8 in Components.Storage.getData(_0xB90A[409], true)) {
                                    Components.SessionData.itemCountMap[_0xB90A[95]](_0xC6E8, Components.Storage.getData(_0xB90A[409], true))
                                };
                                trace(Components.SessionData.itemCountMap);
                                var _0xCE6D = _0xD39A.split(_0xB90A[61]);
                                if (Components.SessionData.DUPLICATE_ITEMS.indexOf(_0xB90A[410] + _0xCE6D[1] + _0xB90A[61] + _0xCE6D[2] + _0xB90A[61] + _0xCE6D[3] + _0xB90A[61] + _0xCE6D[4]) != -1) {
                                    Components.SessionData.DUPLICATE_ITEMS.splice(Components.SessionData.DUPLICATE_ITEMS.indexOf(_0xB90A[410] + _0xCE6D[1] + _0xB90A[61] + _0xCE6D[2] + _0xB90A[61] + _0xCE6D[3] + _0xB90A[61] + _0xCE6D[4]), 1);
                                    Components.Storage.saveData(_0xB90A[411], Components.SessionData.DUPLICATE_ITEMS, true)
                                };
                                trace(Components.SessionData.UNLOCKED_ITEMS, _0xB90A[412], Components.SessionData.DUPLICATE_ITEMS);
                                var _0xEFD3 = _0xC652.tags[1];
                                if (_0xEFD3 == _0xB90A[184] || _0xEFD3 == _0xB90A[198]) {
                                    _0xEED9.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                        [Components.SessionData.AMOUNT, _0xEED9.duplicateItemPrice[0]]
                                    ]))
                                } else {
                                    if (_0xEFD3 == _0xB90A[212]) {
                                        _0xEED9.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                            [Components.SessionData.AMOUNT, _0xEED9.duplicateItemPrice[1]]
                                        ]))
                                    } else {
                                        if (_0xEFD3 == _0xB90A[413]) {
                                            _0xEED9.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                                [Components.SessionData.AMOUNT, _0xEED9.duplicateItemPrice[2]]
                                            ]))
                                        } else {
                                            if (_0xEFD3 == _0xB90A[414]) {
                                                _0xEED9.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                                    [Components.SessionData.AMOUNT, _0xEED9.duplicateItemPrice[3]]
                                                ]))
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    })
                };
                _0xEED9.countItems = function(_0xF005) {
                    var _0xDA3E = 1;
                    for (var _0xEFEC = 0; _0xEFEC < Components.SessionData.DUPLICATE_ITEMS.length; _0xEFEC++) {
                        var _0xCE22 = Components.SessionData.DUPLICATE_ITEMS[_0xEFEC];
                        var _0xCE6D = _0xCE22.split(_0xB90A[61]);
                        if (_0xF005 == _0xB90A[415] + _0xCE6D[1] + _0xB90A[61] + _0xCE6D[2] + _0xB90A[61] + _0xCE6D[3] + _0xB90A[61] + _0xCE6D[4]) {
                            _0xDA3E++
                        }
                    };
                    Components.SessionData.itemCountMap[_0xB90A[95]](_0xF005, _0xDA3E)
                };
                _0xEED9.displayItemAmount = function(_0xC652) {
                    Components.SessionData.itemCountMap.forEach(function(_0xD255, _0xD39A) {
                        var _0xEA42 = _0xD39A.split(_0xB90A[61]);
                        if (_0xEA42[1] == _0xC652.tags[1] && _0xEA42[2] == _0xC652.tags[2]) {
                            var _0xF01E = _0xD255;
                            _0xEED9.events.throwEvent(_0xD39A, Util.Util.createEventData([
                                [Components.TextLabel.TEXT, _0xF01E]
                            ]));
                            if (_0xF01E < 2) {
                                GameObject.getObject(_0xEED9.sellButtonName + _0xB90A[61] + _0xC652.tags[1] + _0xB90A[61] + _0xC652.tags[2]).disableInput()
                            }
                        }
                    })
                };
                return _0xEED9
            }
            _0xB987(_0xEEA7, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(_0xB90A[31], this.changeButtonName)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initObjects();
                this.events.addEventListener(_0xB90A[416], function() {
                    console.log("88888888888888888888888888888888888888")
                    Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                Components.Storage.saveData(_0xB90A[409], Components.SessionData.itemCountMap, true);
                for (var _0xC6E8 in Components.Storage.getData(_0xB90A[409], true)) {
                    Components.SessionData.itemCountMap[_0xB90A[95]](_0xC6E8, Components.Storage.getData(_0xB90A[409], true))
                };
                trace(Components.SessionData.itemCountMap)
            })]);
            return _0xEEA7
        }(Scene.Component);
        Components.InventoryManager = _0xEEA7
    }

    function _0xBC75(Components) {
        var _0xF037 = function(_0xF050) {
            _0xBA1D(_0xF037, _0xF050);

            function _0xF037() {
                var _0xF069;
                _0xB955(this, _0xF037);
                _0xF069 = _0xB9A0(this, _getPrototypeOf(_0xF037).apply(this, arguments));
                _0xF069.allItems = [];
                _0xF069.functionCallCount = 1;
                _0xF069.rndArray = [];
                _0xF069.allDolls = [];
                _0xF069.initObjects = function() {
                    _0xF069.allItems = GameObject.getObjectsByTag(_0xF069.itemTag);
                    _0xF069.allItems.forEach(function(_0xCE22) {
                        if (_0xCE22.tags[4] <= Components.SessionData.WORLD_ITEMS.toString() && _0xF037.itemsToWin.indexOf(_0xCE22.name) == -1) {
                            _0xF037.itemsToWin.push(_0xCE22.name)
                        };
                        _0xCE22.alpha = 0
                    })
                };
                _0xF069.initEvents = function() {
                    _0xF069.events.addEventListener(Components.SessionData.BALL_ANIM_END_EVENT, function() {
                        _0xF069.giveRandomItem(Components.StoreBallManager.ballNumber)
                    })
                };
                _0xF069.checkItems = function() {
                    for (var _0xF082 = 0; _0xF082 < _0xF069.allDolls.length; _0xF082++) {
                        var _0xCE22 = _0xF069.allDolls[_0xF082];
                        var _0xEA10 = 0;
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xCE22.children.length; _0xC9D6++) {
                            var _0xEA29 = _0xCE22.children[_0xC9D6].name;
                            if (Components.SessionData.UNLOCKED_ITEMS.indexOf(_0xEA29) != -1) {
                                _0xEA10++
                            };
                            trace(_0xEA29, _0xB90A[417], _0xEA10)
                        };
                        if (_0xEA10 >= _0xCE22.children.length) {
                            var _0xEA42 = _0xCE22.getChildAt(0).name.split(_0xB90A[61]);
                            var _0xEA5B = _0xF069.itemTag + _0xB90A[61] + _0xB90A[142] + _0xB90A[61] + _0xEA42[2] + _0xB90A[61] + _0xEA42[3] + _0xB90A[61] + _0xEA42[4];
                            trace(_0xEA5B, _0xB90A[407]);
                            Components.SessionData.UNLOCKED_ITEMS.push(_0xEA5B)
                        }
                    }
                };
                _0xF069.giveRandomItem = function(_0xF09B) {
                    var _0xF0CD = Math.floor(Math.random() * _0xF037.itemsToWin.length);
                    while (_0xF069.rndArray.length < _0xF09B) {
                        _0xF069.rndArray.push(_0xF0CD);
                        var _0xF0B4 = GameObject.getObject(_0xF037.itemsToWin[_0xF0CD]);
                        if (_0xF0B4 != null && Components.SessionData.UNLOCKED_ITEMS.indexOf(_0xF0B4.name) == -1) {
                            Components.SessionData.UNLOCKED_ITEMS.push(_0xF0B4.name)
                        } else {
                            if (_0xF0B4 != null) {
                                Components.SessionData.DUPLICATE_ITEMS.push(_0xF0B4.name)
                            }
                        };
                        _0xF037.itemsToShow.push(_0xF0B4);
                        while (_0xF069.rndArray.indexOf(_0xF0CD) != -1) {
                            _0xF0CD = Math.floor(Math.random() * _0xF037.itemsToWin.length)
                        }
                    };
                    trace(Components.SessionData.UNLOCKED_ITEMS, _0xB90A[418], _0xF037.itemsToShow);
                    Components.Storage.saveData(_0xB90A[111], Components.SessionData.UNLOCKED_ITEMS, true);
                    Components.Storage.saveData(_0xB90A[411], Components.SessionData.DUPLICATE_ITEMS, true);
                    _0xF069.rndArray = [];
                    _0xF069.showItem()
                };
                _0xF069.showItem = function() {
                    if (_0xF069.functionCallCount - 1 < _0xF037.itemsToShow.length) {
                        Components.DevUtils.playSound(_0xB90A[365]);
                        _0xF069.itemElement = _0xF037.itemsToShow[_0xF069.functionCallCount - 1];
                        Components.Tweens.create(_0xF069.itemElement).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                        _0xF069.functionCallCount++;
                        if (_0xF069.itemElement != null) {
                            trace(_0xF069.itemElement, _0xB90A[419]);
                            var _0xEBEB = GameObject.getObject(Components.StoreBallManager.globalSymbolTag + _0xB90A[61] + _0xF069.itemElement.tags[3]);
                            _0xEBEB.alpha = 1;
                            _0xF069.endEvent = _0xEBEB.getComponent(Components.AnimationScheduler).endEvent;
                            _0xF069.events.addEventListener(_0xF069.endEvent, _0xF069.handleShowItem);
                            _0xF069.events.throwEvent(Components.StoreBallManager.globalSymbolTag + _0xF069.itemElement.tags[3])
                        }
                    } else {
                        _0xF069.functionCallCount = 1;
                        _0xF037.itemsToShow = [];
                        if (Components.DevUtils.getCurrentUnitName() == _0xB90A[420]) {
                            if (Components.SessionData.FIRST_BUY) {
                                Components.StoreBallManager.buyBallButtons.forEach(function(_0xCE22) {
                                    _0xCE22.alpha = 1;
                                    _0xCE22.enableInput();
                                    Components.StoreBallManager.free.alpha = 0;
                                    Components.StoreBallManager.buyB.alpha = 1
                                })
                            }
                        }
                    }
                };
                _0xF069.handleShowItem = function() {
                    if (_0xF069.itemElement) {
                        _0xF069.itemElement.alpha = 0;
                        _0xF069.itemElement = null
                    };
                    _0xF069.events.removeEventListener(_0xF069.endEvent, _0xF069.handleShowItem);
                    _0xF069.showItem()
                };
                return _0xF069
            }
            _0xB987(_0xF037, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initObjects();
                this.initEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF037
        }(Scene.Component);
        _0xF037.receivedItems = [];
        _0xF037.itemsToWin = [];
        _0xF037.itemsToShow = [];
        Components.ItemManager = _0xF037
    }

    function _0xBC8E(Components) {
        var _0xF0E6 = function(_0xF0FF) {
            _0xBA1D(_0xF0E6, _0xF0FF);

            function _0xF0E6() {
                var _0xF17C;
                _0xB955(this, _0xF0E6);
                _0xF17C = _0xB9A0(this, _getPrototypeOf(_0xF0E6).apply(this, arguments));
                _0xF17C.allStarAnimation = [];
                _0xF17C.allLevelButtons = [];
                _0xF17C.initObjects = function() {



                    var _0xF195 = Components.DevUtils.getCurrentUnitName().split(_0xB90A[61]);
                    Components.SessionData.CURRENT_WORLD = parseInt(_0xF195[2]);
                    _0xF17C.allStarAnimation = GameObject.getObjectsByTag(_0xF17C.starAnimationTag);
                    _0xF17C.allLevelButtons = GameObject.getObjectsByTag(_0xF17C.lvlButtontag, true, 1, 1);
                    _0xF17C.bigBoss.alpha = 0;
                    _0xF17C.bigBoss.disableInput();
                    _0xF17C.potionUnitButton = GameObject.getObject(_0xB90A[421]);
                    _0xF17C.bgTutorialPotion = GameObject.getObject(_0xB90A[422]);
                    _0xF17C.potionBtnForAnim = GameObject.getObject(_0xB90A[423]);
                    _0xF17C.storeUnitButton = GameObject.getObject(_0xB90A[424]);
                    _0xF17C.potionUnitButton.alpha = 0;
                    _0xF17C.potionUnitButton.disableInput();
                    _0xF17C.bgTutorialPotion.alpha = 0;
                    _0xF17C.bgTutorialPotion.disableInput();
                    _0xF17C.potionBtnForAnim.alpha = 0;
                    _0xF17C.potionBtnForAnim.scale[_0xB90A[95]](0, 0);
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[425]) {
                        _0xF17C.endGameAnimation = GameObject.getObject(_0xB90A[426], 1, 0);
                        _0xF17C.endGameAnimation.disableInput()
                    };
                    if (Components.SessionData.FIRST_POTION) {
                        _0xF17C.potionUnitButton.alpha = 1;
                        _0xF17C.potionUnitButton.enableInput()
                    };
                    if (Components.SessionData.COIN_BALANCE >= 1800 || Components.SessionData.FIRST_BUY) {
                        _0xF17C.events.throwEvent(_0xB90A[427])
                    } else {
                        _0xF17C.storeUnitButton.visible = false;
                        _0xF17C.events.addEventListener(Components.SessionData.ADD_COINS, _0xF17C.checkIfShopVisible);
                        _0xF17C.storeUnitButton.addButtonPressedCallback(_0xF17C.onShopFirstClick)
                    }
                };
                _0xF17C.onShopFirstClick = function() {
                    Components.Tweens.create(_0xF17C.bgTutorialPotion).to(_0xC639(_0xB90A[45], 0), 400, null, true).onComplete.addOnce(function() {
                        _0xF17C.bgTutorialPotion.disableInput()
                    })
                };
                _0xF17C.checkIfShopVisible = function() {
                    _0xF17C.storeUnitButton.visible = true;
                    _0xF17C.events.throwEvent(_0xB90A[427]);
                    _0xF17C.bgTutorialPotion.visible = true;
                    _0xF17C.bgTutorialPotion.alpha = 1;
                    _0xF17C.bgTutorialPotion.enableInput();
                    Components.Tweens.create(_0xF17C.bgTutorialPotion).to(_0xC639(_0xB90A[45], 1), 400, null, true)
                };
                _0xF17C.initEvents = function() {
                    _0xF17C.handleEnable();
                    _0xF17C.allLevelButtons.forEach(function(_0xCE22) {
                        _0xCE22.addButtonPressedCallback(_0xF17C.handleUnlock);
                        _0xCE22.disableInput()
                    });
                    _0xF17C.events.addEventListener(Components.SessionData.ADD_LIFE, function() {
                        console.log(_0xB90A[428]);
                        _0xF17C.handleEnable();
                        if (_0xF17C.miniBoss.alpha != 0 && (!_0xF17C.getBossLock(_0xF17C.miniBoss).visible || _0xF17C.getBossLock(_0xF17C.miniBoss).alpha == 0 || _0xF17C.getBossLock(_0xF17C.miniBoss).scale.x == 0)) {
                            _0xF17C.miniBoss.enableInput()
                        };
                        if (_0xF17C.bigBoss.alpha != 0 && (!_0xF17C.getBossLock(_0xF17C.bigBoss).visible || _0xF17C.getBossLock(_0xF17C.bigBoss).alpha == 0 || _0xF17C.getBossLock(_0xF17C.bigBoss).scale.x == 0)) {
                            _0xF17C.bigBoss.enableInput()
                        }
                    });
                    _0xF17C.events.addEventListener(Components.SessionData.REFILL_LIVES, function() {
                        console.log(_0xB90A[428]);
                        if (_0xF17C.miniBoss.alpha != 0 && !_0xF17C.getBossLock(_0xF17C.miniBoss).visible) {
                            _0xF17C.miniBoss.enableInput()
                        };
                        if (_0xF17C.bigBoss.alpha != 0 && !_0xF17C.getBossLock(_0xF17C.bigBoss).visible) {
                            _0xF17C.bigBoss.enableInput()
                        };
                        _0xF17C.handleEnable()
                    });
                    if (_0xF0E6.currentLevel != _0xF0E6.lastClick && _0xF0E6.currentLevel <= _0xF17C.allLevelButtons.length) {
                        if (_0xF0E6.currentLevel > 0) {
                            _0xF0E6.currentLevel--;
                            trace(_0xB90A[429])
                        }
                    };
                    if (_0xF0E6.currentLevel >= 6) {
                        _0xF0E6.currentLevel--
                    } else {
                        _0xF0E6.currentLevel++
                    };
                    if (Components.SessionData.STAR_AMOUNT_MAP[(_0xF0E6.unitTag - 1).toString()]) {
                        _0xF17C.showStars()
                    };
                    trace(_0xB90A[430], _0xF0E6.currentLevel);
                    trace(_0xF0E6.currentLevel, _0xB90A[431]);
                    _0xF17C.showBossLevels();
                    if (Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[220]) != -1) {
                        Components.SessionData.GAME_FINISHED = true
                    }
                };
                _0xF17C.handleUnlock = function(_0xC652) {
                    _0xF0E6.lastClick = parseInt(_0xC652.tags[1]);
                    _0xF0E6.unitTag = parseInt(_0xC652.tags[4]);
                    _0xF17C.gameTypeTag = _0xC652.tags[2];
                    if (_0xF17C.gameTypeTag == _0xB90A[432] + Components.SessionData.CURRENT_WORLD) {
                        _0xF0E6.miniBossUnitTag = _0xF17C.gameTypeTag
                    };
                    if (Components.SessionData.UNLOCKED_LEVELS.indexOf(_0xC652.name) == -1) {
                        Components.SessionData.UNLOCKED_LEVELS.push(_0xC652.name)
                    }
                };
                _0xF17C.changeBoss = function() {
                    _0xF17C.miniBoss.disableInput();
                    _0xF17C.miniBoss.alpha = 0;
                    _0xF17C.miniBoss.visible = false;
                    Components.Tweens.create(_0xF17C.miniBoss.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 200, null, true).onComplete.addOnce(function() {
                        _0xF17C.bigBoss.alpha = 1;
                        _0xF17C.bigBoss.visible = true;
                        Components.Tweens.create(_0xF17C.bigBoss.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 200, null, true)
                    })
                };
                _0xF17C.handleEnable = function() {
                    for (var _0xF1AE = 0; _0xF1AE < Components.SessionData.UNLOCKED_LEVELS.length; _0xF1AE++) {
                        var _0xCE22 = Components.SessionData.UNLOCKED_LEVELS[_0xF1AE];
                        trace(_0xCE22, _0xB90A[433]);
                        var _0xF1C7 = _0xCE22.split(_0xB90A[61]);
                        if (_0xF1C7[3] == Components.SessionData.CURRENT_WORLD.toString() && Components.SessionData.UNLOCKED_LEVELS.length != -1) {
                            GameObject.getObject(_0xCE22).enableInput();
                            GameObject.getObject(_0xB90A[434] + _0xF1C7[1]).visible = false
                        }
                    }
                };
                _0xF17C.enableLevelAfterBigBoss = function() {
                    _0xF17C.checkMiniBossStatus();
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[435]) {
                        _0xF17C.allLevelButtons[_0xF0E6.currentLevel - 1].enableInput();
                        _0xF17C.events.throwEvent(_0xB90A[436] + _0xF0E6.currentLevel)
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[437] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[176]) != -1) {
                        if (_0xF0E6.once) {
                            _0xF0E6.currentLevel = 1;
                            _0xF0E6.once = false;
                            Components.SessionData.WORLD_ITEMS = 2;
                            trace(_0xB90A[438])
                        };
                        _0xF17C.allLevelButtons[_0xF0E6.currentLevel - 1].enableInput();
                        _0xF17C.events.throwEvent(_0xB90A[436] + _0xF0E6.currentLevel)
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[439] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[191]) != -1) {
                        if (_0xF0E6.once) {
                            _0xF0E6.currentLevel = 1;
                            _0xF0E6.once = false;
                            Components.SessionData.WORLD_ITEMS = 3
                        };
                        _0xF17C.allLevelButtons[_0xF0E6.currentLevel - 1].enableInput();
                        _0xF17C.events.throwEvent(_0xB90A[436] + _0xF0E6.currentLevel)
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[425] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[205]) != -1) {
                        if (_0xF0E6.once) {
                            _0xF0E6.currentLevel = 1;
                            _0xF0E6.once = false;
                            Components.SessionData.WORLD_ITEMS = 4
                        };
                        _0xF17C.allLevelButtons[_0xF0E6.currentLevel - 1].enableInput();
                        _0xF17C.events.throwEvent(_0xB90A[436] + _0xF0E6.currentLevel)
                    }
                };
                _0xF17C.checkMiniBossStatus = function() {
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[435] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[167]) != -1) {
                        _0xF0E6.miniBossUnitTag = _0xB90A[167]
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[437] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[185]) != -1) {
                        _0xF0E6.miniBossUnitTag = _0xB90A[185]
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[439] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[199]) != -1) {
                        _0xF0E6.miniBossUnitTag = _0xB90A[199]
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[425] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[213]) != -1) {
                        _0xF0E6.miniBossUnitTag = _0xB90A[213]
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[435] && _0xF0E6.miniBossUnitTag == _0xB90A[167] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[167]) == -1) {
                        _0xF17C.miniBoss.visible = true;
                        _0xF17C.miniBoss.alpha = 1;
                        _0xF17C.miniBoss.enableInput();
                        GameObject.getObject(_0xB90A[440]).visible = false;
                        _0xF0E6.currentLevel = 3;
                        _0xF0E6.lastClick = 3;
                        _0xF17C.bigBoss.visible = false
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[437] && _0xF0E6.miniBossUnitTag == _0xB90A[185] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[185]) == -1) {
                        _0xF17C.miniBoss.visible = true;
                        _0xF17C.miniBoss.alpha = 1;
                        _0xF17C.miniBoss.enableInput();
                        GameObject.getObject(_0xB90A[440]).visible = false;
                        _0xF17C.bigBoss.visible = false
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[439] && _0xF0E6.miniBossUnitTag == _0xB90A[199] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[199]) == -1) {
                        _0xF17C.miniBoss.visible = true;
                        _0xF17C.miniBoss.alpha = 1;
                        _0xF17C.miniBoss.enableInput();
                        GameObject.getObject(_0xB90A[440]).visible = false;
                        _0xF17C.bigBoss.visible = false
                    };
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[425] && _0xF0E6.miniBossUnitTag == _0xB90A[213] && Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[213]) == -1) {
                        _0xF17C.miniBoss.visible = true;
                        _0xF17C.miniBoss.alpha = 1;
                        _0xF17C.miniBoss.enableInput();
                        GameObject.getObject(_0xB90A[440]).visible = false;
                        _0xF17C.bigBoss.visible = false
                    }
                };
                _0xF17C.showBossLevels = function() {
                    if (Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[176]) != -1 && Components.DevUtils.getCurrentUnitName() == _0xB90A[435]) {
                        _0xF17C.miniBoss.visible = false;
                        _0xF17C.bigBoss.visible = true;
                        _0xF17C.bigBoss.alpha = 1;
                        GameObject.getObject(_0xB90A[441]).visible = false;
                        _0xF17C.bigBoss.enableInput();
                        trace(_0xF0E6.miniBossUnitTag, _0xB90A[442])
                    };
                    if (Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[191]) != -1 && Components.DevUtils.getCurrentUnitName() == _0xB90A[437]) {
                        _0xF0E6.miniBossUnitTag = _0xB90A[185];
                        _0xF17C.miniBoss.visible = false;
                        _0xF17C.bigBoss.alpha = 1;
                        _0xF17C.bigBoss.visible = true;
                        GameObject.getObject(_0xB90A[441]).visible = false;
                        _0xF17C.bigBoss.enableInput()
                    };
                    if (Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[205]) != -1 && Components.DevUtils.getCurrentUnitName() == _0xB90A[439]) {
                        _0xF0E6.miniBossUnitTag = _0xB90A[199];
                        _0xF17C.bigBoss.visible = true;
                        _0xF17C.miniBoss.visible = false;
                        _0xF17C.bigBoss.alpha = 1;
                        GameObject.getObject(_0xB90A[441]).visible = false;
                        _0xF17C.bigBoss.enableInput()
                    };
                    if (Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[220]) != -1 && Components.DevUtils.getCurrentUnitName() == _0xB90A[425]) {
                        _0xF0E6.miniBossUnitTag = _0xB90A[213];
                        _0xF17C.miniBoss.visible = false;
                        _0xF17C.bigBoss.alpha = 1;
                        _0xF17C.bigBoss.visible = true;
                        GameObject.getObject(_0xB90A[441]).visible = false;
                        _0xF17C.bigBoss.enableInput()
                    };
                    _0xF17C.checkMiniBossStatus()
                };
                _0xF17C.showStars = function() {
                    var _0xF1C7 = Object.getOwnPropertyNames(Components.SessionData.STAR_AMOUNT_MAP);
                    _0xF1C7.forEach(function(_0xCE22) {
                        trace(_0xCE22, _0xB90A[443], _0xF1C7);
                        for (var _0xF1E0 = 1; _0xF1E0 < Number(Components.SessionData.STAR_AMOUNT_MAP[_0xCE22]) + 1; _0xF1E0++) {
                            _0xF17C.events.throwEvent(_0xF17C.starAnimationTag + _0xB90A[61] + _0xCE22 + _0xB90A[61] + _0xF1E0);
                            trace(Components.SessionData.STAR_AMOUNT_MAP[_0xCE22], _0xB90A[444], _0xCE22)
                        }
                    })
                };
                _0xF17C.saveProgress = function() {
                    Components.Storage.saveData(_0xB90A[445], Components.SessionData.UNLOCKED_LEVELS, true);
                    Components.Storage.saveData(_0xB90A[446], Components.SessionData.CURRENT_WORLD, false);
                    Components.Storage.saveData(_0xB90A[447], _0xF0E6.currentLevel, false);
                    trace(_0xB90A[448]);
                    Components.Storage.saveData(_0xB90A[449], Components.SessionData.STAR_AMOUNT_MAP, true);
                    Components.Storage.saveData(_0xB90A[450], Components.SessionData.WORLD_ITEMS, false);
                    Components.Storage.saveData(_0xB90A[451], Components.SessionData.FIRST_POTION, false);
                    Components.Storage.saveData(_0xB90A[452], Components.SessionData.GAME_FINISHED, false)
                };
                _0xF17C.showEndGameAnimation = function() {
                    if (Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[220]) != -1 && Components.DevUtils.getCurrentUnitName() == _0xB90A[425]) {
                        _0xF17C.endGameAnimation.alpha = 1;
                        _0xF17C.endGameAnimation.enableInput();
                        _0xF17C.events.throwEvent(_0xB90A[453]);
                        _0xF17C.gameObject.game.time.events.add(1800, function() {
                            _0xF17C.events.throwEvent(_0xB90A[454])
                        }, _0xB9B9(_0xF17C));
                        _0xF17C.gameObject.game.time.events.add(5000, function() {
                            _0xF17C.events.throwEvent(_0xB90A[455])
                        }, _0xB9B9(_0xF17C));
                        _0xF17C.events.addEventListener(_0xB90A[455], function() {
                            Components.Tweens.create(_0xF17C.endGameAnimation).to(_0xC639(_0xB90A[45], 0), 400, null, true);
                            _0xF17C.endGameAnimation.disableInput()
                        });
                        Components.SessionData.GAME_FINISHED = false
                    }
                };
                _0xF17C.showPotionUnit = function() {
                    if (Components.SessionData.PAPYRUS_COUNTER == 2 && Components.PotionController.prizeArray[0].done == false) {
                        _0xF17C.events.throwEvent(_0xB90A[456])
                    };
                    if (Components.SessionData.PAPYRUS_COUNTER == 2 && !Components.SessionData.FIRST_POTION) {
                        Components.SessionData.FIRST_POTION = true;
                        _0xF17C.bgTutorialPotion.alpha = 1;
                        _0xF17C.bgTutorialPotion.enableInput();
                        _0xF17C.potionBtnForAnim.alpha = 1;
                        Components.Tweens.create(_0xF17C.potionBtnForAnim).to(_0xC639(_0xB90A[46], 360), 1500, Phaser.Easing.Linear.None, true);
                        Components.Tweens.create(_0xF17C.potionBtnForAnim.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 2000, Phaser.Easing.Linear.None, true).onComplete.addOnce(function() {
                            Components.Tweens.create(_0xF17C.potionBtnForAnim).to(_0xC639(_0xB90A[43], _0xF17C.potionUnitButton.x, _0xB90A[44], _0xF17C.potionUnitButton.y), 2000, Phaser.Easing.Linear.None, true, 2000);
                            Components.Tweens.create(_0xF17C.potionBtnForAnim).to(_0xC639(_0xB90A[46], 360), 2000, Phaser.Easing.Linear.None, true, 2000).onComplete.addOnce(function() {
                                _0xF17C.events.throwEvent(_0xB90A[456]);
                                Components.Tweens.create(_0xF17C.potionUnitButton).to(_0xC639(_0xB90A[45], 1), 300, null, true);
                                Components.Tweens.create(_0xF17C.potionBtnForAnim).to(_0xC639(_0xB90A[45], 0), 200, null, true);
                                _0xF17C.potionUnitButton.enableInput()
                            })
                        })
                    }
                };
                return _0xF17C
            }
            _0xB987(_0xF0E6, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initObjects();
                this.initEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[457], _0xB90A[5], function _0xF118(_0xF14A) {
                for (var _0xF131 = 0; _0xF131 < _0xF14A.children.length; _0xF131++) {
                    var _0xF163 = _0xF14A.children[_0xF131];
                    if (_0xF163.name.indexOf(_0xB90A[458]) != -1) {
                        return _0xF163
                    }
                };
                return null
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                trace(Components.SessionData.BOSS_DEFEATED, _0xB90A[459]);
                this.enableLevelAfterBigBoss();
                if (_0xF0E6.miniBossUnitTag == _0xB90A[432] + Components.SessionData.CURRENT_WORLD && !_0xF0E6.once) {
                    if (Components.SessionData.BOSS_DEFEATED.indexOf(_0xB90A[432] + Components.SessionData.CURRENT_WORLD) != -1) {
                        this.events.throwEvent(_0xB90A[436] + _0xF0E6.currentLevel);
                        this.enableLevelAfterBigBoss();
                        this.handleEnable();
                        this.changeBoss();
                        this.allLevelButtons[_0xF0E6.currentLevel - 1].enableInput();
                        trace(_0xB90A[460])
                    } else {
                        this.enableLevelAfterBigBoss();
                        this.handleEnable();
                        trace(_0xB90A[461])
                    }
                } else {
                    this.handleEnable();
                    trace(_0xB90A[462])
                };
                trace(Components.SessionData.STAR_AMOUNT_MAP, _0xB90A[463]);
                this.showStars();
                this.showPotionUnit();
                if (Components.SessionData.lostLives >= 5) {
                    this.events.throwEvent(Components.SessionData.SHOW_EXTRA_TIME_POPUP);
                    this.allLevelButtons.forEach(function(_0xCE22) {
                        _0xCE22.disableInput()
                    })
                };
                if (Components.SessionData.COIN_BALANCE >= 1800 && !Components.SessionData.FIRST_BUY) {
                    this.events.throwEvent(_0xB90A[427])
                };
                if (Components.SessionData.GAME_FINISHED) {
                    this.showEndGameAnimation()
                };
                this.saveProgress()
            })]);
            return _0xF0E6
        }(Scene.Component);
        _0xF0E6.currentLevel = 0;
        _0xF0E6.lastClick = 0;
        _0xF0E6.lockAnim = 0;
        _0xF0E6.unitTag = 1;
        Components.LevSelAnimManager = _0xF0E6
    }

    function _0xBCA7(Components) {
        var _0xF1F9 = function(_0xF212) {
            _0xBA1D(_0xF1F9, _0xF212);

            function _0xF1F9() {
                var _0xF22B;
                _0xB955(this, _0xF1F9);
                _0xF22B = _0xB9A0(this, _getPrototypeOf(_0xF1F9).apply(this, arguments));
                _0xF22B.checkLives = function() {
                    for (var _0xF244 = 1; _0xF244 <= Components.SessionData.lostLives; _0xF244++) {
                        GameObject.getObject(_0xF22B.lifeTag + _0xB90A[61] + _0xF244).alpha = 0
                    }
                };
                _0xF22B.loseLife = function() {
                    if (Components.SessionData.lostLives >= 4) {
                        Components.SessionData.lostLives = 5;
                        _0xF22B.events.throwEvent(Components.SessionData.NO_LIVES);
                        _0xF22B.events.throwEvent(Components.SessionData.SHOW_EXTRA_TIME_POPUP)
                    } else {
                        Components.SessionData.lostLives++
                    };
                    var _0xF25D = GameObject.getObject(_0xF22B.lifeTag + _0xB90A[61] + Components.SessionData.lostLives);
                    _0xF22B.loseLifeAnimation.x = _0xF25D.x;
                    _0xF22B.loseLifeAnimation.y = _0xF25D.y;
                    _0xF22B.events.throwEvent(Components.SessionData.LOSE_LIFE_ANIMATION);
                    _0xF25D.alpha = 0
                };
                _0xF22B.addLives = function() {
                    if (Components.SessionData.lostLives == 0) {
                        return
                    };
                    var _0xF276 = GameObject.getObject(_0xF22B.lifeTag + _0xB90A[61] + Components.SessionData.lostLives);
                    Components.Tweens.create(_0xF276).to(_0xC639(_0xB90A[45], 1), 150, null, true);
                    Components.SessionData.lostLives--;
                    _0xF22B.events.throwEvent(_0xB90A[464])
                };
                _0xF22B.refillLives = function() {
                    Components.SessionData.lostLives = 0;
                    for (var _0xF28F = 1; _0xF28F <= 5; _0xF28F++) {
                        var _0xF2A8 = GameObject.getObject(_0xF22B.lifeTag + _0xB90A[61] + _0xF28F);
                        Components.Tweens.create(_0xF2A8).to(_0xC639(_0xB90A[45], 1), 150, null, true)
                    };
                    _0xF22B.events.throwEvent(_0xB90A[464])
                };
                return _0xF22B
            }
            _0xB987(_0xF1F9, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.checkLives();
                this.events.addEventListener(Components.SessionData.LOSE_LIFE, this.loseLife);
                this.events.addEventListener(Components.SessionData.ADD_LIFE, this.addLives);
                this.events.addEventListener(Components.SessionData.REFILL_LIVES, this.refillLives)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF1F9
        }(Scene.Component);
        Components.LifeController = _0xF1F9
    }

    function _0xBCC0(Components) {
        var _0xF2C1 = function(_0xF2DA) {
            _0xBA1D(_0xF2C1, _0xF2DA);

            function _0xF2C1() {
                var _0xF2F3;
                _0xB955(this, _0xF2C1);
                _0xF2F3 = _0xB9A0(this, _getPrototypeOf(_0xF2C1).apply(this, arguments));
                _0xF2F3.isAgree = false;
                _0xF2F3.checkAgreement = function() {
                    if (!_0xF2F3.isAgree) {
                        _0xF2F3.checkObject.alpha = 1;
                        Components.SessionData.SAVE_PROGRESS = true;
                        Components.Storage.saveData(_0xB90A[465], Components.SessionData.SAVE_PROGRESS, false);
                        _0xF2F3.isAgree = true
                    } else {
                        _0xF2F3.checkObject.alpha = 0;
                        Components.SessionData.SAVE_PROGRESS = false;
                        Components.Storage.saveData(_0xB90A[465], Components.SessionData.SAVE_PROGRESS, false);
                        _0xF2F3.isAgree = false
                    }
                };
                return _0xF2F3
            }
            _0xB987(_0xF2C1, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.checkObject.alpha = 0;
                this.agreeButton.addButtonPressedCallback(this.checkAgreement)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF2C1
        }(Scene.Component);
        Components.LoginController = _0xF2C1
    }

    function _0xBCD9(Components) {
        var _0xF30C = function(_0xF325) {
            _0xBA1D(_0xF30C, _0xF325);

            function _0xF30C() {
                var _0xF33E;
                _0xB955(this, _0xF30C);
                _0xF33E = _0xB9A0(this, _getPrototypeOf(_0xF30C).apply(this, arguments));
                _0xF33E.left = false;
                _0xF33E.initMc = function() {
                    _0xF33E.realtiveY = _0xF33E.gameObject.y / Core.Main.gameHeight;
                    _0xF33E.panelSize = Components.DevUtils.getBounds(_0xF33E.gameObject)
                };
                _0xF33E.initLocalEvents = function() {
                    _0xF33E.events.addEventListener(_0xB90A[29], _0xF33E.overritePosition)
                };
                _0xF33E.overritePosition = function() {
                    if (_0xF33E.left && _0xF33E.gameObject.x != _0xF33E.panelSize.width * _0xF33E.gameObject.scale.x / 2) {
                        _0xF33E.gameObject.x = _0xF33E.panelSize.width * _0xF33E.gameObject.scale.x / 2;
                        _0xF33E.gameObject.y = Core.Main.game.canvas.height * _0xF33E.realtiveY
                    };
                    if (!_0xF33E.left && _0xF33E.gameObject.x != Core.Main.game.canvas.width - _0xF33E.panelSize.width * _0xF33E.gameObject.scale.x / 2) {
                        _0xF33E.gameObject.x = Core.Main.game.canvas.width - _0xF33E.panelSize.width * _0xF33E.gameObject.scale.x / 2;
                        _0xF33E.gameObject.y = Core.Main.game.canvas.height * _0xF33E.realtiveY
                    }
                };
                return _0xF33E
            }
            _0xB987(_0xF30C, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF30C
        }(Scene.Component);
        Components.PanelAnchor = _0xF30C
    }

    function _0xBCF2(Components) {
        var _0xF357 = function(_0xF370) {
            _0xBA1D(_0xF357, _0xF370);

            function _0xF357() {
                _0xB955(this, _0xF357);
                return _0xB9A0(this, _getPrototypeOf(_0xF357).apply(this, arguments))
            }
            _0xB987(_0xF357, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xF3A2 = Components.Storage.getData(_0xB90A[466]);
                if (_0xF3A2 === _0xB90A[467]) {
                    _0xF357.FIRST_CATALOGUE_ITEM = false
                } else {
                    if (_0xF3A2 === _0xB90A[468]) {
                        _0xF357.FIRST_CATALOGUE_ITEM = true
                    }
                };
                var _0xF3BB = Components.Storage.getData(_0xB90A[452]);
                if (_0xF3BB === _0xB90A[467]) {
                    _0xF357.GAME_FINISHED = false
                } else {
                    if (_0xF3BB === _0xB90A[468]) {
                        _0xF357.GAME_FINISHED = true
                    }
                };
                var _0xF3D4 = Components.Storage.getData(_0xB90A[451]);
                if (_0xF3D4 === _0xB90A[467]) {
                    _0xF357.FIRST_POTION = false
                } else {
                    if (_0xF3D4 === _0xB90A[468]) {
                        _0xF357.FIRST_POTION = true
                    }
                };
                _0xF357.WORLD_ITEMS = Components.Storage.getData(_0xB90A[450]) || 1;
                var _0xF1C7 = Components.Storage.getData(_0xB90A[469]);
                if (_0xF1C7 === _0xB90A[467]) {
                    _0xF357.FIRST_BUY = false
                } else {
                    if (_0xF1C7 === _0xB90A[468]) {
                        _0xF357.FIRST_BUY = true
                    }
                };
                _0xF357.SAVE_PROGRESS = Boolean(Components.Storage.getData(_0xB90A[465]));
                if (_0xF357.SAVE_PROGRESS != true && _0xF357.SAVE_PROGRESS != false) {
                    _0xF357.SAVE_PROGRESS = false
                };
                var _0xF389 = Components.Storage.getData(_0xB90A[364]);
                if (_0xF389 === _0xB90A[467]) {
                    _0xF357.FIRST_TIME_LOGIN = false
                } else {
                    if (_0xF389 === _0xB90A[468]) {
                        _0xF357.FIRST_TIME_LOGIN = true
                    }
                };
                if (_0xF357.FIRST_TIME_LOGIN != true && _0xF357.FIRST_TIME_LOGIN != false) {
                    _0xF357.FIRST_TIME_LOGIN = true
                };
                _0xF357.UNLOCKED_ITEMS = Components.Storage.getData(_0xB90A[111], true) || [];
                trace(_0xF357.UNLOCKED_ITEMS, _0xB90A[470]);
                _0xF357.DUPLICATE_ITEMS = Components.Storage.getData(_0xB90A[411], true) || [];
                trace(_0xF357.DUPLICATE_ITEMS, _0xB90A[470]);
                _0xF357.PAPYRUS_COUNTER = Number(Components.Storage.getData(_0xB90A[471])) || 0;
                _0xF357.UNLOCKED_LEVELS = Components.Storage.getData(_0xB90A[445], true) || [];
                _0xF357.BOSS_DEFEATED = Components.Storage.getData(_0xB90A[109], true) || [];
                _0xF357.CURRENT_WORLD = Number(Components.Storage.getData(_0xB90A[446])) || 1;
                Components.LevSelAnimManager.currentLevel = Number(Components.Storage.getData(_0xB90A[447])) || 1;
                _0xF357.STAR_AMOUNT_MAP = Components.Storage.getData(_0xB90A[449], true) || [];
                trace(_0xF357.STAR_AMOUNT_MAP);
                for (var _0xC6E8 in Components.Storage.getData(_0xB90A[409], true)) {
                    _0xF357.itemCountMap[_0xB90A[95]](_0xC6E8, Components.Storage.getData(_0xB90A[409], true))
                };
                trace(_0xF357.itemCountMap);
                _0xF357.COIN_BALANCE = Number(Components.Storage.getData(_0xB90A[351])) || 1500;
                this.events.addEventListener(_0xB90A[472], function() {
                    Managers.ResourceManager.atlasMap.forEach(function(_0xD39A, _0xE8FD) {
                        _0xD39A.forEach(function(_0xD02F, _0xD656) {
                            for (var _0xC6E8 = 0; _0xC6E8 < _0xD02F.length; _0xC6E8++) {
                                _0xD02F[_0xC6E8].destroy()
                            }
                        });
                        _0xD39A.clear()
                    })
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF357
        }(Scene.Component);
        _0xF357.lostLives = 0;
        _0xF357.LOSE_LIFE = _0xB90A[473];
        _0xF357.ADD_LIFE = _0xB90A[474];
        _0xF357.REFILL_LIVES = _0xB90A[475];
        _0xF357.LOSE_LIFE_ANIMATION = _0xB90A[476];
        _0xF357.NO_LIVES = _0xB90A[477];
        _0xF357.COIN_BALANCE = 1500;
        _0xF357.ADD_COINS = _0xB90A[478];
        _0xF357.REMOVE_COINS = _0xB90A[479];
        _0xF357.AMOUNT = _0xB90A[480];
        _0xF357.DISPLAY_AMOUNT = _0xB90A[481];
        _0xF357.STAR = _0xB90A[482];
        _0xF357.ONE_STAR = _0xB90A[483];
        _0xF357.TWO_STAR = _0xB90A[484];
        _0xF357.THREE_STAR = _0xB90A[485];
        _0xF357.ADD_ITEM = _0xB90A[486];
        _0xF357.ADD_DOLL = _0xB90A[487];
        _0xF357.SELL_ITEM = _0xB90A[488];
        _0xF357.UNLOCKED_ITEMS = [];
        _0xF357.DUPLICATE_ITEMS = [];
        _0xF357.ADD_PAPYRUS = _0xB90A[489];
        _0xF357.UNLOCK_PAPYRUS = _0xB90A[490];
        _0xF357.PAPYRUS_COUNTER = 0;
        _0xF357.MINIGAME_FINISHED = _0xB90A[491];
        _0xF357.REPLAY_MINIGAME = _0xB90A[492];
        _0xF357.SHOW_REWARD = _0xB90A[493];
        _0xF357.BALL_ANIM_END_EVENT = _0xB90A[494];
        _0xF357.SYMBOL_ANIM_END_EVENT = _0xB90A[495];
        _0xF357.CURRENT_WORLD = 1;
        _0xF357.FIRST_TIME_LOGIN = true;
        _0xF357.DISPLAY_ITEM_AMOUNT = _0xB90A[496];
        _0xF357.SELL_LAST_ITEM_POPUP = _0xB90A[497];
        _0xF357.itemCountMap = new Map();
        _0xF357.UNLOCKED_LEVELS = [];
        _0xF357.BOSS_DEFEATED = [];
        _0xF357.SHOW_EXTRA_TIME_POPUP = _0xB90A[498];
        _0xF357.SHOW_TRY_AGAIN_POPUP = _0xB90A[499];
        _0xF357.ENABLE_AD_BUTTON = false;
        _0xF357.FIRST_BUY = false;
        _0xF357.FIRST_POTION = false;
        _0xF357.FIRST_CATALOGUE_ITEM = false;
        _0xF357.WORLD_ITEMS = 0;
        _0xF357.GAME_FINISHED = false;
        _0xF357.SAVE_PROGRESS = false;
        Components.SessionData = _0xF357
    }

    function _0xBD0B(Components) {
        var _0xF3ED = function(_0xF406) {
            _0xBA1D(_0xF3ED, _0xF406);

            function _0xF3ED() {
                var _0xF41F;
                _0xB955(this, _0xF3ED);
                _0xF41F = _0xB9A0(this, _getPrototypeOf(_0xF3ED).apply(this, arguments));
                _0xF41F.initEvents = function() {
                    if (_0xF41F.showButton) {
                        _0xF41F.showButton.addButtonPressedCallback(_0xF41F.showPopUp)
                    };
                    _0xF41F.closeButton.addButtonPressedCallback(_0xF41F.closePopUp);
                    _0xF41F.spinBtn = GameObject.getObjectsByTag(_0xB90A[500]);
                    _0xF41F.spinBtn.forEach(function(_0xCE22) {
                        _0xCE22.visible = false;
                        _0xCE22.disableInput();
                        trace(_0xCE22, _0xB90A[501])
                    })
                };
                _0xF41F.initialStatus = function() {
                    _0xF41F.popUpBg.alpha = 0;
                    _0xF41F.popUpBg.disableInput();
                    _0xF41F.popUpBg.addComponent(new Components.BackgroundAnchor());
                    _0xF41F.popUpHolder.alpha = 0
                };
                _0xF41F.closePopUp = function() {
                    _0xF41F.events.removeEventListener(_0xB90A[502], _0xF41F.closePopUp, true);
                    _0xF41F.showButton.enableInput();
                    _0xF41F.events.throwEvent(_0xB90A[503]);
                    Components.Tweens.create(_0xF41F.popUpHolder).to(_0xC639(_0xB90A[45], 0), 300, null, true).onComplete.addOnce(function() {
                        Components.Tweens.create(_0xF41F.popUpBg).to(_0xC639(_0xB90A[45], 0), 200, null, true);
                        _0xF41F.popUpBg.disableInput();
                        _0xF41F.closeButton.disableInput()
                    })
                };
                _0xF41F.showPopUp = function() {
                    _0xF41F.events.throwEvent(_0xB90A[502]);
                    _0xF41F.events.throwEvent(_0xB90A[504]);
                    _0xF41F.showButton.disableInput();
                    Components.Tweens.create(_0xF41F.popUpBg).to(_0xC639(_0xB90A[45], 1), 200, null, true).onComplete.addOnce(function() {
                        Components.Tweens.create(_0xF41F.popUpHolder).to(_0xC639(_0xB90A[45], 1), 300, null, true);
                        _0xF41F.popUpBg.enableInput();
                        _0xF41F.closeButton.enableInput();
                        _0xF41F.events.addEventListener(_0xB90A[502], _0xF41F.closePopUp, true);
                        _0xF41F.events.throwEvent(_0xB90A[505])
                    })
                };
                return _0xF41F
            }
            _0xB987(_0xF3ED, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initialStatus();
                this.initEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF3ED
        }(Scene.Component);
        Components.ShowPopUp = _0xF3ED
    }

    function _0xBD24(Components) {
        var _0xF438 = function(_0xF451) {
            _0xBA1D(_0xF438, _0xF451);

            function _0xF438() {
                var _0xF483;
                _0xB955(this, _0xF438);
                _0xF483 = _0xB9A0(this, _getPrototypeOf(_0xF438).apply(this, arguments));
                _0xF483.currentAngle = 0;
                _0xF483.rndElem = 0;
                _0xF483.once = true;
                _0xF483.initEvents = function() {
                    if (_0xF483.once) {
                        Phaser.ArrayUtils.shuffle(_0xF438.tempArray);
                        _0xF483.once = false
                    };
                    _0xF483.spinButtonEn.addButtonPressedCallback(_0xF483.spinWheel);
                    _0xF483.spinButtonRu.addButtonPressedCallback(_0xF483.spinWheel);
                    _0xF483.adButton.addButtonPressedCallback(_0xF483.manageAdButton);
                    var _0xEEF2 = GameObject.getObjectsByTag(_0xB90A[506]);
                    _0xEEF2.forEach(function(_0xCE22) {
                        _0xCE22.alpha = 0
                    });
                    _0xF483.adButton.visible = false;
                    _0xF483.timerCont.alpha = 0;
                    _0xF483.events.addEventListener(_0xB90A[505], function() {
                        if (Components.GameTimer.instance.getTimeLeft(Components.TimerType.spin) <= 0) {
                            _0xF438.spinCounter = 0
                        };
                        if (_0xF438.spinCounter == 1) {
                            _0xF483.spinButtonEn.disableInput();
                            _0xF483.spinButtonRu.disableInput();
                            _0xF483.adButton.visible = true;
                            _0xF483.adButton.enableInput();
                            _0xF483.animateAdButton()
                        };
                        if (_0xF438.spinCounter == 0) {
                            _0xF483.spinButtonEn.alpha = 1;
                            _0xF483.spinButtonRu.alpha = 1;
                            _0xF483.spinButtonEn.enableInput();
                            _0xF483.spinButtonRu.enableInput();
                            _0xF483.adButton.disableInput()
                        };
                        if (_0xF438.spinCounter >= 2) {
                            _0xF483.spinButtonEn.disableInput();
                            _0xF483.spinButtonRu.disableInput();
                            _0xF483.spinButtonEn.alpha = 0;
                            _0xF483.spinButtonRu.alpha = 0
                        };
                        if (_0xF483.totalTime > 0) {
                            Components.GameTimer.instance.addOnComplete(Components.TimerType.spin, _0xF483.onComplete);
                            Components.GameTimer.instance.addOnUpdate(Components.TimerType.spin, _0xF483.handleTimer);
                            _0xF483.timerCont.alpha = 1;
                            _0xF483.spinButtonEn.alpha = 0;
                            _0xF483.spinButtonRu.alpha = 0;
                            _0xF483.spinButtonEn.disableInput();
                            _0xF483.spinButtonRu.disableInput()
                        } else {
                            _0xF483.spinButtonEn.alpha = 1;
                            _0xF483.spinButtonRu.alpha = 1;
                            _0xF483.spinButtonEn.enableInput();
                            _0xF483.spinButtonRu.enableInput()
                        }
                    });
                    _0xF483.events.addEventListener(_0xB90A[503], function() {
                        _0xF483.spinButtonEn.disableInput();
                        _0xF483.spinButtonRu.disableInput();
                        _0xF483.adButton.disableInput()
                    });
                    _0xF483.spinButtonEn.disableInput();
                    _0xF483.spinButtonRu.disableInput();
                    _0xF483.adButton.disableInput();
                    _0xF483.totalTime = Components.GameTimer.instance.getTimeLeft(Components.TimerType.spin);
                    if (_0xF483.totalTime > 0) {
                        Components.GameTimer.instance.addOnComplete(Components.TimerType.spin, _0xF483.onComplete);
                        Components.GameTimer.instance.addOnUpdate(Components.TimerType.spin, _0xF483.handleTimer);
                        _0xF483.timerCont.alpha = 1;
                        _0xF483.spinButtonEn.alpha = 0;
                        _0xF483.spinButtonRu.alpha = 0;
                        _0xF483.spinButtonEn.disableInput();
                        _0xF483.spinButtonRu.disableInput()
                    }
                };
                _0xF483.enableAfterTimer = function() {
                    _0xF438.timerDone = true
                };
                _0xF483.manageTimer = function() {
                    _0xF483.timerCont.alpha = 1;
                    RTRAnalyticsEvent(_0xB90A[507], _0xB90A[168], _0xB90A[508]);
                    Components.GameTimer.instance.addOnComplete(Components.TimerType.spin, _0xF483.onComplete);
                    Components.GameTimer.instance.addOnUpdate(Components.TimerType.spin, _0xF483.handleTimer);
                    Components.GameTimer.instance.resetTimeAt(Components.TimerType.spin, 120, true)
                };
                _0xF483.manageAdButton = function() {
                    _0xF438.timerDone = false;
                    _0xF483.spinWheel();
                    _0xF483.adButton.visible = false;
                    _0xF483.spinButtonEn.alpha = 0;
                    _0xF483.spinButtonRu.alpha = 0
                };
                _0xF483.animateAdButton = function() {
                    Components.Tweens.create(_0xF483.adButton).to(_0xC639(_0xB90A[46], 10), 100, Phaser.Easing.Bounce.In, true, 1500, 3, true).onComplete.addOnce(function() {
                        _0xF483.animateAdButton()
                    })
                };
                _0xF483.spinWheel = function() {
                    Components.DevUtils.playSound(_0xB90A[509]);
                    _0xF483.spinButtonEn.disableInput();
                    _0xF483.spinButtonRu.disableInput();
                    Phaser.ArrayUtils.shuffle(_0xF438.probabilityArray);
                    _0xF483.rndElem = Math.random() * 100;
                    _0xF483.randomProbabilities();
                    _0xF483.currentAngle = _0xF438.probabilityArray.indexOf(_0xF483.rndElem);
                    var _0xF49C = _0xF438.spinAngles[_0xF483.currentAngle];
                    Components.Tweens.create(_0xF483.spinArrow, true).to(_0xC639(_0xB90A[46], -15), 100, null, true, 0, 10, true);
                    Components.Tweens.create(_0xF483.wheel).to(_0xC639(_0xB90A[46], 720 + _0xF49C), 3000, Phaser.Easing.Circular.Out, true).onComplete.addOnce(function() {
                        _0xF483.events.throwEvent(_0xB90A[510] + _0xF483.currentAngle);
                        _0xF438.spinCounter++;
                        _0xF483.handleAnimation();
                        _0xF483.prizeEvents(_0xF483.currentAngle);
                        _0xF483.spinButtonEn.disableInput();
                        _0xF483.spinButtonRu.disableInput();
                        trace(_0xF483.currentAngle, _0xF438.spinCounter)
                    })
                };
                _0xF483.handleAnimation = function() {
                    var _0xF4B5 = GameObject.getObject(_0xB90A[511] + _0xF483.currentAngle);
                    _0xF4B5.alpha = 1;
                    _0xF483.events.addEventListener(_0xB90A[512], function() {
                        _0xF4B5.alpha = 0
                    });
                    if (_0xF438.spinCounter == 1) {
                        _0xF483.adButton.visible = true;
                        _0xF483.adButton.enableInput();
                        _0xF483.spinButtonEn.disableInput();
                        _0xF483.spinButtonRu.disableInput();
                        _0xF483.animateAdButton();
                        RTRAnalyticsEvent(_0xB90A[507], _0xB90A[168], _0xB90A[513])
                    } else {
                        if (_0xF438.spinCounter >= 2) {
                            _0xF483.manageTimer()
                        }
                    }
                };
                _0xF483.randomProbabilities = function() {
                    for (var _0xF4CE = 0; _0xF4CE < _0xF438.probabilityArray.length; _0xF4CE++) {
                        var _0xCE22 = _0xF438.probabilityArray[_0xF4CE];
                        trace(_0xF483.rndElem, _0xB90A[514]);
                        if (_0xF483.rndElem <= _0xCE22) {
                            _0xF483.rndElem = _0xCE22;
                            return _0xF483.rndElem
                        }
                    }
                };
                _0xF483.prizeEvents = function(_0xF4E7) {
                    if (_0xF4E7 == 4) {
                        Components.DevUtils.playSound(_0xB90A[515]);
                        _0xF483.events.throwEvent(Components.SessionData.REFILL_LIVES)
                    } else {
                        if (_0xF4E7 == 3) {
                            Components.DevUtils.playSound(_0xB90A[516]);
                            _0xF483.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                [Components.SessionData.AMOUNT, 400]
                            ]))
                        } else {
                            if (_0xF4E7 == 2) {
                                Components.DevUtils.playSound(_0xB90A[516]);
                                _0xF483.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                    [Components.SessionData.AMOUNT, 1500]
                                ]))
                            } else {
                                if (_0xF4E7 == 1) {
                                    Components.DevUtils.playSound(_0xB90A[516]);
                                    _0xF483.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                        [Components.SessionData.AMOUNT, 1000]
                                    ]))
                                } else {
                                    if (_0xF4E7 == 0) {
                                        Components.DevUtils.playSound(_0xB90A[515]);
                                        _0xF483.events.throwEvent(Components.SessionData.ADD_LIFE)
                                    }
                                }
                            }
                        }
                    }
                };
                _0xF483.handleTimer = function() {
                    _0xF483.totalTime = Components.GameTimer.instance.getTimeLeft(Components.TimerType.spin);
                    _0xF483.seconds = Math.floor(_0xF483.totalTime % 60).toString();
                    _0xF483.minutes = Math.floor(_0xF483.totalTime / 60).toString();
                    if (_0xF483.minutes.length == 1) {
                        _0xF483.timeText = _0xB90A[114] + _0xF483.minutes + _0xB90A[115] + _0xF483.seconds;
                        if (_0xF483.seconds.length == 1) {
                            _0xF483.timeText = _0xF483.minutes + _0xB90A[115] + _0xB90A[114] + _0xF483.seconds
                        }
                    };
                    if (_0xF483.seconds.length == 1) {
                        _0xF483.timeText = _0xF483.minutes + _0xB90A[115] + _0xB90A[114] + _0xF483.seconds
                    };
                    if (_0xF483.minutes.length != 1 && _0xF483.seconds.length != 1) {
                        _0xF483.timeText = _0xF483.minutes + _0xB90A[115] + _0xF483.seconds
                    };
                    if (!_0xF438.timerDone && _0xF483.events) {
                        _0xF483.events.throwEvent(_0xB90A[116], Util.Util.createEventData([
                            [Components.TextLabel.TEXT, _0xF483.timeText]
                        ]))
                    }
                };
                _0xF483.onComplete = function() {
                    _0xF438.timerDone = true;
                    _0xF438.spinCounter = 0;
                    if (Components.DevUtils.getCurrentUnitName().split(_0xB90A[61])[0] == _0xB90A[354]) {
                        _0xF483.spinButtonEn.alpha = 1;
                        _0xF483.spinButtonRu.alpha = 1;
                        _0xF483.spinButtonEn.enableInput();
                        _0xF483.spinButtonRu.enableInput();
                        _0xF438.spinCounter = 0;
                        if (_0xF483.events) {
                            _0xF483.events.throwEvent(_0xB90A[517])
                        };
                        Components.GameTimer.instance.removeOnComplete(Components.TimerType.spin, _0xF483.onComplete);
                        Components.GameTimer.instance.removeOnUpdate(Components.TimerType.spin, _0xF483.handleTimer)
                    }
                };
                return _0xF483
            }
            _0xB987(_0xF438, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xF46A = this;
                this.events.addEventListener(_0xB90A[28], function() {
                    if (Components.DevUtils.getCurrentUnitName().split(_0xB90A[61])[0] == _0xB90A[354] && (Components.GameTimer.instance.getTimeLeft(Components.TimerType.spin) <= 0 || Components.DevUtils.getUnitStartTimes(Components.DevUtils.getCurrentUnitName()) == 1)) {
                        _0xF46A.spinButtonEn.alpha = 1;
                        _0xF46A.spinButtonRu.alpha = 1;
                        _0xF46A.events.throwEvent(_0xB90A[517]);
                        trace(_0xB90A[518])
                    }
                });
                this.initEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                Components.GameTimer.instance.removeOnComplete(Components.TimerType.spin, this.onComplete);
                Components.GameTimer.instance.removeOnUpdate(Components.TimerType.spin, this.handleTimer);
                _get(_getPrototypeOf(_0xF438.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF438
        }(Scene.Component);
        _0xF438.spinAngles = [35, 90, 270, 180, 220];
        _0xF438.tempArray = [35, 90, 270, 180, 220];
        _0xF438.probabilityArray = [70, 15, 40, 101, 5];
        _0xF438.spinCounter = 0;
        _0xF438.timerDone = true;
        Components.SpinWheel = _0xF438
    }

    function _0xBD3D(Components) {
        var _0xF500 = function(_0xF519) {
            _0xBA1D(_0xF500, _0xF519);

            function _0xF500() {
                var _0xF532;
                _0xB955(this, _0xF500);
                _0xF532 = _0xB9A0(this, _getPrototypeOf(_0xF500).apply(this, arguments));
                _0xF532.allAnimations = [];
                _0xF532.initObjects = function() {
                    _0xF532.allAnimations = GameObject.getObjectsByTag(_0xF532.animationTag, true, 1, 0)
                };
                _0xF532.initEvents = function() {
                    _0xF532.events.addEventListener(_0xB90A[254], function() {
                        _0xF532.initialStatus();
                        Managers.SceneManager.instance.loadUnit(Components.DevUtils.getCurrentUnitName(), true)
                    });
                    _0xF532.events.addEventListener(Components.SessionData.MINIGAME_FINISHED, _0xF532.showAnimation);
                    _0xF532.events.addEventListener(_0xB90A[110], _0xF532.finalPopUpBattle);
                    if (_0xF532.buttonReplay) {
                        _0xF532.buttonReplay.addButtonPressedCallback(function() {
                            Managers.SceneManager.instance.loadUnit(Components.DevUtils.getCurrentUnitName(), true)
                        })
                    };
                    _0xF532.events.addEventListener(_0xB90A[102], function() {
                        console.log("99999999999999999999999999999999999999999999999999999999")
                        Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                    });
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[94]) {
                        _0xF532.settings = Components.DressupBattleComponent.battleSetings[_0xB90A[8]](_0xB90A[94] + Components.LevSelAnimManager.unitTag)
                    }
                };
                _0xF532.initialStatus = function() {
                    _0xF532.finalPopUpCont.visible = false;
                    _0xF532.buttonOk.disableInput();
                    if (_0xF532.buttonReplay) {
                        _0xF532.buttonReplay.disableInput()
                    };
                    _0xF532.bgFinalPopUp.visible = false
                };
                _0xF532.finalPopUpBattle = function() {
                    _0xF532.finalPopUpCont.visible = true;
                    _0xF532.bgFinalPopUp.visible = true;
                    GameObject.getObject(_0xF532.animationTag + _0xB90A[61] + Components.LevSelAnimManager.unitTag).alpha = 1;
                    _0xF532.buttonOk.enableInput();
                    if (!_0xF532.settings.won) {
                        _0xF532.events.throwEvent(_0xB90A[519] + Components.LevSelAnimManager.unitTag)
                    } else {
                        _0xF532.events.throwEvent(_0xB90A[520]);
                        _0xF532.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                            [Components.SessionData.AMOUNT, 300]
                        ]));
                        Components.CoinManager.addCoinsStatic(300)
                    }
                };
                _0xF532.showAnimation = function(_0xCF35) {
                    Components.DevUtils.playSound(_0xB90A[107]);
                    var _0xF0CD = Math.floor(Math.random() * 3) + 1;
                    Components.StoreBallManager.ballNumber = _0xF0CD;
                    trace(_0xF0CD, _0xB90A[521]);
                    _0xF532.finalPopUpCont.visible = true;
                    _0xF532.bgFinalPopUp.visible = true;
                    var _0xCD8C = _0xCF35.getData(Components.SessionData.STAR);
                    if (_0xCD8C == _0xB90A[483]) {
                        _0xF532.allAnimations[0].alpha = 1;
                        _0xF532.events.throwEvent(_0xF532.allAnimations[0].getComponent(Components.AnimationScheduler).startEvent);
                        _0xF532.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                            [Components.SessionData.AMOUNT, 300]
                        ]));
                        Components.CoinManager.addCoinsStatic(300);
                        _0xF532.events.throwEvent(Components.SessionData.DISPLAY_AMOUNT, Util.Util.createEventData([
                            [Components.TextLabel.TEXT, Components.SessionData.COIN_BALANCE]
                        ]));
                        _0xF532.buttonOk.enableInput();
                        _0xF532.buttonReplay.enableInput();
                        Components.SessionData.STAR_AMOUNT_MAP[Components.LevSelAnimManager.unitTag.toString()] = _0xB90A[142];
                        Components.Storage.saveData(_0xB90A[449], Components.SessionData.STAR_AMOUNT_MAP, true)
                    } else {
                        if (_0xCD8C == _0xB90A[484]) {
                            _0xF532.allAnimations[1].alpha = 1;
                            _0xF532.events.throwEvent(_0xF532.allAnimations[1].getComponent(Components.AnimationScheduler).startEvent);
                            _0xF532.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                [Components.SessionData.AMOUNT, 300]
                            ]));
                            Components.CoinManager.addCoinsStatic(300);
                            _0xF532.events.throwEvent(Components.SessionData.DISPLAY_AMOUNT, Util.Util.createEventData([
                                [Components.TextLabel.TEXT, Components.SessionData.COIN_BALANCE]
                            ]));
                            _0xF532.buttonOk.enableInput();
                            _0xF532.buttonReplay.enableInput();
                            Components.SessionData.STAR_AMOUNT_MAP[Components.LevSelAnimManager.unitTag.toString()] = _0xB90A[184];
                            Components.Storage.saveData(_0xB90A[449], Components.SessionData.STAR_AMOUNT_MAP, true)
                        } else {
                            if (_0xCD8C == _0xB90A[485]) {
                                _0xF532.allAnimations[2].alpha = 1;
                                _0xF532.events.throwEvent(_0xF532.allAnimations[2].getComponent(Components.AnimationScheduler).startEvent);
                                _0xF532.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                    [Components.SessionData.AMOUNT, 300]
                                ]));
                                Components.CoinManager.addCoinsStatic(300);
                                _0xF532.events.throwEvent(Components.SessionData.DISPLAY_AMOUNT, Util.Util.createEventData([
                                    [Components.TextLabel.TEXT, Components.SessionData.COIN_BALANCE]
                                ]));
                                Components.SessionData.PAPYRUS_COUNTER++;
                                Components.Storage.saveData(_0xB90A[471], Components.SessionData.PAPYRUS_COUNTER, false);
                                _0xF532.buttonOk.enableInput();
                                _0xF532.buttonReplay.enableInput();
                                Components.SessionData.STAR_AMOUNT_MAP[Components.LevSelAnimManager.unitTag.toString()] = _0xB90A[198];
                                trace(_0xB90A[522]);
                                Components.Storage.saveData(_0xB90A[449], Components.SessionData.STAR_AMOUNT_MAP, true)
                            }
                        }
                    }
                };
                return _0xF532
            }
            _0xB987(_0xF500, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initObjects();
                this.initEvents();
                this.initialStatus()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF500
        }(Scene.Component);
        Components.StarPopUpManger = _0xF500
    }

    function _0xBD56(Components) {
        var _0xF54B = function(_0xF564) {
            _0xBA1D(_0xF54B, _0xF564);

            function _0xF54B() {
                _0xB955(this, _0xF54B);
                return _0xB9A0(this, _getPrototypeOf(_0xF54B).apply(this, arguments))
            }
            _0xB987(_0xF54B, null, [_0xC639(_0xB90A[13], _0xB90A[523], _0xB90A[5], function _0xF5AF(_0xD39A, _0xD255, _0xF5C8) {
                _0xF54B.memoryStorage[_0xB90A[95]](_0xF54B.getName(_0xD39A), _0xF5C8 ? JSON.stringify(_0xD255) : _0xD255);
                if (Components.SessionData.SAVE_PROGRESS) {
                    localStorage.setItem(_0xF54B.getName(_0xD39A), _0xF5C8 ? JSON.stringify(_0xD255) : _0xD255)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[524], _0xB90A[5], function _0xF57D(_0xD39A) {
                var _0xF5C8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                if (_0xD39A == _0xB90A[465]) {
                    return localStorage.getItem(_0xF54B.getName(_0xD39A))
                };
                if (_0xD39A == _0xB90A[364]) {
                    return localStorage.getItem(_0xF54B.getName(_0xD39A))
                };
                if (_0xD39A == _0xB90A[469]) {
                    return localStorage.getItem(_0xF54B.getName(_0xD39A))
                };
                if (_0xD39A == _0xB90A[451]) {
                    return localStorage.getItem(_0xF54B.getName(_0xD39A))
                };
                if (_0xD39A == _0xB90A[452]) {
                    return localStorage.getItem(_0xF54B.getName(_0xD39A))
                };
                if (_0xD39A == _0xB90A[466]) {
                    return localStorage.getItem(_0xF54B.getName(_0xD39A))
                };
                if (Components.SessionData.SAVE_PROGRESS) {
                    var _0xC652 = localStorage.getItem(_0xF54B.getName(_0xD39A));
                    if (!_0xC652 && _0xF5C8) {
                        return null
                    };
                    return _0xF5C8 ? JSON.parse(localStorage.getItem(_0xF54B.getName(_0xD39A))) : localStorage.getItem(_0xF54B.getName(_0xD39A))
                };
                return _0xF5C8 && _0xF54B.memoryStorage.has(_0xF54B.getName(_0xD39A)) ? JSON.parse(_0xF54B.memoryStorage[_0xB90A[8]](_0xF54B.getName(_0xD39A))) : _0xF54B.memoryStorage[_0xB90A[8]](_0xF54B.getName(_0xD39A))
            }), _0xC639(_0xB90A[13], _0xB90A[525], _0xB90A[5], function _0xF596(_0xF5E1) {
                var _0xF5FA = encodeURIComponent(_0xF5E1).replace(/%([0-9A-F]{2})/g, function(_0xF613, _0xF62C) {
                    return String.fromCharCode(Number(_0xB90A[526] + _0xF62C))
                });
                return btoa(_0xF5FA)
            })]);
            return _0xF54B
        }(Scene.Component);
        _0xF54B.memoryStorage = new Map();
        Components.Storage = _0xF54B
    }

    function _0xBD6F(Components) {
        var _0xF645 = function(_0xF65E) {
            _0xBA1D(_0xF645, _0xF65E);

            function _0xF645() {
                var _0xF677;
                _0xB955(this, _0xF645);
                _0xF677 = _0xB9A0(this, _getPrototypeOf(_0xF645).apply(this, arguments));
                _0xF677.custom4PopUp = false;
                _0xF677.ballAnimationArray = [];
                _0xF677.symbolAnimArray = [];
                _0xF677.initLocalEvents = function() {
                    var _0xF6A9 = GameObject.getObject(_0xB90A[527]);
                    for (var _0xF690 = 0; _0xF690 < _0xF6A9.children.length; _0xF690++) {
                        var _0xCE22 = _0xF6A9.children[_0xF690];
                        if (_0xB93C(_0xCE22, GameObject)) {
                            _0xF677.symbolAnimArray.push(_0xCE22);
                            _0xCE22.getComponent(Components.AnimationScheduler).endEvent = Components.SessionData.SYMBOL_ANIM_END_EVENT + _0xB90A[61] + _0xF690;
                            _0xCE22.alpha = 0
                        }
                    };
                    _0xF677.symbolAnimTag = _0xF677.symbolAnimArray[0].tags[0];
                    _0xF677.ballAnimationArray = GameObject.getObjectsByTag(_0xF677.ballAnimationTag, false, 1, 0);
                    _0xF645.globalSymbolTag = _0xF677.symbolAnimTag;
                    if (_0xF677.custom4PopUp) {
                        _0xF677.events.addEventListener(_0xB90A[528], _0xF677.customFunc4PopUp)
                    } else {
                        _0xF645.buyBallButtons = GameObject.getObjectsByTag(_0xF677.buyButtonTag);
                        _0xF645.buyBallButtons.forEach(function(_0xCE22) {
                            _0xCE22.addButtonPressedCallback(_0xF677.openBall);
                            if (!Components.SessionData.FIRST_BUY) {
                                if (_0xCE22.tags[1] != _0xB90A[413]) {
                                    _0xCE22.alpha = 0;
                                    _0xCE22.disableInput()
                                };
                                _0xF677.events.throwEvent(_0xB90A[427])
                            }
                        })
                    };
                    _0xF677.events.addEventListener(_0xB90A[529], function() {
                        console.log("dddddddddddddddddddddddddddddddddddddddddddddddddddddddd")
                        Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                    })
                };
                _0xF677.customFunc4PopUp = function() {
                    var _0xF0CD = Math.floor(Math.random() * 3 + 1);
                    _0xF645.ballNumber = _0xF0CD;
                    _0xF677.checkMoney()
                };
                _0xF677.openBall = function(_0xC652) {
                    Components.DevUtils.playSound(_0xB90A[406]);
                    _0xF645.buyBallButtons.forEach(function(_0xCE22) {
                        _0xCE22.disableInput()
                    });
                    _0xF645.ballNumber = parseInt(_0xC652.tags[1]);
                    _0xF677.checkMoney();
                    Components.SessionData.FIRST_BUY = true;
                    Components.Storage.saveData(_0xB90A[469], Components.SessionData.FIRST_BUY, false)
                };
                _0xF677.checkMoney = function() {
                    if (Components.SessionData.COIN_BALANCE >= _0xF645.ballPrices[_0xF645.ballNumber - 1] || !Components.SessionData.FIRST_BUY) {
                        if (!Components.SessionData.FIRST_BUY) {} else {
                            _0xF677.events.throwEvent(Components.SessionData.REMOVE_COINS, Util.Util.createEventData([
                                [Components.SessionData.AMOUNT, _0xF645.ballPrices[_0xF645.ballNumber - 1]]
                            ]))
                        };
                        var _0xF6DB = _0xF645.ballNumber.toString();
                        if (_0xF677.custom4PopUp) {
                            var _0xF6C2 = GameObject.getObject(_0xF677.ballAnimationTag + _0xB90A[61] + _0xB90A[414]);
                            _0xF6C2.getComponent(Components.AnimationScheduler).endEvent = Components.SessionData.BALL_ANIM_END_EVENT;
                            _0xF677.events.addEventListener(_0xB90A[528], function() {
                                _0xF6C2.alpha = 1;
                                _0xF677.events.throwEvent(_0xB90A[530]);
                                Components.DevUtils.playSound(_0xB90A[356])
                            })
                        } else {
                            _0xF6C2 = GameObject.getObject(_0xF677.ballAnimationTag + _0xB90A[61] + _0xF6DB);
                            _0xF6C2.getComponent(Components.AnimationScheduler).endEvent = Components.SessionData.BALL_ANIM_END_EVENT;
                            _0xF6C2.alpha = 1;
                            _0xF677.events.throwEvent(_0xF677.ballAnimationTag + _0xF6DB);
                            Components.DevUtils.playSound(_0xB90A[356])
                        };
                        trace(_0xF645.ballPrices[_0xF645.ballNumber - 1], _0xB90A[531], Components.SessionData.COIN_BALANCE)
                    } else {
                        if (Components.DevUtils.getCurrentUnitName() == _0xB90A[420]) {
                            _0xF645.buyBallButtons.forEach(function(_0xCE22) {
                                _0xCE22.enableInput()
                            })
                        };
                        return
                    }
                };
                _0xF677.priceForBalls = function() {
                    _0xF677.events.throwEvent(_0xB90A[532], Util.Util.createEventData([
                        [Components.TextLabel.TEXT, _0xF645.ballPrices[4]]
                    ]));
                    _0xF677.events.throwEvent(_0xB90A[533], Util.Util.createEventData([
                        [Components.TextLabel.TEXT, _0xF645.ballPrices[3]]
                    ]));
                    _0xF677.events.throwEvent(_0xB90A[534], Util.Util.createEventData([
                        [Components.TextLabel.TEXT, _0xF645.ballPrices[2]]
                    ]));
                    _0xF677.events.throwEvent(_0xB90A[535], Util.Util.createEventData([
                        [Components.TextLabel.TEXT, _0xF645.ballPrices[1]]
                    ]));
                    _0xF677.events.throwEvent(_0xB90A[536], Util.Util.createEventData([
                        [Components.TextLabel.TEXT, _0xF645.ballPrices[0]]
                    ]))
                };
                return _0xF677
            }
            _0xB987(_0xF645, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initLocalEvents();
                this.priceForBalls();
                _0xF645.free = GameObject.getObject(_0xB90A[537]);
                _0xF645.buyB = GameObject.getObject(_0xB90A[538]);
                this.shopTutorial = GameObject.getObject(_0xB90A[539]);
                if (Components.DevUtils.getCurrentUnitName() == _0xB90A[420]) {
                    if (Components.SessionData.FIRST_BUY) {
                        this.shopTutorial.alpha = 0;
                        this.shopTutorial.disableInput();
                        _0xF645.free.alpha = 0;
                        _0xF645.buyB.alpha = 1
                    } else {
                        _0xF645.free.alpha = 1;
                        _0xF645.buyB.alpha = 0
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (!Components.SessionData.FIRST_BUY) {
                    this.events.throwEvent(_0xB90A[540])
                }
            })]);
            return _0xF645
        }(Scene.Component);
        _0xF645.buyBallButtons = [];
        _0xF645.ballNumber = 0;
        _0xF645.ballPrices = [500, 800, 1300, 1800, 2200];
        Components.StoreBallManager = _0xF645
    }

    function _0xBD88(Components) {
        var _0xF6F4 = function(_0xF70D) {
            _0xBA1D(_0xF6F4, _0xF70D);

            function _0xF6F4() {
                var _0xF726;
                _0xB955(this, _0xF6F4);
                _0xF726 = _0xB9A0(this, _getPrototypeOf(_0xF6F4).apply(this, arguments));
                _0xF726.timePass = 0;
                _0xF726.totalTime = 0;
                _0xF726.counting = false;
                _0xF726.timeArray = [_0xB90A[114], _0xB90A[114], _0xB90A[115], _0xB90A[114], _0xB90A[114]];
                _0xF726.initLocalEvents = function() {
                    _0xF726.events.addEventListener(_0xF726.startEvent, _0xF726.handleStart);
                    _0xF726.events.addEventListener(_0xF726.resumeEvent, _0xF726.handleResume);
                    _0xF726.events.addEventListener(_0xF726.pauseEvent, _0xF726.handlePause)
                };
                _0xF726.handleStart = function() {
                    _0xF726.counting = true;
                    _0xF726.events.addEventListener(_0xB90A[541], _0xF726.startTimer);
                    trace(_0xF726.counting)
                };
                _0xF726.handlePause = function() {
                    _0xF726.counting = false
                };
                _0xF726.handleResume = function() {
                    _0xF726.counting = true
                };
                _0xF726.startTimer = function() {
                    if (_0xF726.counting) {
                        _0xF726.timePass = _0xF726.gameObject.game.time.physicsElapsedMS;
                        if (_0xF726.clock) {
                            _0xF726.totalTime += _0xF726.timePass;
                            trace(_0xF726.totalTime, _0xF726.unlockTime);
                            if (_0xF726.totalTime >= _0xF726.unlockTime) {
                                _0xF726.totalTime = 0;
                                _0xF726.events.removeEventListener(_0xB90A[541], _0xF726.startTimer);
                                if (!_0xF6F4.TIMER_DONE) {
                                    Components.DevUtils.playSound(_0xF726.timeSound);
                                    _0xF726.stopTimer()
                                }
                            }
                        } else {
                            _0xF726.totalTime -= _0xF726.timePass;
                            if (_0xF726.totalTime <= 0) {
                                _0xF726.events.throwEvent(_0xF6F4.TIMER_OVER);
                                _0xF726.totalTime = 0;
                                _0xF726.events.removeEventListener(_0xB90A[541], _0xF726.startTimer);
                                if (!_0xF6F4.TIMER_DONE) {
                                    Components.DevUtils.playSound(_0xF726.timeSound);
                                    _0xF726.stopTimer()
                                }
                            }
                        };
                        _0xF726.displayTimer()
                    }
                };
                _0xF726.stopTimer = function() {
                    _0xF6F4.TIMER_DONE = true;
                    _0xF726.events.removeEventListener(_0xB90A[541], _0xF726.startTimer)
                };
                _0xF726.displayTimer = function() {
                    _0xF726.seconds = Math.floor(_0xF726.totalTime % 60000 / 1000).toString();
                    _0xF726.minutes = Math.floor(_0xF726.totalTime / 60000).toString();
                    if (_0xF726.minutes.length == 1) {
                        _0xF726.timeText = _0xB90A[114] + _0xF726.minutes + _0xB90A[115] + _0xF726.seconds;
                        if (_0xF726.seconds.length == 1) {
                            _0xF726.timeText = _0xF726.minutes + _0xB90A[115] + _0xB90A[114] + _0xF726.seconds
                        }
                    };
                    if (_0xF726.seconds.length == 1) {
                        _0xF726.timeText = _0xF726.minutes + _0xB90A[115] + _0xB90A[114] + _0xF726.seconds
                    };
                    if (_0xF726.minutes.length != 1 && _0xF726.seconds.length != 1) {
                        _0xF726.timeText = _0xF726.minutes + _0xB90A[115] + _0xF726.seconds
                    };
                    _0xF726.events.throwEvent(_0xF6F4.CURRENT_TIMER, Util.Util.createEventData([
                        [_0xB90A[542], _0xF726.timeText]
                    ]))
                };
                _0xF726.hide = function() {};
                return _0xF726
            }
            _0xB987(_0xF6F4, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.unlockTime *= 1000;
                if (!this.clock) {
                    this.totalTime = this.unlockTime
                };
                trace(this.unlockTime, this.startEvent, this.pauseEvent, this.resumeEvent);
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF6F4
        }(Scene.Component);
        _0xF6F4.CURRENT_TIMER = _0xB90A[543];
        _0xF6F4.TIMER_UNLOCK = _0xB90A[544];
        _0xF6F4.TIMER_OVER = _0xB90A[545];
        _0xF6F4.TIMER_DONE = false;
        Components.TimeLevelUnlock = _0xF6F4
    }

    function _0xBDA1(Components) {
        var _0xF73F = function(_0xF758) {
            _0xBA1D(_0xF73F, _0xF758);

            function _0xF73F() {
                var _0xF771;
                _0xB955(this, _0xF73F);
                _0xF771 = _0xB9A0(this, _getPrototypeOf(_0xF73F).apply(this, arguments));
                _0xF771.showPanel = function() {
                    Components.Tweens.create(_0xF771.mainContainer).to(_0xC639(_0xB90A[45], 1), 400, null, true).onComplete.addOnce(function() {
                        _0xF771.mainContainer.enableInput()
                    })
                };
                _0xF771.closePanel = function() {
                    Components.Tweens.create(_0xF771.mainContainer).to(_0xC639(_0xB90A[45], 0), 400, null, true).onComplete.addOnce(function() {
                        _0xF771.mainContainer.disableInput()
                    })
                };
                return _0xF771
            }
            _0xB987(_0xF73F, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.mainContainer.alpha = 0;
                this.mainContainer.disableInput();
                this.events.addEventListener(Components.SessionData.SHOW_TRY_AGAIN_POPUP, this.showPanel);
                this.closeButton.addButtonPressedCallback(this.closePanel);
                this.events.addEventListener(_0xB90A[353], function() {
                    if (Components.SessionData.lostLives >= 4) {
                        console.log("2222222222222222222222222222222222222222222222")
                        Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                    } else {
                        Managers.SceneManager.instance.loadUnit(Components.DevUtils.getCurrentUnitName(), true)
                    }
                });
                this.events.addEventListener(_0xB90A[320], this.closePanel);
                this.closeButton.addButtonPressedCallback(function() {

                    if (Components.SessionData.lostLives >= 4) {
                        Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                    } else {
                        Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                    }
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF73F
        }(Scene.Component);
        Components.TryAgainPopUp = _0xF73F
    }

    function _0xBDBA(Components) {
        var _0xF78A = function(_0xF7A3) {
            _0xBA1D(_0xF78A, _0xF7A3);

            function _0xF78A() {
                var _0xF7D5;
                _0xB955(this, _0xF78A);
                _0xF7D5 = _0xB9A0(this, _getPrototypeOf(_0xF78A).apply(this, arguments));
                _0xF7D5.initEvents = function() {
                    _0xF7D5.adButton.addButtonPressedCallback(_0xF7D5.managePopUp);
                    _0xF7D5.timerCont.alpha = 0
                };
                _0xF7D5.animateAdButton = function() {
                    Components.Tweens.create(_0xF7D5.adButton).to(_0xC639(_0xB90A[46], 10), 100, Phaser.Easing.Bounce.In, true, 1500, 3, true).onComplete.addOnce(function() {
                        _0xF7D5.animateAdButton()
                    })
                };
                _0xF7D5.managePopUp = function() {
                    _0xF7D5.adButton.alpha = 0;
                    _0xF7D5.adButton.disableInput();
                    _0xF7D5.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                        [Components.SessionData.AMOUNT, 1000]
                    ]));
                    _0xF7D5.events.throwEvent(_0xB90A[350]);
                    _0xF7D5.events.throwEvent(_0xB90A[502])
                };
                _0xF7D5.handleTimer = function() {
                    _0xF7D5.totalTime = Components.GameTimer.instance.getTimeLeft(Components.TimerType.coins);
                    _0xF7D5.seconds = Math.floor(_0xF7D5.totalTime % 60).toString();
                    _0xF7D5.minutes = Math.floor(_0xF7D5.totalTime / 60).toString();
                    if (_0xF7D5.minutes.length == 1) {
                        _0xF7D5.timeText = _0xB90A[114] + _0xF7D5.minutes + _0xB90A[115] + _0xF7D5.seconds;
                        if (_0xF7D5.seconds.length == 1) {
                            _0xF7D5.timeText = _0xF7D5.minutes + _0xB90A[115] + _0xB90A[114] + _0xF7D5.seconds
                        }
                    };
                    if (_0xF7D5.seconds.length == 1) {
                        _0xF7D5.timeText = _0xF7D5.minutes + _0xB90A[115] + _0xB90A[114] + _0xF7D5.seconds
                    };
                    if (_0xF7D5.minutes.length != 1 && _0xF7D5.seconds.length != 1) {
                        _0xF7D5.timeText = _0xF7D5.minutes + _0xB90A[115] + _0xF7D5.seconds
                    };
                    _0xF7D5.events.throwEvent(_0xB90A[546], Util.Util.createEventData([
                        [Components.TextLabel.TEXT, _0xF7D5.timeText]
                    ]))
                };
                return _0xF7D5
            }
            _0xB987(_0xF78A, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xF7BC = this;
                this.initEvents();
                this.animateAdButton();
                this.adButton.disableInput();
                this.events.addEventListener(_0xB90A[547], function() {
                    _0xF7BC.adButton.alpha = 1;
                    _0xF7BC.adButton.enableInput()
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (Components.SessionData.ENABLE_AD_BUTTON) {
                    this.adButton.alpha = 1;
                    this.timerCont.alpha = 0;
                    Components.SessionData.ENABLE_AD_BUTTON = false
                }
            })]);
            return _0xF78A
        }(Scene.Component);
        Components.WatchAdPopUp = _0xF78A
    }

    function _0xBDD3(Components) {
        var _0xF7EE = function(_0xF807) {
            _0xBA1D(_0xF7EE, _0xF807);

            function _0xF7EE() {
                var _0xF884;
                _0xB955(this, _0xF7EE);
                _0xF884 = _0xB9A0(this, _getPrototypeOf(_0xF7EE).apply(this, arguments));
                _0xF884.lastScore = 0;
                _0xF884.lastUpdatedScore = 0;
                _0xF884.score = 0;
                _0xF884.timeScale = 1;
                _0xF884.initialWidth = 0;
                _0xF884.scoreForEvent = 0;
                _0xF884.sendEventForAnim = function(_0xF86B) {
                    if (_0xF86B > _0xF884.scoreForEvent) {
                        _0xF884.scoreForEvent = _0xF86B
                    }
                };
                _0xF884.onUpdate = function() {
                    if (_0xF884.lastScore != _0xF884.score) {
                        var _0xDBE7 = ~~(30 * _0xF884.timeScale);
                        if (_0xDBE7 > _0xF884.score - _0xF884.lastScore) {
                            _0xDBE7 = _0xF884.score - _0xF884.lastScore
                        };
                        _0xF884.lastScore += _0xDBE7;
                        _0xF884.textLabel.setText(_0xF884.lastScore.toString());
                        var _0xD8F9 = 1 + _0xF884.timeScale - (_0xF884.lastScore - _0xF884.lastUpdatedScore) / (_0xF884.score - _0xF884.lastUpdatedScore) * _0xF884.timeScale;
                        _0xF884.textGo.getChildAt(1).scale[_0xB90A[95]](_0xD8F9 > 2.5 ? 2.5 : _0xD8F9, _0xD8F9 > 2.5 ? 2.5 : _0xD8F9);
                        _0xF884.sendEventForAnim(_0xD8F9);
                        if (_0xD8F9 > 2) {
                            _0xD8F9 = 2
                        };
                        if (_0xD8F9 < 1) {
                            _0xD8F9 = 1
                        };
                        _0xF884.scoreBackground.scale[_0xB90A[95]](_0xD8F9 - 0.95, _0xF884.scoreBackground.scale.y);
                        _0xF884.scoreBackground.tint = Phaser.Color.interpolateRGB(138, 234, 235, 190, 237, 231, 1, _0xD8F9 - 1)
                    } else {
                        _0xF884.textGo.getChildAt(1).angle = 0;
                        if (GameObject.getObject(_0xB90A[548])) {
                            GameObject.getObject(_0xB90A[548]).alpha = 1
                        };
                        if (_0xF884.scoreForEvent > 1.4 && _0xF884.scoreForEvent < 1.6) {
                            _0xF884.events.throwEvent(_0xB90A[549]);
                            _0xF884.scoreForEvent = 0
                        } else {
                            if (_0xF884.scoreForEvent > 1.6 && _0xF884.scoreForEvent < 1.8) {
                                _0xF884.events.throwEvent(_0xB90A[550]);
                                _0xF884.scoreForEvent = 0
                            } else {
                                if (_0xF884.scoreForEvent > 1.8 && _0xF884.scoreForEvent < 2) {
                                    _0xF884.events.throwEvent(_0xB90A[551]);
                                    _0xF884.scoreForEvent = 0
                                } else {
                                    if (_0xF884.scoreForEvent > 2) {
                                        _0xF884.events.throwEvent(_0xB90A[552]);
                                        _0xF884.scoreForEvent = 0
                                    }
                                }
                            }
                        }
                    }
                };
                return _0xF884
            }
            _0xB987(_0xF7EE, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                _0xF7EE.instance = this
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0xB90A[29], this.onUpdate);
                if (this.textGo) {
                    this.textLabel = this.textGo.getComponent(Components.TextLabel)
                };
                this.textLabel.setText(_0xB90A[114]);
                if (this.scoreBackground) {
                    this.initialWidth = this.scoreBackground.width
                };
                this.scoreBackground.tint = 0xffffff;
                this.scoreBackground.y += this.scoreBackground.height / 2 - 3;
                this.scoreBackground.height = 3;
                this.scoreBackground.scale.x = 0;
                if (GameObject.getObject(_0xB90A[548])) {
                    GameObject.getObject(_0xB90A[548]).alpha = 0
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[553], _0xB90A[5], function _0xF820(_0xF86B) {
                this.lastUpdatedScore = this.lastScore;
                this.score += ~~(_0xF86B * (1 + this.timeScale * 0.1));
                this.timeScale = (this.score - this.lastUpdatedScore) / 1000;
                var _0xCC92 = (this.score - this.lastScore) / (this.timeScale * 30);
                var _0xF852 = Math.random() * 20 - 10;
                this.textGo.getChildAt(1).angle = -_0xF852;
                Components.Tweens.create(this.textGo.getChildAt(1), true).to(_0xC639(_0xB90A[46], _0xF852), 100, Phaser.Easing.Elastic.InOut, true, 0, 2, true)
            }), _0xC639(_0xB90A[13], _0xB90A[554], _0xB90A[5], function _0xF839() {
                return this.score
            })]);
            return _0xF7EE
        }(Scene.Component);
        Components.ScoreManager = _0xF7EE
    }

    function _0xBDEC(Components) {
        var _0xF89D = function(_0xF8B6) {
            _0xBA1D(_0xF89D, _0xF8B6);

            function _0xF89D() {
                var _0xF8E8;
                _0xB955(this, _0xF89D);
                _0xF8E8 = _0xB9A0(this, _getPrototypeOf(_0xF89D).apply(this, arguments));
                _0xF8E8.workers = [];
                _0xF8E8.workerDone = function() {
                    trace(_0xB90A[555])
                };
                _0xF8E8.onDown = function() {
                    for (var _0xF901 = 0; _0xF901 < _0xF8E8.workers.length; _0xF901++) {
                        var _0xF91A = _0xF8E8.workers[_0xF901];
                        _0xF91A.postMessage({})
                    }
                };
                return _0xF8E8
            }
            _0xB987(_0xF89D, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.gameObject.game.input.onDown.add(this.onDown);
                for (var _0xF8CF = 0; _0xF8CF < navigator.hardwareConcurrency; _0xF8CF++) {
                    this.workers.push(new Worker(_0xB90A[556]));
                    this.workers[_0xF8CF].onmessage = this.workerDone
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF89D
        }(Scene.Component);
        Components.WorkerTest = _0xF89D
    }

    function _0xBE05(Components) {
        var _0xF933 = function(_0xF94C) {
            _0xBA1D(_0xF933, _0xF94C);

            function _0xF933() {
                var _0xF965;
                _0xB955(this, _0xF933);
                _0xF965 = _0xB9A0(this, _getPrototypeOf(_0xF933).apply(this, arguments));
                _0xF965.startEvent = _0xB90A[27];
                _0xF965.endEvent = _0xB90A[27];
                _0xF965.onBubbleUp = _0xB90A[27];
                _0xF965.onBubbleDown = _0xB90A[27];
                _0xF965.nextButtonName = _0xB90A[27];
                _0xF965.withSound = true;
                _0xF965.startHidden = true;
                _0xF965.hideOnNext = true;
                _0xF965.hideNextFromStart = true;
                _0xF965.autoHideAfter = 0;
                _0xF965.showBubble = function() {
                    if (_0xF965._nextButton) {
                        _0xF965._nextButton.addButtonPressedCallback(_0xF965.onNexClick)
                    };
                    _0xF965.events.throwEvent(Components.LanguagePanel.SHOW_PANEL, Util.Util.createEventData([
                        [Components.LanguagePanel.TEXT_KEY, _0xF965.bubbleText]
                    ]));
                    _0xF965.gameObject.game.time.events.add(Components.LanguagePanel.ANIM_TIMER, function() {
                        if (_0xF965.onBubbleUp != _0xB90A[27]) {
                            _0xF965.events.throwEvent(_0xF965.onBubbleUp)
                        };
                        if (_0xF965._nextButton) {
                            Components.Tweens.create(_0xF965._nextButton.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), Components.LanguagePanel.ANIM_TIMER, null, true).onComplete.addOnce(function() {
                                _0xF965._nextButton.enableInput()
                            })
                        };
                        if (_0xF965.autoHideAfter != 0) {
                            _0xF965.gameObject.game.time.events.add(_0xF965.autoHideAfter, function() {
                                _0xF965.events.throwEvent(Components.LanguagePanel.HIDE_PANEL);
                                _0xF965.gameObject.game.time.events.add(Components.LanguagePanel.ANIM_TIMER, function() {
                                    if (_0xF965.onBubbleDown != _0xB90A[27]) {
                                        _0xF965.events.throwEvent(_0xF965.onBubbleDown)
                                    }
                                }, _0xB9B9(_0xF965))
                            }, _0xB9B9(_0xF965))
                        }
                    }, _0xB9B9(_0xF965))
                };
                _0xF965.onEnd = function() {
                    _0xF965.events.throwEvent(Components.LanguagePanel.HIDE_PANEL);
                    _0xF965.gameObject.game.time.events.add(Components.LanguagePanel.ANIM_TIMER, function() {
                        if (_0xF965.onBubbleDown != _0xB90A[27]) {
                            _0xF965.events.throwEvent(_0xF965.onBubbleDown)
                        }
                    }, _0xB9B9(_0xF965))
                };
                _0xF965.onNexClick = function() {
                    _0xF965._nextButton.disableInput();
                    Components.Tweens.create(_0xF965._nextButton.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), Components.LanguagePanel.ANIM_TIMER, null, true);
                    _0xF965.events.throwEvent(Components.LanguagePanel.HIDE_PANEL);
                    _0xF965.gameObject.game.time.events.add(Components.LanguagePanel.ANIM_TIMER, function() {
                        if (_0xF965.onBubbleDown != _0xB90A[27]) {
                            _0xF965.events.throwEvent(_0xF965.onBubbleDown)
                        }
                    }, _0xB9B9(_0xF965))
                };
                return _0xF965
            }
            _0xB987(_0xF933, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                if (this.startEvent != _0xB90A[27]) {
                    this.events.addEventListener(this.startEvent, this.showBubble)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (!this.startHidden) {};
                this._nextButton = GameObject.getObject(this.nextButtonName);
                if (this._nextButton) {
                    if (this.hideNextFromStart) {
                        this._nextButton.disableInput();
                        this._nextButton.scale[_0xB90A[95]](0, 0)
                    }
                };
                if (this.endEvent != _0xB90A[27]) {
                    this.events.addEventListener(this.endEvent, this.onEnd)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF933
        }(Scene.Component);
        Components.Bubble = _0xF933
    }

    function _0xBE1E(Components) {
        var _0xF97E = function(_0xF9C9) {
            _0xBA1D(_0xF97E, _0xF9C9);

            function _0xF97E() {
                var _0xFA91;
                _0xB955(this, _0xF97E);
                _0xFA91 = _0xB9A0(this, _getPrototypeOf(_0xF97E).apply(this, arguments));
                _0xFA91.toThrowEvent = _0xB90A[27];
                _0xFA91.pickerClicked = false;
                _0xFA91.barClicked = false;
                _0xFA91.maxColor = new _0xF9B0();
                _0xFA91.lastMx = 0;
                _0xFA91.lastMy = 0;
                _0xFA91.barY = 0;
                _0xFA91.pixel = new _0xF9B0();
                _0xFA91.finalPixel = new _0xF9B0();
                _0xFA91.randomColor = new _0xF9B0();
                _0xFA91.onLoad = function() {
                    _0xFA91.drawBar()
                };
                _0xFA91.setRandomColor = function() {
                    _0xFA91.randomColor.r = Math.round(Math.random() * 255);
                    _0xFA91.randomColor.g = Math.round(Math.random() * 255);
                    _0xFA91.randomColor.b = Math.round(Math.random() * 255)
                };
                _0xFA91.setColor = function(_0xCF35) {
                    var _0xCD8C = _0xCF35.getData(_0xB90A[62]);
                    if (_0xCD8C.isEmpty) {
                        _0xFA91.barY = _0xFA91.bar.height / 2;
                        _0xFA91.intensityMarker.x = -_0xFA91.bar.width * _0xFA91.bar.anchor.x;
                        _0xFA91.intensityMarker.y = 0;
                        _0xFA91.colorRect.position[_0xB90A[95]](_0xFA91.picker.x, _0xFA91.picker.y);
                        _0xFA91.fillPixel(_0xFA91.picker.texture.baseTexture.source, -_0xFA91.picker.width / 2, -_0xFA91.picker.height / 2, _0xFA91.pixel);
                        _0xFA91.drawBar(false)
                    } else {
                        _0xFA91.intensityMarker.position[_0xB90A[95]](_0xCD8C.barPosition.x, _0xCD8C.barPosition.y);
                        _0xFA91.colorRect.position[_0xB90A[95]](_0xCD8C.pickerPosition.x, _0xCD8C.pickerPosition.y);
                        _0xF9B0.copyTo(_0xCD8C.originalColor, _0xFA91.pixel);
                        _0xFA91.drawBar(false);
                        _0xFA91.barY = _0xCD8C.intensityBarY
                    }
                };
                _0xFA91.clickBar = function() {
                    _0xFA91.barClicked = true;
                    _0xFA91.events.addEventListener(_0xB90A[29], _0xFA91.checkColor)
                };
                _0xFA91.clickPicker = function() {
                    if (!_0xFA91.pickerClicked) {
                        _0xFA91.events.addEventListener(_0xB90A[29], _0xFA91.checkColor)
                    };
                    _0xFA91.lastMx = _0xFA91.lastMy = 0;
                    _0xFA91.pickerClicked = true
                };
                _0xFA91.clickUp = function() {
                    if (_0xFA91.barClicked) {
                        _0xFA91.events.removeEventListener(_0xB90A[29], _0xFA91.checkColor)
                    };
                    _0xFA91.pickerClicked = false;
                    _0xFA91.barClicked = false
                };
                _0xFA91.overPicker = function() {
                    if (_0xFA91.barClicked) {
                        return
                    };
                    _0xFA91.events.addEventListener(_0xB90A[29], _0xFA91.checkColor)
                };
                _0xFA91.outPicker = function() {
                    if (_0xFA91.barClicked) {
                        return
                    };
                    _0xFA91.events.removeEventListener(_0xB90A[29], _0xFA91.checkColor)
                };
                _0xFA91.checkColor = function() {
                    if (_0xFA91.lastMx == _0xFA91.gameObject.game.input.x && _0xFA91.lastMy == _0xFA91.gameObject.game.input.y) {
                        return
                    };
                    _0xFA91.lastMx = _0xFA91.gameObject.game.input.x;
                    _0xFA91.lastMy = _0xFA91.gameObject.game.input.y;
                    if (_0xFA91.pickerClicked) {
                        _0xFA91.picker.updateTransform();
                        var _0xFAC3 = _0xFA91.gameObject.game.input.x - (_0xFA91.picker.worldPosition.x - _0xFA91.picker.width * _0xFA91.picker.anchor.x);
                        var _0xFADC = _0xFA91.gameObject.game.input.y - (_0xFA91.picker.worldPosition.y - _0xFA91.picker.height * _0xFA91.picker.anchor.y);
                        _0xFA91.colorRect.x = _0xFA91.picker.x + _0xFAC3 - _0xFA91.picker.width * _0xFA91.picker.anchor.x - 1;
                        _0xFA91.colorRect.y = _0xFA91.picker.y + _0xFADC - _0xFA91.picker.height * _0xFA91.picker.anchor.y - 1;
                        _0xFA91.fillPixel(_0xFA91.picker.texture.baseTexture.source, -_0xFAC3, -_0xFADC, _0xFA91.pixel);
                        _0xFA91.drawBar()
                    };
                    if (_0xFA91.barClicked) {
                        _0xFA91.bar.updateTransform();
                        var _0xFAC3 = _0xFA91.gameObject.game.input.x - (_0xFA91.bar.worldPosition.x - _0xFA91.bar.width * _0xFA91.bar.anchor.x);
                        var _0xFADC = _0xFA91.gameObject.game.input.y - (_0xFA91.bar.worldPosition.y - _0xFA91.bar.height * _0xFA91.bar.anchor.y);
                        var _0xFAAA = _0xFADC - _0xFA91.bar.height * _0xFA91.bar.anchor.y - 2;
                        if (_0xFAAA < -_0xFA91.bar.height * _0xFA91.bar.anchor.y) {
                            _0xFAAA = -_0xFA91.bar.height * _0xFA91.bar.anchor.y
                        };
                        if (_0xFAAA > _0xFA91.bar.height * _0xFA91.bar.anchor.y - 3) {
                            _0xFAAA = _0xFA91.bar.height * _0xFA91.bar.anchor.y - 3
                        };
                        _0xFA91.intensityMarker.y = _0xFAAA;
                        if (_0xFADC < 0) {
                            _0xFADC = 0
                        };
                        if (_0xFADC > _0xFA91.bar.height - 1) {
                            _0xFADC = _0xFA91.bar.height - 1
                        };
                        _0xFA91.barY = _0xFADC;
                        _0xFA91.updateFinalPixel()
                    }
                };
                return _0xFA91
            }
            _0xB987(_0xF97E, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                _0xF97E.activeWheel = this;
                this.events.addEventListener(_0xB90A[28], this.onLoad)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.data = new _0xF997();
                this.findElements();
                this.createRectangles();
                this.testCanvas = Util.Bitmap.create(1, 1);
                this.picker.inputEvents.addInputOver(this.overPicker);
                this.picker.inputEvents.addInputOut(this.outPicker);
                this.picker.inputEvents.addInputDown(this.clickPicker);
                this.gameObject.game.input.onUp.add(this.clickUp);
                this.intensityBar = Util.Bitmap.create(this.bar.width, this.bar.height);
                this.bar.loadTexture(this.intensityBar);
                this.bar.inputEvents.addInputDown(this.clickBar);
                this.fillPixel(this.picker.texture.baseTexture.source, -this.picker.width / 2, -this.picker.height / 2, this.pixel);
                this.events.addEventListener(_0xF97E.SET_COLOR, this.setColor);
                this.picker.inputEvents.addInputDown(this.setRandomColor)
            }), _0xC639(_0xB90A[13], _0xB90A[557], _0xB90A[5], function _0xFA14(_0xFB40, _0xD6A1, _0xD6BA, _0xFB27) {
                this.testCanvas.clear();
                this.testCanvas.draw(_0xFB40, _0xD6A1, _0xD6BA);
                var _0xCD8C = this.testCanvas.ctx.getImageData(0, 0, 1, 1);
                _0xFB27.setColorData(_0xCD8C.data)
            }), _0xC639(_0xB90A[13], _0xB90A[558], _0xB90A[5], function _0xFA78() {
                this.fillPixel(this.bar.texture.baseTexture.source, -2, -this.barY, this.finalPixel);
                this.saveData();
                if (this.toThrowEvent) {
                    this.events.throwEvent(this.toThrowEvent, Util.Util.createEventData([
                        [_0xB90A[62], this.data]
                    ]))
                };
                this.events.throwEvent(_0xF97E.CHANGE_COLOR, Util.Util.createEventData([
                    [_0xB90A[62], this.data]
                ]))
            }), _0xC639(_0xB90A[13], _0xB90A[523], _0xB90A[5], function _0xF5AF() {
                this.data.setBar(this.intensityMarker.x, this.intensityMarker.y);
                this.data.setPicker(this.colorRect.x, this.colorRect.y);
                this.data.setColor(this.finalPixel);
                this.data.setOriginalColor(this.pixel);
                this.data.setRandomColor(this.randomColor);
                this.data.setIntensityBarY(this.barY)
            }), _0xC639(_0xB90A[13], _0xB90A[559], _0xB90A[5], function _0xF9FB() {
                var _0xFB0E = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this.intensityBar.clear();
                this.maxColor.r = Math.round(this.pixel.r * 0.2);
                this.maxColor.g = Math.round(this.pixel.g * 0.2);
                this.maxColor.b = Math.round(this.pixel.b * 0.2);
                var _0xFAF5 = this.intensityBar.ctx.createLinearGradient(this.intensityBar.width / 2, 0, this.intensityBar.width / 2, this.intensityBar.height);
                _0xFAF5.addColorStop(0, this.pixel.getRgb());
                _0xFAF5.addColorStop(1, this.maxColor.getRgb());
                this.intensityBar.rect(0, 0, this.intensityBar.width, this.intensityBar.height, _0xFAF5);
                if (_0xFB0E) {
                    this.updateFinalPixel()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[560], _0xB90A[5], function _0xFA2D() {
                this.picker.input.pixelPerfectAlpha = 200;
                this.picker.input.pixelPerfectOver = true;
                this.picker.input.pixelPerfectClick = true;
                this.bar.input.pixelPerfectAlpha = 200;
                this.bar.input.pixelPerfectOver = true
            }), _0xC639(_0xB90A[13], _0xB90A[561], _0xB90A[5], function _0xF9E2() {
                this.colorRect = this.gameObject.game.add.graphics(this.picker.x, this.picker.y);
                this.colorRect.beginFill(0x000000);
                this.colorRect.drawRect(0, 0, 3, 3);
                this.colorRect.endFill();
                this.picker.parent.addChild(this.colorRect);
                this.intensityMarker = this.gameObject.game.add.graphics(0, 0);
                this.intensityMarker.beginFill(0x000000);
                this.intensityMarker.drawRect(0, 0, this.bar.width / 10 * 9, 3);
                this.intensityMarker.endFill();
                this.bar.addChild(this.intensityMarker);
                this.intensityMarker.x -= this.bar.width * this.bar.anchor.x;
                this.barY = this.bar.height / 2
            }), _0xC639(_0xB90A[13], _0xB90A[562], _0xB90A[5], function _0xFA46() {
                this.setRandomColor();
                var _0xFAC3 = Math.round(Math.random() * this.picker.width);
                var _0xFADC = Math.round(Math.random() * this.picker.height);
                var _0xFB72 = 100;
                while (!this.isInCircle(_0xFAC3, _0xFADC)) {
                    _0xFAC3 = Math.round(Math.random() * this.picker.width);
                    _0xFADC = Math.round(Math.random() * this.picker.height);
                    _0xFB72--;
                    if (_0xFB72 == 0) {
                        break
                    }
                };
                this.colorRect.x = this.picker.x + _0xFAC3 - this.picker.width * this.picker.anchor.x - 1;
                this.colorRect.y = this.picker.y + _0xFADC - this.picker.height * this.picker.anchor.y - 1;
                this.fillPixel(this.picker.texture.baseTexture.source, -_0xFAC3, -_0xFADC, this.pixel);
                this.drawBar();
                var _0xFB59 = Math.round(Math.random() * this.bar.height);
                this.barY = _0xFB59;
                this.intensityMarker.y = this.barY - this.bar.anchor.y * this.bar.height;
                this.updateFinalPixel()
            }), _0xC639(_0xB90A[13], _0xB90A[563], _0xB90A[5], function _0xFA5F(_0xD6A1, _0xD6BA) {
                return Phaser.Math.distance(this.picker.width / 2, this.picker.height / 2, _0xD6A1, _0xD6BA) < this.picker.width / 2
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xF97E
        }(Scene.Component);
        _0xF97E.SET_COLOR = _0xB90A[564];
        _0xF97E.CHANGE_COLOR = _0xB90A[565];
        Components.ColorWheel = _0xF97E;
        var _0xF9B0 = function() {
            function _0xF9B0() {
                _0xB955(this, _0xF9B0);
                this.r = 0;
                this.g = 0;
                this.b = 0;
                this.a = 255
            }
            _0xB987(_0xF9B0, [_0xC639(_0xB90A[13], _0xB90A[566], _0xB90A[5], function _0xFC08(_0xFD02, _0xFCE9, _0xCE3B) {
                var _0xD016 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 255;
                this.r = _0xFD02;
                this.g = _0xFCE9;
                this.b = _0xCE3B;
                this.a = _0xD016
            }), _0xC639(_0xB90A[13], _0xB90A[567], _0xB90A[5], function _0xFC3A(_0xFD02, _0xFCE9, _0xCE3B) {
                var _0xD016 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _0xB90A[568];
                this.r = Number(_0xFD02);
                this.g = Number(_0xFCE9);
                this.b = Number(_0xCE3B);
                this.a = Number(_0xD016)
            }), _0xC639(_0xB90A[13], _0xB90A[569], _0xB90A[5], function _0xFC21(_0xD0F7) {
                this.r = _0xD0F7[0];
                this.g = _0xD0F7[1];
                this.b = _0xD0F7[2];
                this.a = _0xD0F7[3]
            }), _0xC639(_0xB90A[13], _0xB90A[570], _0xB90A[5], function _0xFBBD() {
                return _0xB90A[571] + this.r + _0xB90A[572] + this.g + _0xB90A[572] + this.b + _0xB90A[573]
            }), _0xC639(_0xB90A[13], _0xB90A[574], _0xB90A[5], function _0xFBD6() {
                return _0xB90A[575] + this.r + _0xB90A[572] + this.g + _0xB90A[572] + this.b + _0xB90A[572] + this.a / 255 + _0xB90A[573]
            }), _0xC639(_0xB90A[13], _0xB90A[576], _0xB90A[5], function _0xFBA4() {
                return parseInt(_0xB90A[526] + this.rgbToHex(this.r + _0xB90A[27], this.g + _0xB90A[27], this.b + _0xB90A[27]))
            }), _0xC639(_0xB90A[13], _0xB90A[577], _0xB90A[5], function _0xFBEF(_0xFCD0, _0xFCB7, _0xFC9E) {
                return this.toHex(_0xFCD0) + this.toHex(_0xFCB7) + this.toHex(_0xFC9E)
            }), _0xC639(_0xB90A[13], _0xB90A[578], _0xB90A[5], function _0xFC53(_0xD3E5) {
                var _0xD6A1 = parseInt(_0xD3E5, 10);
                if (isNaN(_0xD6A1)) {
                    return _0xB90A[579]
                };
                _0xD6A1 = Math.max(0, Math.min(_0xD6A1, 255));
                return _0xB90A[580].charAt((_0xD6A1 - _0xD6A1 % 16) / 16) + _0xB90A[580].charAt(_0xD6A1 % 16)
            })], [_0xC639(_0xB90A[13], _0xB90A[581], _0xB90A[5], function _0xFB8B(_0xFC6C, _0xFC85) {
                _0xFC85.a = _0xFC6C.a;
                _0xFC85.r = _0xFC6C.r;
                _0xFC85.g = _0xFC6C.g;
                _0xFC85.b = _0xFC6C.b
            })]);
            return _0xF9B0
        }();
        _0xF9B0.empty = new _0xF9B0();
        Components.Pixel = _0xF9B0;
        var _0xF997 = function() {
            function _0xF997() {
                _0xB955(this, _0xF997);
                this.pickerPosition = new PIXI.Point();
                this.barPosition = new PIXI.Point();
                this.color = new _0xF9B0();
                this.originalColor = new _0xF9B0();
                this.randomColor = new _0xF9B0();
                this.isEmpty = true;
                this.intensityBarY = 0
            }
            _0xB987(_0xF997, [_0xC639(_0xB90A[13], _0xB90A[582], _0xB90A[5], function _0xFD66(_0xD6A1, _0xD6BA) {
                this.pickerPosition.x = _0xD6A1;
                this.pickerPosition.y = _0xD6BA;
                this.isEmpty = false
            }), _0xC639(_0xB90A[13], _0xB90A[583], _0xB90A[5], function _0xFD34(_0xD255) {
                this.intensityBarY = _0xD255
            }), _0xC639(_0xB90A[13], _0xB90A[584], _0xB90A[5], function _0xFD1B(_0xD6A1, _0xD6BA) {
                this.barPosition.x = _0xD6A1;
                this.barPosition.y = _0xD6BA;
                this.isEmpty = false
            }), _0xC639(_0xB90A[13], _0xB90A[566], _0xB90A[5], function _0xFC08(_0xE722) {
                _0xF9B0.copyTo(_0xE722, this.color)
            }), _0xC639(_0xB90A[13], _0xB90A[585], _0xB90A[5], function _0xFD4D(_0xE722) {
                _0xF9B0.copyTo(_0xE722, this.originalColor)
            }), _0xC639(_0xB90A[13], _0xB90A[586], _0xB90A[5], function _0xFD7F(_0xE722) {
                _0xF9B0.copyTo(_0xE722, this.randomColor)
            })], [_0xC639(_0xB90A[13], _0xB90A[581], _0xB90A[5], function _0xFB8B(_0xFC6C, _0xFC85) {
                if (_0xFC6C.barPosition) {
                    _0xFC85.setBar(_0xFC6C.barPosition.x, _0xFC6C.barPosition.y)
                };
                if (_0xFC6C.pickerPosition) {
                    _0xFC85.setPicker(_0xFC6C.pickerPosition.x, _0xFC6C.pickerPosition.y)
                };
                if (_0xFC6C.color) {
                    _0xFC85.setColor(_0xFC6C.color)
                };
                if (_0xFC6C.originalColor) {
                    _0xFC85.setOriginalColor(_0xFC6C.originalColor)
                };
                if (_0xFC6C.randomColor) {
                    _0xFC85.setRandomColor(_0xFC6C.randomColor)
                };
                _0xFC85.intensityBarY = _0xFC6C.intensityBarY
            })]);
            return _0xF997
        }();
        Components.ColorWheelData = _0xF997
    }

    function _0xBE37(Components) {
        var _0xFD98 = function(_0xFDB1) {
            _0xBA1D(_0xFD98, _0xFDB1);

            function _0xFD98() {
                var _0xFDCA;
                _0xB955(this, _0xFD98);
                _0xFDCA = _0xB9A0(this, _getPrototypeOf(_0xFD98).apply(this, arguments));
                _0xFDCA.initMc = function() {
                    if (_0xFDCA.initialValue != _0xB90A[27]) {
                        if (!_0xFDCA.once) {
                            _0xFD98.TOTAL_COINS = _0xFD98.TOTAL_COINS + Number(_0xFDCA.initialValue)
                        } else {
                            if (!Util.Globals.getFromGlobals(_0xB90A[587] + Components.DevUtils.getCurrentUnitName())) {
                                Util.Globals.addToGlobals(_0xB90A[587] + Components.DevUtils.getCurrentUnitName(), true);
                                _0xFD98.TOTAL_COINS = _0xFD98.TOTAL_COINS + Number(_0xFDCA.initialValue)
                            }
                        }
                    }
                };
                _0xFDCA.initLocalEvents = function() {
                    _0xFDCA.events.addEventListener(_0xFD98.ADD_COINS, _0xFDCA.handleAdCoins);
                    _0xFDCA.events.addEventListener(_0xFD98.REMOVE_COINS, _0xFDCA.handleRemoveCoins)
                };
                _0xFDCA.displayText = function() {
                    if (_0xFDCA.displayEvent != _0xB90A[27]) {
                        _0xFDCA.events.throwEvent(_0xFDCA.displayEvent, Util.Util.createEventData([
                            [Components.TextLabel.TEXT, _0xFD98.TOTAL_COINS]
                        ]))
                    } else {
                        trace(_0xB90A[588], _0xB90A[589])
                    }
                };
                _0xFDCA.handleAdCoins = function(_0xCF35) {
                    if (_0xCF35.getData(_0xB90A[384])) {
                        var _0xEABF = Number(_0xCF35.getData(_0xB90A[384]));
                        _0xFD98.TOTAL_COINS += _0xEABF;
                        trace(_0xB90A[590], _0xFD98.TOTAL_COINS);
                        _0xFDCA.displayText()
                    } else {
                        trace(_0xB90A[591], _0xB90A[589])
                    }
                };
                _0xFDCA.handleRemoveCoins = function(_0xCF35) {
                    if (_0xCF35.getData(_0xB90A[384])) {
                        var _0xEABF = Number(_0xCF35.getData(_0xB90A[384]));
                        if (_0xFD98.TOTAL_COINS == 0) {
                            _0xFDCA.events.throwEvent(_0xFD98.NO_MORE_COINS);
                            trace(_0xB90A[592], _0xFD98.TOTAL_COINS);
                            return
                        };
                        if (_0xFD98.TOTAL_COINS >= _0xEABF) {
                            _0xFD98.TOTAL_COINS -= _0xEABF;
                            _0xFDCA.displayText();
                            trace(_0xB90A[593], _0xFD98.TOTAL_COINS);
                            _0xFDCA.events.throwEvent(_0xFD98.BOUGHT);
                            if (_0xFD98.TOTAL_COINS == 0) {
                                _0xFDCA.events.throwEvent(_0xFD98.NO_MORE_COINS)
                            }
                        };
                        if (_0xFD98.TOTAL_COINS < _0xEABF) {
                            _0xFDCA.events.throwEvent(_0xFD98.NOT_ENOUGH_COINS);
                            trace(_0xB90A[594], _0xFD98.TOTAL_COINS)
                        }
                    } else {
                        trace(_0xB90A[595], _0xB90A[589])
                    }
                };
                return _0xFDCA
            }
            _0xB987(_0xFD98, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.initLocalEvents();
                this.displayText()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0xFD98
        }(Scene.Component);
        _0xFD98.REMOVE_COINS = _0xB90A[479];
        _0xFD98.ADD_COINS = _0xB90A[478];
        _0xFD98.NOT_ENOUGH_COINS = _0xB90A[596];
        _0xFD98.NO_MORE_COINS = _0xB90A[597];
        _0xFD98.BOUGHT = _0xB90A[598];
        _0xFD98.TOTAL_COINS = 0;
        Components.DisplayCoinsComponents = _0xFD98
    }

    function _0xBE50(Components) {
        var _0xFDE3 = function(_0xFDFC) {
            _0xBA1D(_0xFDE3, _0xFDFC);

            function _0xFDE3() {
                var _0xFE60;
                _0xB955(this, _0xFDE3);
                _0xFE60 = _0xB9A0(this, _getPrototypeOf(_0xFDE3).apply(this, arguments));
                _0xFE60.activeObjects = [];
                _0xFE60.onResize = function() {
                    if (_0xFE60.dimensions == _0xB90A[599]) {
                        var _0xE92F = _0xFE60.gameObject.game.canvas.width;
                        var _0xFF5A = Components.DevUtils.getBounds(_0xFE60.gameObject);
                        var _0xFF8C = _0xFF5A.width;
                        var _0xFF28 = Math.ceil(_0xE92F / _0xFF8C);
                        _0xFE60.showObjects(_0xFF28);
                        for (var _0xFEAB = 0; _0xFEAB < _0xFF28; _0xFEAB++) {
                            var _0xCE22 = _0xFE60.activeObjects[_0xFEAB];
                            _0xCE22.scale[_0xB90A[95]](_0xFE60.gameObject.scale.x, _0xFE60.gameObject.scale.y);
                            var _0xFEF6 = _0xFE60.gameObject.parent.toLocal(new PIXI.Point(_0xCE22.anchor.x * _0xFF5A.width + _0xFF5A.width * _0xFEAB, _0xCE22.anchor.y * _0xFF5A.height), _0xFE60.gameObject.game.world);
                            _0xCE22.position.x = _0xFEF6.x;
                            _0xCE22.position.y = _0xFEF6.y
                        }
                    } else {
                        if (_0xFE60.dimensions == _0xB90A[600]) {
                            var _0xE916 = _0xFE60.gameObject.game.canvas.height;
                            var _0xFF5A = Components.DevUtils.getBounds(_0xFE60.gameObject);
                            var _0xFF73 = _0xFF5A.height;
                            var _0xFF28 = Math.ceil(_0xE916 / _0xFF73);
                            _0xFE60.showObjects(_0xFF28);
                            for (var _0xFEC4 = 0; _0xFEC4 < _0xFF28; _0xFEC4++) {
                                var _0xFE92 = _0xFE60.activeObjects[_0xFEC4];
                                var _0xFEF6 = _0xFE60.gameObject.parent.toLocal(new PIXI.Point(_0xFE92.anchor.x * _0xFF5A.width, _0xFE92.anchor.y * _0xFF5A.height + _0xFF5A.height * _0xFEC4), _0xFE60.gameObject.game.world);
                                _0xFE92.position.x = _0xFEF6.x;
                                _0xFE92.position.y = _0xFEF6.y
                            }
                        } else {
                            if (_0xFE60.dimensions == _0xB90A[601]) {
                                var _0xE92F = _0xFE60.gameObject.game.canvas.width;
                                var _0xE916 = _0xFE60.gameObject.game.canvas.height;
                                var _0xFF5A = Components.DevUtils.getBounds(_0xFE60.gameObject);
                                var _0xFF8C = _0xFF5A.width;
                                var _0xFF73 = _0xFF5A.height;
                                var _0xFF41 = Math.ceil(_0xE92F / _0xFF8C);
                                var _0xFF0F = Math.ceil(_0xE916 / _0xFF73);
                                var _0xFF28 = _0xFF41 * _0xFF0F;
                                _0xFE60.showObjects(_0xFF28);
                                for (var _0xFEDD = 0; _0xFEDD < _0xFF28; _0xFEDD++) {
                                    var _0xFE79 = _0xFE60.activeObjects[_0xFEDD];
                                    var _0xD6A1 = _0xFEDD % _0xFF41;
                                    var _0xD6BA = ~~(_0xFEDD / _0xFF41);
                                    var _0xFEF6 = _0xFE60.gameObject.parent.toLocal(new PIXI.Point(_0xFE79.anchor.x * _0xFF5A.width + _0xFF5A.width * _0xD6A1, _0xFE79.anchor.y * _0xFF5A.height + _0xFF5A.height * _0xD6BA), _0xFE60.gameObject.game.world);
                                    _0xFE79.position.x = _0xFEF6.x;
                                    _0xFE79.position.y = _0xFEF6.y
                                }
                            }
                        }
                    }
                };
                return _0xFE60
            }
            _0xB987(_0xFDE3, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.activeObjects.push(this.gameObject);
                this.events.addEventListener(_0xB90A[280], this.onResize)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                this.onResize()
            }), _0xC639(_0xB90A[13], _0xB90A[602], _0xB90A[5], function _0xFE2E(_0xFB72) {
                while (_0xFB72 > this.activeObjects.length) {
                    this.activeObjects.push(this.generateObject())
                };
                for (var _0xFFBE = 0; _0xFFBE < this.activeObjects.length; _0xFFBE++) {
                    var _0xCE22 = this.activeObjects[_0xFFBE];
                    _0xCE22.visible = _0xFFBE < _0xFB72;
                    this.updateObjectProp(_0xCE22)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[603], _0xB90A[5], function _0xFE15() {
                var _0xFFA5 = new GameObject(this.gameObject.game, this.gameObject.name + _0xB90A[61] + this.activeObjects.length);
                _0xFFA5.loadTexture(this.gameObject.texture);
                this.gameObject.parent.addChildAt(_0xFFA5, this.gameObject.parent.getChildIndex(this.gameObject));
                this.updateObjectProp(_0xFFA5);
                return _0xFFA5
            }), _0xC639(_0xB90A[13], _0xB90A[604], _0xB90A[5], function _0xFE47(_0xC652) {
                _0xC652.anchor[_0xB90A[95]](this.gameObject.anchor.x, this.gameObject.anchor.y);
                _0xC652.scale[_0xB90A[95]](this.gameObject.scale.x, this.gameObject.scale.y)
            })]);
            return _0xFDE3
        }(Scene.Component);
        Components.DuplicatePattern = _0xFDE3
    }

    function _0xBE69(Components) {
        var _0xFFD7 = function(_0xFFF0) {
            _0xBA1D(_0xFFD7, _0xFFF0);

            function _0xFFD7() {
                var _0x1003B;
                _0xB955(this, _0xFFD7);
                _0x1003B = _0xB9A0(this, _getPrototypeOf(_0xFFD7).apply(this, arguments));
                _0x1003B.allowScaleUp = false;
                _0x1003B.boundsMap = new Map();
                _0x1003B.findInitialBounds = function() {
                    _0x1003B.globalScale = 1.5;
                    for (var _0x10054 = 0; _0x10054 < _0x1003B.container.children.length; _0x10054++) {
                        _0x1003B.container.children[_0x10054].scale[_0xB90A[95]](_0x1003B.globalScale, _0x1003B.globalScale)
                    };
                    _0x1003B.itemBounds = new Phaser.Rectangle(0, 0, 0, 0);
                    for (var _0x1006D = 0; _0x1006D < _0x1003B.container.children.length; _0x1006D++) {
                        var _0xF163 = _0x1003B.container.children[_0x1006D];
                        var _0xDFB6 = Components.DevUtils.getBounds(_0xF163);
                        _0x1003B.boundsMap[_0xB90A[95]](_0xF163, _0xDFB6);
                        if (_0xDFB6.width > _0x1003B.itemBounds.width) {
                            _0x1003B.itemBounds.width = _0xDFB6.width
                        };
                        if (_0xDFB6.height > _0x1003B.itemBounds.height) {
                            _0x1003B.itemBounds.height = _0xDFB6.height
                        }
                    };
                    if (_0x1003B.spacing) {
                        _0x1003B.itemBounds.width += _0x1003B.spacing;
                        _0x1003B.itemBounds.height += _0x1003B.spacing
                    }
                };
                _0x1003B.findEmptySpace = function() {
                    if (_0x1003B.space) {
                        _0x1003B.zone = Components.DevUtils.getBounds(_0x1003B.container, true, true)
                    } else {
                        _0x1003B.zone = new Phaser.Rectangle(0, 0, _0x1003B.gameObject.game.canvas.width, _0x1003B.gameObject.game.canvas.height)
                    };
                    if (_0x1003B.leftPadding) {
                        _0x1003B.zone.x += _0x1003B.zone.width * _0x1003B.leftPadding;
                        _0x1003B.zone.width -= _0x1003B.zone.width * _0x1003B.leftPadding
                    };
                    if (_0x1003B.topPadding) {
                        _0x1003B.zone.y += _0x1003B.zone.height * _0x1003B.topPadding;
                        _0x1003B.zone.height -= _0x1003B.zone.height * _0x1003B.topPadding
                    };
                    if (_0x1003B.rightPadding) {
                        _0x1003B.zone.width -= _0x1003B.zone.width * _0x1003B.rightPadding
                    };
                    if (_0x1003B.bottomPadding) {
                        _0x1003B.zone.height -= _0x1003B.zone.height * _0x1003B.bottomPadding
                    };
                    _0x1003B.handleElements();
                    _0x1003B.events.throwEvent(_0xB90A[605])
                };
                _0x1003B.globalScale = 1;
                _0x1003B.handleElements = function() {
                    var _0x1011C = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                    if (_0x1011C) {
                        _0x1003B.globalScale = 1.5;
                        for (var _0x10086 = 0; _0x10086 < _0x1003B.container.children.length; _0x10086++) {
                            _0x1003B.container.children[_0x10086].scale[_0xB90A[95]](_0x1003B.globalScale, _0x1003B.globalScale)
                        }
                    };
                    var _0x10199 = _0x1003B.container.children.length;
                    var _0xD5F2 = ~~(_0x1003B.zone.width / (_0x1003B.itemBounds.width * _0x1003B.globalScale));
                    var _0xD5C0 = ~~(_0x1003B.zone.height / (_0x1003B.itemBounds.height * _0x1003B.globalScale));
                    var _0xD1BF = _0xD5F2 * _0xD5C0;
                    var _0x10180 = _0x1003B.container.toLocal(new PIXI.Point(_0x1003B.zone.x, _0x1003B.zone.y), _0x1003B.gameObject.game.world);
                    var _0x100D1 = _0x1003B.container.toLocal(new PIXI.Point(_0x1003B.zone.x + _0x1003B.zone.width, _0x1003B.zone.y + _0x1003B.zone.height), _0x1003B.gameObject.game.world);
                    var _0x10135 = _0x10180.x;
                    var _0x1014E = _0x10180.y;
                    if (_0x10199 <= _0xD1BF) {
                        if (_0x1003B.allowScaleUp && false) {} else {
                            _0x10135 += _0x1003B.itemBounds.width * _0x1003B.globalScale / 2;
                            _0x1014E += _0x1003B.itemBounds.height * _0x1003B.globalScale / 2
                        }
                    } else {
                        _0x1003B.globalScale *= 0.9;
                        if ((_0xD5F2 == 0 || _0xD5C0 == 0) && _0x1003B.globalScale < 0.5) {
                            _0x1003B.globalScale = 0.2
                        };
                        for (var _0x1009F = 0; _0x1009F < _0x1003B.container.children.length; _0x1009F++) {
                            _0x1003B.container.children[_0x1009F].scale[_0xB90A[95]](_0x1003B.globalScale, _0x1003B.globalScale)
                        };
                        _0x1003B.handleElements(false);
                        return
                    };
                    var _0x100EA = (_0xD1BF - _0x10199) / _0xD5F2;
                    var _0x10167 = 0;
                    while (_0x100EA > 1) {
                        _0xD5F2--;
                        _0xD1BF = _0xD5F2 * _0xD5C0;
                        _0x100EA = (_0xD1BF - _0x10199) / _0xD5F2;
                        _0x10167++;
                        if (_0x10167 > 1000 || _0xD5F2 <= 2) {
                            break
                        }
                    };
                    _0xD5C0 = Math.ceil(_0x10199 / _0xD5F2);
                    _0x10135 += ((~~(_0x1003B.zone.width / (_0x1003B.itemBounds.width * _0x1003B.globalScale)) - _0xD5F2) * _0x1003B.itemBounds.width * _0x1003B.globalScale + _0x1003B.zone.width % (_0x1003B.itemBounds.width * _0x1003B.globalScale)) / 2;
                    _0x1014E += ((~~(_0x1003B.zone.height / (_0x1003B.itemBounds.height * _0x1003B.globalScale)) - _0xD5C0) * _0x1003B.itemBounds.height * _0x1003B.globalScale + _0x1003B.zone.height % (_0x1003B.itemBounds.height * _0x1003B.globalScale)) / 2;
                    for (var _0x100B8 = 0; _0x100B8 < _0xD5C0; _0x100B8++) {
                        var _0x10103 = 0;
                        if (_0x10199 - _0x100B8 * _0xD5F2 < _0xD5F2) {
                            _0x10103 = (_0xD5F2 - (_0x10199 - _0x100B8 * _0xD5F2)) * (_0x1003B.itemBounds.width * _0x1003B.globalScale) / 2
                        };
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xD5F2; _0xC9D6++) {
                            if (_0x100B8 * _0xD5F2 + _0xC9D6 >= _0x1003B.container.children.length) {
                                break
                            };
                            _0x1003B.container.children[_0x100B8 * _0xD5F2 + _0xC9D6].x = _0x10135 + _0xC9D6 * _0x1003B.itemBounds.width * _0x1003B.globalScale + _0x10103;
                            _0x1003B.container.children[_0x100B8 * _0xD5F2 + _0xC9D6].y = _0x1014E + _0x100B8 * _0x1003B.itemBounds.height * _0x1003B.globalScale
                        }
                    }
                };
                return _0x1003B
            }
            _0xB987(_0xFFD7, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.container.children.reverse();
                this.setPadding();
                this.findInitialBounds();
                this.findEmptySpace();
                this.gameObject.game.scale.onSizeChange.add(this.findEmptySpace)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[606], _0xB90A[5], function _0x10022() {
                if (this.padding == _0xB90A[27] || this.padding == null) {
                    this.leftPadding = this.rightPadding = this.topPadding = this.bottomPadding = 0
                } else {
                    var _0x101B2 = this.padding.split(_0xB90A[572]);
                    this.leftPadding = Number(_0x101B2[0]) / 100;
                    this.topPadding = Number(_0x101B2[1]) / 100;
                    this.rightPadding = Number(_0x101B2[2]) / 100;
                    this.bottomPadding = Number(_0x101B2[3]) / 100
                }
            }), _0xC639(_0xB90A[13], _0xB90A[607], _0xB90A[5], function _0x10009() {
                return ~~(this.zone.width / this.itemBounds.width) * ~~(this.zone.height / this.itemBounds.height)
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.scale.onSizeChange.remove(this.findEmptySpace);
                _get(_getPrototypeOf(_0xFFD7.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0xFFD7
        }(Scene.Component);
        Components.GridLayout = _0xFFD7
    }

    function _0xBE82(Components) {
        var _0x101CB = function(_0x101E4) {
            _0xBA1D(_0x101CB, _0x101E4);

            function _0x101CB() {
                var _0x10216;
                _0xB955(this, _0x101CB);
                _0x10216 = _0xB9A0(this, _getPrototypeOf(_0x101CB).apply(this, arguments));
                _0x10216.backgroundColor = _0xB90A[608];
                _0x10216.portionOfStage = 4;
                _0x10216.rectaglePadding = 10;
                _0x10216.radius = 30;
                _0x10216.alpha = 0.7;
                _0x10216.initLocalEvents = function() {
                    if (_0x10216.freeSpace) {
                        _0x10216.events.addEventListener(Components.Panel.FREE_SPACE, _0x10216.handleFreeSpace);
                        _0x10216.handleFreeSpace()
                    } else {
                        _0x10216.gameObject.game.scale.onSizeChange.add(_0x10216.changeAspect)
                    };
                    _0x10216.events.addEventListener(_0x101CB.SHOW_PANEL, _0x10216.handleShow);
                    _0x10216.events.addEventListener(_0x101CB.HIDE_PANEL, _0x10216.handleHide);
                    _0x10216.events.addEventListener(_0x101CB.FORCE_UPDATE, _0x10216.changeAspect)
                };
                _0x10216.handleShow = function(_0xCF35) {
                    if (_0xCF35) {
                        var _0xD39A = _0xCF35.getData(_0x101CB.TEXT_KEY);
                        var _0x1022F = Components.DevUtils.getTranslationForZone(_0xD39A);
                        Components.Tweens.create(_0x10216.gameObject).to(_0xC639(_0xB90A[45], 0), _0x101CB.ANIM_TIMER, null, true).onComplete.addOnce(function() {
                            Components.DevUtils.playSound(_0xB90A[609]);
                            _0x10216.setText(_0x1022F);
                            _0x10216.changeAspect();
                            Components.Tweens.create(_0x10216.gameObject).to(_0xC639(_0xB90A[45], 1), _0x101CB.ANIM_TIMER, null, true)
                        })
                    }
                };
                _0x10216.handleHide = function() {
                    Components.Tweens.create(_0x10216.gameObject).to(_0xC639(_0xB90A[45], 0), _0x101CB.ANIM_TIMER, null, true)
                };
                _0x10216.initMc = function() {
                    _0x10216.gameObject.x = _0x10216.rectaglePadding;
                    _0x10216.gameObject.y = Core.game.canvas.height - Core.game.canvas.height / _0x10216.portionOfStage - _0x10216.rectaglePadding
                };
                _0x10216.changeAspect = function() {
                    if (_0x10216.gameObject) {
                        if (!_0x10216.freeSpace) {
                            _0x10216.availableSpace = Core.game.canvas.width
                        };
                        _0x10216.gameObject.x = _0x10216.rectaglePadding;
                        _0x10216.gameObject.y = Core.game.canvas.height - Core.game.canvas.height / _0x10216.portionOfStage - _0x10216.rectaglePadding;
                        var _0xE92F = _0x10216.availableSpace - _0x10216.rectaglePadding * 2;
                        var _0xE916 = Core.game.canvas.height / _0x10216.portionOfStage;
                        _0x10216.style = _0xC639(_0xB90A[610], _0x10216.backgroundColor, _0xB90A[611], _0x10216.alpha, _0xB90A[599], _0xE92F, _0xB90A[600], _0xE916, _0xB90A[612], _0x10216.radius);
                        if (_0x10216.input) {
                            _0x10216.input.destroy()
                        };
                        _0x10216.input = new PhaserInput.InputField(_0x10216.gameObject.game, 0, _0x10216.gameObject.height / 8, _0x10216.style, false);
                        _0x10216.gameObject.addChild(_0x10216.input);
                        _0x10216.gameObject.setChildIndex(_0x10216.textField, _0x10216.gameObject.children.length - 1);
                        _0x10216.textField.wordWrap = true;
                        _0x10216.textField.wordWrapWidth = _0xE92F - _0x10216.rectaglePadding * 2;
                        _0x10216.textField.setTextBounds(_0x10216.rectaglePadding, 0, _0xE92F - _0x10216.rectaglePadding, _0xE916);
                        if (_0xE92F > 20 && _0xE916 > 20) {
                            _0x10216.textField.fontSize = _0x10216.setSize(_0x10216.textField, _0x10216.textField.text, _0xE92F, _0xE916);
                            _0x10216.textField.position[_0xB90A[95]](_0x10216.availableSpace / 2, _0x10216.textField.height / 2);
                            _0x10216.textField.alignIn(_0x10216.input.box)
                        }
                    }
                };
                _0x10216.handleFreeSpace = function(_0xCF35) {
                    if (_0xCF35 && _0xCF35.getData(Components.Panel.FREE_SPACE)) {
                        _0x10216.availableSpace = _0xCF35.getData(Components.Panel.FREE_SPACE)
                    } else {
                        _0x10216.availableSpace = Components.Panel.AVAILABLE_SPACE
                    };
                    _0x10216.changeAspect()
                };
                _0x10216.adTextLabel = function() {
                    _0x10216.textField = new Phaser.Text(Core.game, 0, 0, _0xB90A[27], _0xC639(_0xB90A[613], _0xB90A[614], _0xB90A[615], _0xB90A[616], _0xB90A[617], _0x10216.fontColor, _0xB90A[618], _0xB90A[616], _0xB90A[619], _0xB90A[620]));
                    _0x10216.gameObject.addChild(_0x10216.textField);
                    _0x10216.setText(_0xB90A[621]);
                    _0x10216.textField.anchor[_0xB90A[95]](0.5, 0.5);
                    _0x10216.textField.position[_0xB90A[95]](Core.game.canvas.width / 2, 0 + Number(_0x10216.textField.fontSize))
                };
                _0x10216.setText = function(_0x10248) {
                    _0x10216.textField.setText(_0x10248, true)
                };
                return _0x10216
            }
            _0xB987(_0x101CB, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.adTextLabel();
                this.initLocalEvents();
                this.changeAspect();
                this.gameObject.alpha = 0
            }), _0xC639(_0xB90A[13], _0xB90A[622], _0xB90A[5], function _0x101FD(_0x10261, _0x10248, _0xE92F, _0xE916) {
                if (!(_0xB90A[623] in _0x10261)) {
                    _0x10261[_0xB90A[623]] = _0x10261.fontSize
                };
                _0x10261.fontSize = _0x10261[_0xB90A[623]];
                if (_0x10261.wordWrap) {
                    _0xE92F = _0x10261.wordWrapWidth
                };
                _0x10261.text = _0x10248;
                if (_0xE92F > 0 && _0xE916 > 0) {
                    var _0xD5D9 = _0x10261[_0xB90A[623]];
                    while ((_0x10261.width > _0xE92F || _0x10261.height > _0xE916) && _0x10261.fontSize > 4) {
                        _0x10261.fontSize = --_0xD5D9
                    }
                };
                return _0xD5D9
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x101CB
        }(Scene.Component);
        _0x101CB.ANIM_TIMER = 200;
        Components.LanguagePanel = _0x101CB
    }

    function _0xBE9B(Components) {
        var _0x1027A = function(_0x10293) {
            _0xBA1D(_0x1027A, _0x10293);

            function _0x1027A() {
                var _0x102C5;
                _0xB955(this, _0x1027A);
                _0x102C5 = _0xB9A0(this, _getPrototypeOf(_0x1027A).apply(this, arguments));
                _0x102C5.randomizeArrayPos = [];
                _0x102C5.animOneTag = _0xB90A[27];
                _0x102C5.animTwoTag = _0xB90A[27];
                _0x102C5.cardTag = _0xB90A[27];
                _0x102C5.cardClickCheck = _0xB90A[27];
                _0x102C5.cardsMatched = 0;
                _0x102C5.checkCard = new Set();
                _0x102C5.once = true;
                _0x102C5.handleTimer = function() {
                    _0x102C5.totalTime = Components.GameTimer.instance.getTimeLeft(Components.TimerType.minigame);
                    _0x102C5.seconds = Math.floor(_0x102C5.totalTime % 60).toString();
                    _0x102C5.minutes = Math.floor(_0x102C5.totalTime / 60).toString();
                    if (_0x102C5.minutes.length == 1) {
                        _0x102C5.timeText = _0xB90A[114] + _0x102C5.minutes + _0xB90A[115] + _0x102C5.seconds;
                        if (_0x102C5.seconds.length == 1) {
                            _0x102C5.timeText = _0x102C5.minutes + _0xB90A[115] + _0xB90A[114] + _0x102C5.seconds
                        }
                    };
                    if (_0x102C5.seconds.length == 1) {
                        _0x102C5.timeText = _0x102C5.minutes + _0xB90A[115] + _0xB90A[114] + _0x102C5.seconds
                    };
                    if (_0x102C5.minutes.length != 1 && _0x102C5.seconds.length != 1) {
                        _0x102C5.timeText = _0x102C5.minutes + _0xB90A[115] + _0x102C5.seconds
                    };
                    _0x102C5.events.throwEvent(_0xB90A[116], Util.Util.createEventData([
                        [Components.TextLabel.TEXT, _0x102C5.timeText]
                    ]))
                };
                _0x102C5.objectsInit = function() {
                    _0x102C5.exitButton.addButtonPressedCallback(function() {
                        _0x102C5.events.throwEvent(Components.SessionData.LOSE_LIFE)
                    });
                    _0x102C5.animOne = GameObject.getObject(_0x102C5.animOneTag);
                    _0x102C5.animTwo = GameObject.getObject(_0x102C5.animTwoTag)
                };
                _0x102C5.randomizePos = function() {
                    _0x102C5.randomCardArray = GameObject.getObjectsByTag(_0x102C5.cardTag, true);
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x102C5.randomCardArray.length; _0xC6E8++) {
                        var _0xEF6F = _0x102C5.randomCardArray[_0xC6E8];
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xEF6F.children.length; _0xC9D6++) {
                            var _0x102DE = _0xEF6F.children[_0xC9D6];
                            if (_0x102DE.getComponent(Components.ButtonComponent)) {
                                _0x102DE.addButtonPressedCallback(_0x102C5.buttonPressed)
                            }
                        }
                    };
                    Phaser.ArrayUtils.shuffle(_0x102C5.randomCardArray[0].parent.children)
                };
                _0x102C5.buttonPressed = function(_0xC652) {
                    Components.DevUtils.playSound(_0xB90A[624]);
                    _0xC652.disableInput();
                    if (_0x102C5.cardClickCheck == _0xB90A[27]) {
                        _0x102C5.cardClickCheck = _0xC652.name
                    } else {
                        var _0x103BF = _0xC652.name;
                        var _0x1035B = Number(_0x102C5.cardClickCheck);
                        var _0x10374 = Number(_0x103BF);
                        var _0x10329 = GameObject.getObjectsByTag(_0x102C5.cardTag);
                        for (var _0x102F7 = 0; _0x102F7 < _0x10329.length; _0x102F7++) {
                            var _0x103A6 = _0x10329[_0x102F7];
                            _0x103A6.disableInput()
                        };
                        if (_0x1035B % 2 == 0 && _0x10374 == _0x1035B - 1 || _0x1035B % 2 != 0 && _0x10374 == _0x1035B + 1) {
                            trace(_0xB90A[625]);
                            var _0x1038D = GameObject.getObject(_0x102C5.cardClickCheck);
                            var _0x10342 = GameObject.getObject(_0x103BF);
                            Components.Tweens.create(_0x1038D.parent.scale).to(_0xC639(_0xB90A[43], 0.7, _0xB90A[44], 0.7), 150, null, true, 0, 1, true);
                            Components.Tweens.create(_0x10342.parent.scale).to(_0xC639(_0xB90A[43], 0.7, _0xB90A[44], 0.7), 150, null, true, 0, 1, true);
                            _0x1038D.visible = false;
                            _0x10342.visible = false;
                            _0x102C5.animOne.x = _0x1038D.parent.x;
                            _0x102C5.animOne.y = _0x1038D.parent.y;
                            _0x102C5.animTwo.x = _0x10342.parent.x;
                            _0x102C5.animTwo.y = _0x10342.parent.y;
                            for (var _0x10310 = 0; _0x10310 < _0x10329.length; _0x10310++) {
                                var _0x103A6 = _0x10329[_0x10310];
                                _0x103A6.enableInput()
                            };
                            Components.DevUtils.playSound(_0xB90A[626]);
                            _0x102C5.events.throwEvent(_0xB90A[627]);
                            _0x102C5.cardsMatched++;
                            _0x102C5.cardClickCheck = _0xB90A[27];
                            if (_0x102C5.cardsMatched == 5) {
                                var _0xCBFC = Components.GameTimer.instance.getTimeLeft(Components.TimerType.minigame);
                                trace(_0xB90A[628], _0xCBFC);
                                Components.GameTimer.instance.pauseTimer(Components.TimerType.minigame);
                                if (_0xCBFC > 9) {
                                    _0x102C5.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                        [Components.SessionData.STAR, Components.SessionData.THREE_STAR]
                                    ]))
                                } else {
                                    if (_0xCBFC > 3) {
                                        _0x102C5.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                            [Components.SessionData.STAR, Components.SessionData.TWO_STAR]
                                        ]))
                                    } else {
                                        _0x102C5.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                            [Components.SessionData.STAR, Components.SessionData.ONE_STAR]
                                        ]))
                                    }
                                }
                            }
                        } else {
                            var _0x1038D = GameObject.getObject(_0x102C5.cardClickCheck);
                            var _0x10342 = GameObject.getObject(_0x103BF);
                            if (Components.DevUtils.getCurrentUnitName() == _0xB90A[629]) {
                                if (_0x102C5.checkCard.has(_0x1038D) || _0x102C5.checkCard.has(_0x10342)) {
                                    Components.GameTimer.instance.changeTimeFor(Components.TimerType.minigame, -5)
                                };
                                _0x102C5.checkCard.add(_0x1038D);
                                _0x102C5.checkCard.add(_0x10342)
                            };
                            Components.DevUtils.playSound(_0xB90A[630]);
                            Components.Tweens.create(_0x1038D.parent).to(_0xC639(_0xB90A[46], -5), 15, null, true, 200, 0, true).onComplete.addOnce(function() {
                                Components.Tweens.create(_0x1038D.parent).to(_0xC639(_0xB90A[46], 5), 30, null, true, 0, 0, true).onComplete.addOnce(function() {
                                    Components.Tweens.create(_0x1038D.parent).to(_0xC639(_0xB90A[46], -5), 30, null, true, 0, 0, true).onComplete.addOnce(function() {
                                        Components.Tweens.create(_0x1038D.parent).to(_0xC639(_0xB90A[46], 0), 15, null, true, 0, 0, true)
                                    })
                                })
                            });
                            Components.Tweens.create(_0x10342.parent).to(_0xC639(_0xB90A[46], -5), 15, null, true, 200, 0, true).onComplete.addOnce(function() {
                                Components.Tweens.create(_0x10342.parent).to(_0xC639(_0xB90A[46], 5), 30, null, true, 0, 0, true).onComplete.addOnce(function() {
                                    Components.Tweens.create(_0x10342.parent).to(_0xC639(_0xB90A[46], -5), 30, null, true, 0, 0, true).onComplete.addOnce(function() {
                                        Components.Tweens.create(_0x10342.parent).to(_0xC639(_0xB90A[46], 0), 15, null, true, 0, 0, true)
                                    })
                                })
                            });
                            _0x102C5.gameObject.game.time.events.add(1200, function() {
                                var _0x1038D = GameObject.getObject(_0x102C5.cardClickCheck);
                                var _0x10342 = GameObject.getObject(_0x103BF);
                                Components.Tweens.create(_0x1038D.scale).to(_0xC639(_0xB90A[43], 1), 100, null, true);
                                Components.Tweens.create(_0x10342.scale).to(_0xC639(_0xB90A[43], 1), 100, null, true);
                                for (var _0x103D8 = 0; _0x103D8 < _0x10329.length; _0x103D8++) {
                                    var _0x103A6 = _0x10329[_0x103D8];
                                    _0x103A6.enableInput()
                                };
                                var _0x1040A = _0x1038D.parent;
                                var _0x10423 = _0x10342.parent;
                                for (var _0x103F1 = 0; _0x103F1 < _0x1040A.children.length; _0x103F1++) {
                                    var _0x1043C = _0x1040A.children[_0x103F1];
                                    if (!_0x1043C.getComponent(Components.ButtonComponent)) {
                                        Components.Tweens.create(_0x1043C.scale).to(_0xC639(_0xB90A[43], 0), 150, null, true)
                                    }
                                };
                                for (var _0xC9D6 = 0; _0xC9D6 < _0x10423.children.length; _0xC9D6++) {
                                    var _0x10455 = _0x10423.children[_0xC9D6];
                                    if (!_0x10455.getComponent(Components.ButtonComponent)) {
                                        Components.Tweens.create(_0x10455.scale).to(_0xC639(_0xB90A[43], 0), 150, null, true)
                                    }
                                };
                                _0x102C5.cardClickCheck = _0xB90A[27]
                            }, _0xB9B9(_0x102C5))
                        }
                    }
                };
                _0x102C5.animDone = function() {
                    _0x102C5.gameObject.game.time.events.add(1000, function() {
                        Components.GameTimer.instance.resetTimeAt(Components.TimerType.minigame, 60, true);
                        Components.GameTimer.instance.addOnComplete(Components.TimerType.minigame, _0x102C5.onComplete)
                    }, _0xB9B9(_0x102C5))
                };
                _0x102C5.onComplete = function() {
                    _0x102C5.once = false
                    if (_0x102C5.once) {
                        _0x102C5.events.throwEvent(Components.SessionData.SHOW_EXTRA_TIME_POPUP);
                        _0x102C5.once = false
                    } else {
                        Components.DevUtils.playSound(_0xB90A[266]);
                        _0x102C5.events.throwEvent(Components.SessionData.LOSE_LIFE);
                        _0x102C5.events.throwEvent(Components.SessionData.SHOW_TRY_AGAIN_POPUP)
                    }
                };
                return _0x102C5
            }
            _0xB987(_0x1027A, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(_0xB90A[31], this.randomizePos)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x102AC = this;
                this.events.addEventListener(_0xB90A[28], function() {
                    if (Components.SessionData.UNLOCKED_LEVELS.indexOf(_0xB90A[631]) != -1) {
                        _0x102AC.events.throwEvent(_0xB90A[120])
                    }
                });
                this.objectsInit();
                Components.GameTimer.instance.addOnUpdate(Components.TimerType.minigame, this.handleTimer);
                this.events.addEventListener(_0xB90A[254], function() {
                    Managers.SceneManager.instance.loadUnit(_0x102AC.exitButton.getComponent(Components.LoadUnitComponent).unit, true)
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (Components.SessionData.UNLOCKED_LEVELS.indexOf(_0xB90A[631]) != -1) {
                    Components.GameTimer.instance.resetTimeAt(Components.TimerType.minigame, 60, true);
                    Components.GameTimer.instance.addOnComplete(Components.TimerType.minigame, this.onComplete)
                } else {
                    if (Components.DevUtils.getCurrentUnitName() == _0xB90A[632] && Components.DevUtils.getUnitStartTimes(_0xB90A[632]) == 1) {
                        this.events.addEventListener(_0xB90A[121], this.animDone, true)
                    } else {
                        Components.GameTimer.instance.resetTimeAt(Components.TimerType.minigame, 60, true);
                        Components.GameTimer.instance.addOnComplete(Components.TimerType.minigame, this.onComplete)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                Components.GameTimer.instance.removeOnComplete(Components.TimerType.minigame, this.onComplete);
                Components.GameTimer.instance.removeOnUpdate(Components.TimerType.minigame, this.handleTimer);
                _get(_getPrototypeOf(_0x1027A.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x1027A
        }(Scene.Component);
        Components.MemoryGame = _0x1027A
    }

    function _0xBEB4(Components) {
        var _0x1046E = function(_0x10487) {
            _0xBA1D(_0x1046E, _0x10487);

            function _0x1046E() {
                var _0x104A0;
                _0xB955(this, _0x1046E);
                _0x104A0 = _0xB9A0(this, _getPrototypeOf(_0x1046E).apply(this, arguments));
                _0x104A0.showNextAfter = 3;
                _0x104A0.scaleAnim = false;
                _0x104A0.categProp = [];
                _0x104A0.initMc = function() {
                    _0x104A0.decoButtons = GameObject.getObjectsByTag(_0x104A0.buttonTag, true);
                    _0x104A0.containers = GameObject.getObjectsByTag(_0x104A0.containersTag, true);
                    _0x104A0.nextButton = GameObject.getObjectsByTag(_0x104A0.nextButtonTag, true)[0];
                    _0x104A0.defaults = _0x104A0.withDefault.split(_0xB90A[572])
                };
                _0x104A0.handleButtonsAnim = function() {
                    _0x104A0.decoButtons.forEach(function(_0xCE22) {
                        _0xCE22.getComponent(Components.GlowComponent).blink(2)
                    });
                    _0x104A0.gameObject.game.time.events.add(2000, function() {
                        _0x104A0.loopAnim()
                    }, _0xB9B9(_0x104A0))
                };
                _0x104A0.loopAnim = function() {
                    var _0xCE3B = _0x104A0.decoButtons[Math.floor(Math.random() * _0x104A0.decoButtons.length)];
                    Components.Tweens.create(_0xCE3B, true).to(_0xC639(_0xB90A[46], 5), 50, null, true, 0, 5, true).onComplete.addOnce(function() {
                        _0x104A0.gameObject.game.time.events.add(1500, _0x104A0.loopAnim, _0xB9B9(_0x104A0))
                    })
                };
                _0x104A0.initMcProp = function() {
                    _0x104A0.nextButton.disableInput();
                    _0x104A0.nextButton.scale[_0xB90A[95]](0, 0);
                    _0x104A0.createCategories()
                };
                _0x104A0.initLocalEvents = function() {
                    for (var _0x104B9 = 0; _0x104B9 < _0x104A0.decoButtons.length; _0x104B9++) {
                        var _0xCE22 = _0x104A0.decoButtons[_0x104B9];
                        _0xCE22.addButtonPressedCallback(_0x104A0.handleClick)
                    }
                };
                _0x104A0.createCategories = function() {
                    for (var _0x104D2 = 0; _0x104D2 < _0x104A0.containers.length; _0x104D2++) {
                        var _0x104EB = _0x104A0.containers[_0x104D2];
                        var _0x10536 = [];
                        for (var _0xC9D6 = 0; _0xC9D6 < _0x104EB.children.length; _0xC9D6++) {
                            var _0xC652 = _0x104EB.children[_0xC9D6];
                            if (_0x104A0.defaults.indexOf(_0x104EB.tags[1]) != -1 && _0xC9D6 == 0) {
                                if (_0x104A0.scaleAnim) {
                                    _0xC652.scale.x = 1
                                } else {
                                    _0xC652.alpha = 1
                                }
                            } else {
                                if (_0x104A0.scaleAnim) {
                                    _0xC652.scale.x = 0
                                } else {
                                    _0xC652.alpha = 0
                                }
                            };
                            _0x10536.push(_0xC652)
                        };
                        var _0x10504 = _0x104A0.defaults.indexOf(_0x104EB.tags[1]) != -1 ? _0x10536.length - 1 : _0x10536.length;
                        var _0x1051D = _0x104A0.defaults.indexOf(_0x104EB.tags[1]) != -1 ? 0 : _0x10536.length;
                        var _0xD47B = {
                            array: _0x10536,
                            currentVisible: _0x1051D,
                            limit: _0x10504
                        };
                        _0x104A0.categProp.push(_0xD47B)
                    }
                };
                _0x104A0.handleClick = function(_0xCE3B) {
                    var _0xCC2E = Number(_0xCE3B.tags[1]) - 1;
                    _0xCE3B.angle = 0;
                    Components.Tweens.create(_0xCE3B, true).to(_0xC639(_0xB90A[46], 5), 50, null, true, 0, 5, true);
                    _0x104A0.handleCurentVisible(_0xCC2E);
                    _0x104A0.checkNext()
                };
                _0x104A0.checkNext = function() {
                    if (_0x104A0.showNextAfter > 0) {
                        _0x104A0.showNextAfter--;
                        if (_0x104A0.showNextAfter == 0) {
                            Components.Tweens.create(_0x104A0.nextButton.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 400, null, true).onComplete.addOnce(function() {
                                _0x104A0.nextButton.enableInput()
                            })
                        }
                    }
                };
                _0x104A0.handleCurentVisible = function(_0xD15B) {
                    var _0xD430 = _0x104A0.categProp[_0xD15B];
                    trace(_0xD430);
                    trace(_0xD430, _0xD15B);
                    var _0x1051D = _0xD430.currentVisible + 1;
                    if (_0x1051D > _0xD430.limit) {
                        _0x1051D = 0
                    };
                    _0xD430.currentVisible = _0x1051D;
                    for (var _0x1054F = 0; _0x1054F <= _0xD430.limit; _0x1054F++) {
                        var _0xCE22 = _0xD430.array[_0x1054F];
                        if (_0xCE22 && _0x1054F == _0x1051D) {
                            if (_0x104A0.scaleAnim) {
                                Components.Tweens.create(_0xCE22.scale, true).to(_0xC639(_0xB90A[43], 1), 200, null, true)
                            } else {
                                Components.Tweens.create(_0xCE22, true).to(_0xC639(_0xB90A[45], 1), 200, null, true)
                            }
                        } else {
                            if (_0xCE22) {
                                if (_0x104A0.scaleAnim) {
                                    Components.Tweens.create(_0xCE22.scale, true).to(_0xC639(_0xB90A[43], 0), 200, null, true)
                                } else {
                                    Components.Tweens.create(_0xCE22, true).to(_0xC639(_0xB90A[45], 0), 200, null, true)
                                }
                            }
                        }
                    };
                    _0x104A0.events.throwEvent(_0x1046E.DECO_CHANGE)
                };
                return _0x104A0
            }
            _0xB987(_0x1046E, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.initMcProp();
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                this.handleButtonsAnim()
            })]);
            return _0x1046E
        }(Scene.Component);
        _0x1046E.DECO_CHANGE = _0xB90A[633];
        Components.SimpleDeco = _0x1046E
    }

    function _0xBECD(Components) {
        var _0x10568 = function(_0x10581) {
            _0xBA1D(_0x10568, _0x10581);

            function _0x10568() {
                var _0x1059A;
                _0xB955(this, _0x10568);
                _0x1059A = _0xB9A0(this, _getPrototypeOf(_0x10568).apply(this, arguments));
                _0x1059A.startTimer = function() {
                    _0x1059A.timerDone = false;
                    _0x1059A.totalTime = _0x1059A.timeAmount * 1000;
                    _0x1059A.events.addEventListener(_0xB90A[29], _0x1059A.displayTimer)
                };
                _0x1059A.createCounter = function() {
                    _0x1059A.gameObject.addComponent(new Components.TextLabel());
                    _0x1059A.gameObject.getComponent(Components.TextLabel).displayEvent = _0x1059A.gameObject.name;
                    _0x1059A.gameObject.getComponent(Components.TextLabel).created();
                    _0x1059A.gameObject.getComponent(Components.TextLabel).init()
                };
                _0x1059A.displayTimer = function() {
                    if (!_0x1059A.timerDone) {
                        if (_0x1059A.totalTime >= 0) {
                            if (_0x1059A.totalTime <= 0) {
                                _0x1059A.totalTime = 0;
                                _0x1059A.timerDone = true;
                                _0x1059A.events.throwEvent(_0x10568.DISPLAY_TIMER, Util.Util.createEventData([
                                    [Components.TextLabel.TEXT, _0xB90A[117]]
                                ]));
                                _0x1059A.events.throwEvent(_0x10568.TIMER_DONE);
                                return
                            };
                            _0x1059A.timePass = _0x1059A.gameObject.game.time.elapsed;
                            _0x1059A.totalTime -= _0x1059A.timePass;
                            _0x1059A.seconds = Math.floor(_0x1059A.totalTime % 60000 / 1000).toString();
                            _0x1059A.minutes = Math.floor(_0x1059A.totalTime / 60000).toString();
                            if (_0x1059A.minutes.length == 1) {
                                _0x1059A.timeText = _0xB90A[114] + _0x1059A.minutes + _0xB90A[115] + _0x1059A.seconds;
                                if (_0x1059A.seconds.length == 1) {
                                    _0x1059A.timeText = _0x1059A.minutes + _0xB90A[115] + _0xB90A[114] + _0x1059A.seconds
                                }
                            };
                            if (_0x1059A.seconds.length == 1) {
                                _0x1059A.timeText = _0x1059A.minutes + _0xB90A[115] + _0xB90A[114] + _0x1059A.seconds
                            };
                            if (_0x1059A.minutes.length != 1 && _0x1059A.seconds.length != 1) {
                                _0x1059A.timeText = _0x1059A.minutes + _0xB90A[115] + _0x1059A.seconds
                            };
                            _0x1059A.events.throwEvent(_0x10568.DISPLAY_TIMER, Util.Util.createEventData([
                                [Components.TextLabel.TEXT, _0x1059A.timeText]
                            ]))
                        } else {
                            _0x1059A.timerDone = true;
                            _0x1059A.events.removeEventListener(_0xB90A[29], _0x1059A.displayTimer);
                            _0x1059A.events.throwEvent(_0x10568.DISPLAY_TIMER, Util.Util.createEventData([
                                [Components.TextLabel.TEXT, _0xB90A[117]]
                            ]));
                            _0x1059A.events.throwEvent(_0x10568.TIMER_DONE)
                        }
                    }
                };
                return _0x1059A
            }
            _0xB987(_0x10568, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0x10568.START_TIMER, this.startTimer);
                this.gameObject.alpha = 0
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x10568
        }(Scene.Component);
        _0x10568.START_TIMER = _0xB90A[634];
        _0x10568.TIMER_DONE = _0xB90A[635];
        _0x10568.DISPLAY_TIMER = _0xB90A[636];
        Components.SimpleTimer = _0x10568
    }

    function _0xBEE6(Components) {
        var _0x105B3 = function(_0x105CC) {
            _0xBA1D(_0x105B3, _0x105CC);

            function _0x105B3() {
                var _0x105E5;
                _0xB955(this, _0x105B3);
                _0x105E5 = _0xB9A0(this, _getPrototypeOf(_0x105B3).apply(this, arguments));
                _0x105E5.isEmpty = true;
                _0x105E5.createInput = function() {
                    _0x105E5.style = _0xC639(_0xB90A[637], _0x105E5.textAlign, _0xB90A[613], _0x105E5.size + _0xB90A[638] + _0x105E5.font, _0xB90A[617], _0x105E5.color, _0xB90A[639], _0x105E5.color, _0xB90A[611], 0, _0xB90A[640], _0x105E5.fontFormat, _0xB90A[599], _0x105E5.gameObject.width, _0xB90A[600], _0x105E5.gameObject.height, _0xB90A[641], _0x105E5.defaultText, _0xB90A[642], _0x105E5.maxCharNr, _0xB90A[643], PhaserInput.InputType.text, _0xB90A[644], false);
                    _0x105E5.input = new PhaserInput.InputField(_0x105E5.gameObject.game, 0, _0x105E5.gameObject.height / 8, _0x105E5.style);
                    _0x105E5.gameObject.addChild(_0x105E5.input);
                    _0x105E5.events.addEventListener(_0xB90A[29], function() {
                        _0x105E5.input.update()
                    })
                };
                _0x105E5.initLocalEvents = function() {
                    _0x105E5.events.addEventListener(_0xB90A[645], function() {
                        if (_0x105E5.input.value.length == 0) {
                            _0x105E5.events.throwEvent(_0xB90A[646]);
                            _0x105E5.isEmpty = true
                        } else {
                            _0x105E5.events.throwEvent(_0xB90A[647]);
                            _0x105E5.isEmpty = false
                        }
                    });
                    if (_0x105E5.reset) {
                        _0x105E5.events.addEventListener(_0x105E5.reset, function() {
                            _0x105E5.input.resetText()
                        })
                    };
                    _0x105E5.events.addEventListener(Managers.SceneManager.LOAD_UNIT, _0x105E5.saveAndDestroy)
                };
                _0x105E5.saveAndDestroy = function() {
                    if (_0x105E5.input) {
                        if (_0x105E5.dataId) {
                            Util.Globals.addToGlobals(_0x105E5.dataId, _0x105E5.input.value)
                        };
                        _0x105E5.input.destroy()
                    }
                };
                return _0x105E5
            }
            _0xB987(_0x105B3, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.createInput();
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                this.input.update()
            })]);
            return _0x105B3
        }(Scene.Component);
        Components.TextInput = _0x105B3
    }

    function _0xBEFF(Components) {
        var _0x105FE = function(_0x10617) {
            _0xBA1D(_0x105FE, _0x10617);

            function _0x105FE() {
                var _0x10630;
                _0xB955(this, _0x105FE);
                _0x10630 = _0xB9A0(this, _getPrototypeOf(_0x105FE).apply(this, arguments));
                _0x10630.fontAndSize = _0xB90A[648];
                _0x10630.displayEvent = _0xB90A[649];
                _0x10630.created = function() {
                    _0x10630.events.addEventListener(_0x10630.displayEvent, _0x10630.handleTextDisplay);
                    _0x10630.textField = new Phaser.Text(Core.Main.game, 0, 0, _0xB90A[27], _0xC639(_0xB90A[613], _0xB90A[650], _0xB90A[615], _0xB90A[616], _0xB90A[617], _0xB90A[651], _0xB90A[618], _0xB90A[652], _0xB90A[619], _0xB90A[620]));
                    _0x10630.gameObject.addChild(_0x10630.textField);
                    _0x10630.textField.anchor[_0xB90A[95]](0.5, 0.5);
                    _0x10630.textField.position[_0xB90A[95]](0, 0)
                };
                _0x10630.setText = function(_0x10248) {
                    _0x10630.textField.setText(_0x10248, true)
                };
                _0x10630.handleTextDisplay = function(_0xCF35) {
                    _0x10630.textField.fontSize = 25;
                    var _0x1022F = _0xCF35.getData(_0x105FE.TEXT);
                    _0x10630.setText(_0x1022F);
                    _0x10630.textField.fontSize = _0x10630.setSize(_0x10630.textField, _0x10630.textField.text, _0x10630.gameObject.width, _0x10630.gameObject.height)
                };
                return _0x10630
            }
            _0xB987(_0x105FE, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(Scene.Unit.UNIT_CREATED, this.created)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (this.fontAndSize != _0xB90A[27]) {
                    var _0xCD8C = this.fontAndSize.split(_0xB90A[572]);
                    this.textField.cssFont = _0xCD8C[1] + _0xB90A[638] + _0xCD8C[0];
                    if (_0xCD8C[2]) {
                        this.textField.fill = _0xCD8C[2]
                    };
                    if (_0xCD8C[3]) {
                        this.textField.boundsAlignH = _0xCD8C[3]
                    }
                };
                this.textField.wordWrap = true;
                this.textField.wordWrapWidth = this.gameObject.width
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[622], _0xB90A[5], function _0x101FD(_0x10261, _0x10248, _0xE92F, _0xE916) {
                if (!(_0xB90A[623] in _0x10261)) {
                    _0x10261[_0xB90A[623]] = _0x10261.fontSize
                };
                _0x10261.fontSize = _0x10261[_0xB90A[623]];
                if (_0x10261.wordWrap) {
                    _0xE92F = _0x10261.wordWrapWidth
                };
                _0x10261.text = _0x10248;
                if (_0xE92F > 0 && _0xE916 > 0) {
                    var _0xD5D9 = _0x10261[_0xB90A[623]];
                    while ((_0x10261.width > _0xE92F || _0x10261.height > _0xE916) && _0x10261.fontSize > 4) {
                        _0x10261.fontSize = --_0xD5D9
                    }
                };
                return _0xD5D9
            })]);
            return _0x105FE
        }(Scene.Component);
        _0x105FE.TEXT = _0xB90A[542];
        Components.TextLabel = _0x105FE
    }

    function _0xBF18(Components) {
        var _0x10649 = function(_0x10662) {
            _0xBA1D(_0x10649, _0x10662);

            function _0x10649() {
                var _0x106C6;
                _0xB955(this, _0x10649);
                _0x106C6 = _0xB9A0(this, _getPrototypeOf(_0x10649).apply(this, arguments));
                _0x106C6.applyGradient = false;
                _0x106C6.color = new Components.Pixel();
                _0x106C6.dx = 0;
                _0x106C6.dy = 0;
                _0x106C6.data = new Components.ColorWheelData();
                _0x106C6.shouldUpdate = false;
                _0x106C6.disableGradient = function() {
                    _0x106C6.applyGradient = false
                };
                _0x106C6.enableGradient = function() {
                    _0x106C6.applyGradient = true
                };
                _0x106C6.update = function() {
                    if (_0x106C6.gameObject.visible && _0x106C6.shouldUpdate) {
                        _0x106C6.updateImg();
                        _0x106C6.shouldUpdate = false
                    }
                };
                _0x106C6.onActivate = function() {
                    if (_0x106C6.deactivateEvent) {
                        _0x106C6.events.addEventListener(_0x106C6.deactivateEvent, _0x106C6.onDeactivate, true)
                    };
                    if (_0x10649.lastDeactivated != _0x106C6.activateEvent) {
                        _0x106C6.events.throwEvent(_0x10649.DEACTIVATE_TINT, Util.Util.createEventData([
                            [_0xB90A[653], _0x106C6.activateEvent]
                        ]));
                        _0x10649.lastDeactivated = _0x106C6.activateEvent
                    };
                    _0x106C6.events.addEventListener(_0xB90A[565], _0x106C6.changeColor);
                    _0x106C6.events.addEventListener(_0x10649.DEACTIVATE_TINT, _0x106C6.onDeactivate)
                };
                _0x106C6.onDeactivate = function(_0xCF35) {
                    if (_0xCF35 && _0xCF35.getData(_0xB90A[653]) == _0x106C6.activateEvent) {
                        return
                    };
                    _0x106C6.events.removeEventListener(_0xB90A[565], _0x106C6.changeColor);
                    _0x106C6.events.removeEventListener(_0x10649.DEACTIVATE_TINT, _0x106C6.onDeactivate)
                };
                _0x106C6.updateImg = function() {
                    if (_0x106C6.screenTexture) {
                        _0x106C6.screenTexture.visible = true;
                        var _0x106F8 = PIXI.CanvasTinter.getTintedTexture(_0x106C6.screenTexture, _0x106C6.color.getHex());
                        _0x106C6.screenTexture.tintedTexture = _0x106F8
                    };
                    _0x106C6.bmd.blendSourceOver();
                    _0x106C6.bmd.clear();
                    _0x106C6.bmd.draw(_0x106C6.initialTexture, 0, 0);
                    _0x106C6.bmd.blendMultiply();
                    _0x106C6.color.a = 0.7 * _0x106C6.color.a;
                    var _0x106DF;
                    if (_0x106C6.applyGradient) {
                        _0x106DF = _0x106C6.bmd.ctx.createLinearGradient(_0x106C6.bmd.width / 2, 0, _0x106C6.bmd.width / 2, _0x106C6.bmd.height);
                        _0x106DF.addColorStop(0, _0x106C6.color.getRgb());
                        _0x106DF.addColorStop(1, _0x106C6.data.randomColor.getRgb());
                        _0x106C6.bmd.rect(0, 0, _0x106C6.bmd.width, _0x106C6.bmd.height, _0x106DF)
                    } else {
                        _0x106DF = _0x106C6.color;
                        _0x106C6.bmd.rect(0, 0, _0x106C6.bmd.width, _0x106C6.bmd.height, _0x106DF.getRgb())
                    };
                    _0x106C6.color.a = 255;
                    if (_0x106C6.screenTexture) {
                        _0x106C6.bmd.blendScreen();
                        _0x106C6.screenTexture.updateTransform();
                        _0x106C6.bmd.draw(_0x106F8, _0x106C6.dx, _0x106C6.dy)
                    };
                    _0x106C6.bmd.blendDestinationIn();
                    _0x106C6.bmd.draw(_0x106C6.initialTexture, 0, 0);
                    if (_0x106C6.screenTexture) {
                        _0x106C6.screenTexture.visible = false
                    }
                };
                _0x106C6.changeColor = function(_0xCF35) {
                    var _0xCD8C = _0xCF35.getData(_0xB90A[62]);
                    Components.ColorWheelData.copyTo(_0xCD8C, _0x106C6.data);
                    var _0xFAC3 = _0xCD8C.color;
                    Components.Pixel.copyTo(_0xFAC3, _0x106C6.color);
                    if (_0x106C6.gameObject.visible) {
                        _0x106C6.updateImg()
                    } else {
                        _0x106C6.shouldUpdate = true
                    }
                };
                return _0x106C6
            }
            _0xB987(_0x10649, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(this.activateEvent, this.onActivate)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.findObjects();
                if (this.screenTexture) {
                    this.findOffset()
                };
                this.bmd = Util.Bitmap.create(this.mainTexture.width, this.mainTexture.height);
                this.initialTexture = Util.Bitmap.create(this.mainTexture.width, this.mainTexture.height);
                this.initialTexture.draw(this.mainTexture.texture.baseTexture.source);
                this.mainTexture.loadTexture(this.bmd);
                this.bmd.draw(this.initialTexture, 0, 0);
                this.events.addEventListener(_0xB90A[654], this.update)
            }), _0xC639(_0xB90A[13], _0xB90A[655], _0xB90A[5], function _0x1067B() {
                var _0x106AD = this;
                this.gameObject.children.forEach(function(_0xC652) {
                    if (_0xC652.name.includes(_0xB90A[656])) {
                        _0x106AD.mainTexture = _0xC652
                    };
                    if (_0xC652.name.includes(_0xB90A[657])) {
                        _0x106AD.screenTexture = _0xC652
                    }
                });
                if (this.isMainTexture) {
                    this.mainTexture = this.gameObject
                }
            }), _0xC639(_0xB90A[13], _0xB90A[658], _0xB90A[5], function _0x10694() {
                if (this.isMainTexture) {
                    this.dx = this.screenTexture.x;
                    this.dy = this.screenTexture.y
                };
                this.dx = this.screenTexture.x - this.screenTexture.width * this.screenTexture.anchor.x;
                this.dy = this.screenTexture.y - this.screenTexture.height * this.screenTexture.anchor.y;
                this.dx -= this.mainTexture.x - this.mainTexture.width * this.screenTexture.anchor.x;
                this.dy -= this.mainTexture.y - this.mainTexture.height * this.screenTexture.anchor.y
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                _0x10649.lastDeactivated = _0xB90A[27];
                _get(_getPrototypeOf(_0x10649.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x10649
        }(Scene.Component);
        _0x10649.DEACTIVATE_TINT = _0xB90A[659];
        _0x10649.lastDeactivated = _0xB90A[27];
        Components.TintComp = _0x10649
    }

    function _0xBF31(Components) {
        var _0x10711 = function(_0x1072A) {
            _0xBA1D(_0x10711, _0x1072A);

            function _0x10711() {
                _0xB955(this, _0x10711);
                return _0xB9A0(this, _getPrototypeOf(_0x10711).apply(this, arguments))
            }
            _0xB987(_0x10711, [_0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743() {
                if (!this.customEvent) {
                    this.events.throwEvent(this.gameObject.name.split(_0xB90A[61])[0], Util.Util.createEventData([
                        [_0xB90A[661], this.gameObject.tags[1]]
                    ]))
                } else {
                    this.events.throwEvent(this.gameObject.name.split(_0xB90A[61])[0], Util.Util.createEventData([
                        [_0xB90A[661], this.gameObject.name.split(_0xB90A[61])[1]]
                    ]))
                }
            })]);
            return _0x10711
        }(Scene.Component);
        Components.ColorButtonComponent = _0x10711
    }

    function _0xBF4A(Components) {
        var _0x1075C = function(_0x10775) {
            _0xBA1D(_0x1075C, _0x10775);

            function _0x1075C() {
                var _0x10AE0;
                _0xB955(this, _0x1075C);
                _0x10AE0 = _0xB9A0(this, _getPrototypeOf(_0x1075C).apply(this, arguments));
                _0x10AE0.imgSrc = [];
                _0x10AE0.fillOnComplete = true;
                _0x10AE0.positions = [];
                _0x10AE0.resetOnChange = false;
                _0x10AE0.showEraseFromStart = 0;
                _0x10AE0.keepShape = false;
                _0x10AE0.showPenSize = false;
                _0x10AE0._totalPixels = 0;
                _0x10AE0._isActive = false;
                _0x10AE0._isDrawing = false;
                _0x10AE0.lastX = null;
                _0x10AE0.lastY = null;
                _0x10AE0.offsets = [];
                _0x10AE0.completionCount = 0;
                _0x10AE0.updateCycle = 0;
                _0x10AE0.lastColor = -1;
                _0x10AE0.pixelsMap = new Map();
                _0x10AE0.canvasChanged = true;
                _0x10AE0.wasCompleted = false;
                _0x10AE0.isCustomColor = false;
                _0x10AE0.showInitial = false;
                _0x10AE0.onDeactivateErase = function() {
                    _0x10AE0.erase = false;
                    trace(_0xB90A[662])
                };
                _0x10AE0.onActivateErase = function() {
                    _0x10AE0.erase = true;
                    trace(_0xB90A[663])
                };
                _0x10AE0.onChangeBrushType = function(_0xCF35) {
                    _0x10AE0.withAlpha = _0xCF35.getData(_0xB90A[664]) == _0xB90A[468];
                    _0x10AE0.createCircle();
                    _0x10AE0.onDeactivateErase()
                };
                _0x10AE0.onChangeBrushSize = function(_0xCF35) {
                    _0x10AE0.penSize = Number(_0xCF35.getData(_0xB90A[255]));
                    _0x10AE0.createCircle();
                    if (_0x10AE0.showPenSize) {
                        _0x10AE0.drawPenSize()
                    }
                };
                _0x10AE0.onColorFromEvent = function(_0xCF35) {
                    var _0x106DF = _0xB90A[27];
                    if (_0xCF35.getData(_0xB90A[62])) {
                        _0x106DF = _0xCF35.getData(_0xB90A[62]).color.getRgb()
                    };
                    if (_0xCF35.getData(_0xB90A[665])) {
                        _0x106DF = _0xCF35.getData(_0xB90A[665])
                    };
                    var _0x10AF9 = GameObject.getObject(_0x10AE0.gameObject.name + _0xB90A[666]);
                    _0x10AE0.imageCanvas.draw(_0x10AE0.image, 0, 0);
                    _0x10AE0.imageCanvas.blendMultiply();
                    _0x10AE0.imageCanvas.rect(0, 0, _0x10AE0.imageCanvas.width, _0x10AE0.imageCanvas.height, _0x106DF);
                    _0x10AE0.imageCanvas.blendSourceOver();
                    if (_0x10AF9) {
                        _0x10AE0.dx = _0x10AF9.x - _0x10AF9.width * _0x10AF9.anchor.x;
                        _0x10AE0.dy = _0x10AF9.y - _0x10AF9.height * _0x10AF9.anchor.y;
                        _0x10AE0.dx -= _0x10AE0.gameObject.x - _0x10AE0.gameObject.width * _0x10AE0.gameObject.anchor.x;
                        _0x10AE0.dy -= _0x10AE0.gameObject.y - _0x10AE0.gameObject.height * _0x10AE0.gameObject.anchor.y;
                        _0x10AE0.imageCanvas.blendScreen();
                        _0x10AE0.imageCanvas.draw(_0x10AF9.texture.baseTexture.source, _0x10AE0.dx, _0x10AE0.dy);
                        _0x10AE0.imageCanvas.blendSourceOver()
                    };
                    _0x10AE0.imageCanvas.blendDestinationIn();
                    _0x10AE0.imageCanvas.draw(_0x10AE0.image, 0, 0);
                    _0x10AE0.imageCanvas.blendSourceOver()
                };
                _0x10AE0.penAndCompletion = function() {
                    if (_0x10AE0.showPenSize) {
                        _0x10AE0.updatePen()
                    };
                    if (_0x10AE0.isCustomColor) {
                        return
                    };
                    _0x10AE0.completionCount = (_0x10AE0.completionCount + 1) % _0x10AE0.checkInterval;
                    if (_0x10AE0.completionCount == 0) {
                        if (_0x10AE0.canvasChanged) {
                            var _0x109CD = _0x10AE0.resultCanvas.getPixels(_0x10AE0.completionRect);
                            _0x10AE0.completionWorker.postMessage(_0xC639(_0xB90A[667], _0x109CD.data.buffer, _0xB90A[668], _0x10AE0.completedOn, _0xB90A[669], _0x10AE0._totalPixels), [_0x109CD.data.buffer]);
                            _0x10AE0.canvasChanged = false
                        }
                    }
                };
                _0x10AE0.finalCompletion = function(_0xCF35) {
                    if (_0x10AE0.isCustomColor) {
                        return
                    };
                    var _0x10B12 = false;
                    if (_0x10AE0.erase) {
                        if (_0xCF35.data.pixels / _0x10AE0._totalPixels <= 1 - _0x10AE0.completedOnProc) {
                            _0x10B12 = true
                        }
                    } else {
                        _0x10B12 = _0xCF35.data.result
                    };
                    if (_0x10B12) {
                        _0x10AE0.wasCompleted = true;
                        if (_0x10AE0.fillOnComplete) {
                            _0x10AE0.fillCanvas()
                        };
                        _0x10AE0.deactivateDrawing();
                        _0x10AE0.throwFinalEvents()
                    }
                };
                _0x10AE0.onActivateDrawing = function(_0xCF35) {
                    _0xCF35 ? _0x10AE0.activateDrawing(_0xCF35.getData(_0xB90A[661])) : _0x10AE0.activateDrawing()
                };
                _0x10AE0.countComplete = function(_0xCF35) {
                    _0x10AE0._totalPixels = _0xCF35.data.total;
                    _0x10AE0.pixelsMap[_0xB90A[95]](_0xCF35.data.image, _0x10AE0._totalPixels)
                };
                _0x10AE0.onDeactivateAll = function(_0xCF35) {
                    if (_0xCF35) {
                        var _0x10B2B = _0xCF35.getData(_0xB90A[653]);
                        if (_0x10AE0.eventName != _0x10B2B) {
                            _0x10AE0.deactivateDrawing()
                        }
                    } else {
                        if (_0x10AE0._isActive) {
                            _0x10AE0.deactivateDrawing()
                        }
                    }
                };
                _0x10AE0.deactivateDrawing = function() {
                    if (_0x10AE0._isActive) {
                        _0x10AE0.forcedStopDrawing();
                        _0x10AE0.gameObject.game.input.onDown.remove(_0x10AE0.startDrawing);
                        _0x10AE0.gameObject.game.input.onUp.remove(_0x10AE0.stopDrawing);
                        _0x10AE0._isActive = false;
                        if (_0x10AE0._guide) {
                            _0x10AE0._guide.visible = false
                        };
                        _0x10AE0.events.removeEventListener(_0xB90A[29], _0x10AE0.penAndCompletion);
                        if (_0x10AE0.showPenSize) {
                            _0x10AE0.penGameObject.visible = false
                        }
                    }
                };
                _0x10AE0.startDrawing = function() {
                    if (_0x10AE0._isActive) {
                        _0x10AE0.lastX = null;
                        _0x10AE0.lastY = null;
                        _0x10AE0.gameObject.game.input.deleteMoveCallback(_0x10AE0.Update, _0xB9B9(_0x10AE0));
                        _0x10AE0._isDrawing = true;
                        _0x10AE0.gameObject.game.input.addMoveCallback(_0x10AE0.Update, _0xB9B9(_0x10AE0))
                    }
                };
                _0x10AE0.moveMouse = function(_0x10B44) {
                    _0x10AE0.realMx = Core.game.device.desktop ? _0x10B44.clientX : _0x10B44.changedTouches[0].clientX;
                    _0x10AE0.realMy = Core.game.device.desktop ? _0x10B44.clientY : _0x10B44.changedTouches[0].clientY;
                    if (_0x10AE0.checkStop) {
                        _0x10AE0.finalStop();
                        _0x10AE0.checkStop = false;
                        _0x10AE0._isDrawing = false
                    }
                };
                _0x10AE0.forcedStopDrawing = function() {
                    _0x10AE0._isDrawing = false;
                    _0x10AE0.gameObject.game.input.deleteMoveCallback(_0x10AE0.Update, _0xB9B9(_0x10AE0));
                    if (_0x10AE0.gameObject.game.device.desktop) {
                        _0x10AE0.gameObject.game.canvas.removeEventListener(_0xB90A[670], _0x10AE0.mouseUp)
                    } else {
                        _0x10AE0.gameObject.game.canvas.removeEventListener(_0xB90A[671], _0x10AE0.mouseUp)
                    };
                    _0x10AE0.upListenerAdded = false;
                    _0x10AE0.checkStop = false
                };
                _0x10AE0.stopDrawing = function() {
                    if (!_0x10AE0.upListenerAdded) {
                        _0x10AE0.checkStop = true
                    };
                    if (!Core.game.device.desktop) {
                        if (_0x10AE0.isInCanvas()) {
                            _0x10AE0.forcedStopDrawing()
                        }
                    }
                };
                _0x10AE0.checkStop = false;
                _0x10AE0.upListenerAdded = false;
                _0x10AE0.mouseUp = function(_0x10B44) {
                    _0x10B44.preventDefault();
                    _0x10AE0._isDrawing = false;
                    _0x10AE0.forcedStopDrawing();
                    _0x10AE0.upListenerAdded = false
                };
                _0x10AE0.l = 5000;
                _0x10AE0.t = 5000;
                _0x10AE0.r = 5000;
                _0x10AE0.b = 5000;
                _0x10AE0.w = 0;
                _0x10AE0.h = 0;
                _0x10AE0.updateNormalize = 0;
                _0x10AE0.onFill = function() {
                    if (_0x10AE0._isActive) {
                        _0x10AE0.deactivateDrawing();
                        _0x10AE0.fillCanvas();
                        _0x10AE0.events.throwEvent(Components.MouseCursorComponent.DEACTIVATE_CURSOR)
                    }
                };
                _0x10AE0.onReset = function() {
                    _0x10AE0.resultCanvas.clear();
                    _0x10AE0.finalCanvas.clear();
                    if (_0x10AE0._isActive) {
                        _0x10AE0.deactivateDrawing()
                    };
                    if (_0x10AE0.oldCanvas) {
                        _0x10AE0.oldCanvas.clear()
                    };
                    if (_0x10AE0.erase) {
                        _0x10AE0.drawingCanvas.clear()
                    };
                    if (_0x10AE0.erase) {
                        _0x10AE0.erasingCanvas.clear()
                    };
                    if (_0x10AE0.erase && _0x10AE0.showEraseFromStart != -1) {
                        _0x10AE0.changeColor(_0x10AE0.showEraseFromStart)
                    };
                    _0x10AE0.lastColor = -1;
                    _0x10AE0.events.throwEvent(Components.TypeGlow.REMOVE_TYPE_GLOW, Util.Util.createEventData([
                        [_0xB90A[672], _0x10AE0.eventName]
                    ]))
                };
                _0x10AE0.onRemoveEvents = function() {
                    if (_0x10AE0.eventName) {
                        _0x10AE0.events.removeEventListener(_0x10AE0.eventName, _0x10AE0.onActivateDrawing)
                    };
                    if (_0x10AE0.fillEvent) {
                        _0x10AE0.events.removeEventListener(_0x10AE0.fillEvent, _0x10AE0.onFill)
                    };
                    _0x10AE0.events.removeEventListener(_0x1075C.DEACTIVATE_ALL, _0x10AE0.onDeactivateAll);
                    _0x10AE0.events.removeEventListener(_0x1075C.RESET_ALL_DRAWINGS, _0x10AE0.onReset);
                    _0x10AE0.events.removeEventListener(Scene.Unit.DESTROY, _0x10AE0.onRemoveEvents);
                    _0x10AE0.events.removeEventListener(_0xB90A[29], _0x10AE0.penAndCompletion)
                };
                return _0x10AE0
            }
            _0xB987(_0x1075C, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                var _0x10C57 = this;
                this.events.addEventListener(Scene.Unit.UNIT_CREATED, function() {
                    _0x10C57.changeScaleRec(_0x10C57.gameObject)
                }, true)
            }), _0xC639(_0xB90A[13], _0xB90A[673], _0xB90A[5], function _0x107C0(_0xCC47) {
                if (_0xCC47 != null) {
                    this.originalBounds = Components.DevUtils.getBounds(this.gameObject);
                    var _0xE73B = this.gameObject.toGlobal(new PIXI.Point(0, 0));
                    this.globalOffset = new Phaser.Point(_0xE73B.x - (this.originalBounds.x + this.originalBounds.halfWidth), _0xE73B.y - (this.originalBounds.y + this.originalBounds.halfHeight));
                    this.gameObject.x -= this.globalOffset.x;
                    this.gameObject.y -= this.globalOffset.y;
                    for (var _0x10950 = 0; _0x10950 < this.gameObject.children.length; _0x10950++) {
                        var _0xF163 = this.gameObject.children[_0x10950];
                        _0xF163.x += this.globalOffset.x;
                        _0xF163.y += this.globalOffset.y
                    };
                    this.globalOffset[_0xB90A[95]](0, 0);
                    return
                };
                var _0x10969 = _0xCC47.scale.x;
                var _0x10982 = _0xCC47.scale.y;
                _0xCC47.scale[_0xB90A[95]](1, 1);
                this.changeScaleRec(_0xCC47.parent);
                _0xCC47.scale[_0xB90A[95]](_0x10969, _0x10982)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (!_0x1075C.debugRect) {
                    _0x1075C.debugRect = this.gameObject.game.add.graphics(0, 0)
                };
                this.completedOnProc = this.completedOn / 100;
                if (this.guideName) {
                    this._guide = GameObject.getObject(this.guideName);
                    Components.Tweens.create(this._guide.scale, true).to(_0xC639(_0xB90A[43], 1.2, _0xB90A[44], 1.2), 400, null, true, 0, -1, true);
                    this._guide.visible = false
                };
                this.showPenSize = false;
                if (this.showPenSize) {
                    if (this.penSize % 2 != 0) {
                        this.penSize++
                    };
                    this.penCanvas = Util.Bitmap.create(this.penSize * 2, this.penSize * 2);
                    this.penGameObject = new GameObject(this.gameObject.game, this.gameObject.name + _0xB90A[674]);
                    this.drawPenSize();
                    this.penGameObject.loadTexture(this.penCanvas);
                    this.penGameObject.anchor[_0xB90A[95]](0.5, 0.5);
                    this.penGameObject.visible = false;
                    Core.game.world.addChild(this.penGameObject)
                };
                if (this.colorFromEvent) {
                    this.events.addEventListener(this.colorFromEvent, this.onColorFromEvent);
                    this.isCustomColor = true;
                    var _0x10AF9 = GameObject.getObject(this.gameObject.name + _0xB90A[666]);
                    if (_0x10AF9) {
                        _0x10AF9.visible = false
                    }
                };
                this.getImages();
                this.erasingCanvas = Util.Bitmap.create(1, 1);
                this.drawingCanvas = Util.Bitmap.create(1, 1);
                if (!this.isCustomColor) {
                    this.resetOnChange = true
                };
                this.resultCanvas = Util.Bitmap.create(this.originalBounds.width, this.originalBounds.height);
                this.blendCanvas = Util.Bitmap.create(this.penSize * 2, this.penSize * 2);
                this.finalCanvas = Util.Bitmap.create(this.originalBounds.width, this.originalBounds.height);
                this.oldCanvas = Util.Bitmap.create(this.originalBounds.width, this.originalBounds.height);
                this.resultCanvas.blendSourceOver();
                this._colisionRect = new Phaser.Rectangle(0, 0, this.penSize * 2 - 1, this.penSize * 2 - 1);
                this.completionRect = new Phaser.Rectangle(0, 0, this.resultCanvas.width, this.resultCanvas.height);
                for (var _0xC6E8 = 0; _0xC6E8 < this.positions.length; _0xC6E8++) {
                    var _0x10B8F = Number(this.positions[_0xC6E8].split(_0xB90A[572])[0]);
                    var _0x10BA8 = Number(this.positions[_0xC6E8].split(_0xB90A[572])[1]);
                    this.offsets.push(_0xC639(_0xB90A[43], _0x10B8F, _0xB90A[44], _0x10BA8))
                };
                this.width = this.originalBounds.width;
                this.height = this.originalBounds.height;
                this._objectRect = new Phaser.Rectangle(this.gameObject.x, this.gameObject.y, this.width, this.height);
                this.image = this.imgSrc[0];
                this.imageCanvas = Util.Bitmap.create(this.image.width, this.image.height);
                this.createCircle();
                this.createWorkers();
                if (this.eventName) {
                    this.events.addEventListener(this.eventName, this.onActivateDrawing)
                };
                if (this.fillEvent) {
                    this.events.addEventListener(this.fillEvent, this.onFill)
                };
                this.events.addEventListener(_0x1075C.DEACTIVATE_ALL, this.onDeactivateAll);
                this.events.addEventListener(_0x1075C.RESET_ALL_DRAWINGS, this.onReset);
                if (!this.resetOnChange && !this.erase) {
                    this.finalCanvas.width = this.originalBounds.width;
                    this.finalCanvas.height = this.originalBounds.height;
                    this.gameObject.loadTexture(this.finalCanvas)
                } else {
                    this.resultCanvas.width = this.originalBounds.width;
                    this.resultCanvas.height = this.originalBounds.height;
                    this.gameObject.loadTexture(this.resultCanvas)
                };
                if (this.erase && this.showEraseFromStart != -1) {
                    this.changeColor(this.showEraseFromStart)
                };
                this.events.addEventListener(Scene.Unit.DESTROY, this.onRemoveEvents);
                this.events.addEventListener(_0x1075C.CHANGE_BRUSH_SIZE, this.onChangeBrushSize);
                this.events.addEventListener(_0x1075C.CHANGE_BRUSH_TYPE, this.onChangeBrushType);
                this.events.addEventListener(_0x1075C.ACTIVATE_ERASE, this.onActivateErase);
                this.events.addEventListener(_0x1075C.DEACTIVATE_ERASE, this.onDeactivateErase);
                if (this.gameObject.game.device.desktop) {
                    document.addEventListener(_0xB90A[675], this.moveMouse)
                } else {
                    document.addEventListener(_0xB90A[676], this.moveMouse)
                };
                this._objectRect = new Phaser.Rectangle(this.gameObject.x, this.gameObject.y, this.width, this.height);
                this._colisionRect = new Phaser.Rectangle(0, 0, this.penSize * 2, this.penSize * 2);
                this.gameObject.inputEnabled = true;
                this.gameObject.anchor[_0xB90A[95]](0.5, 0.5)
            }), _0xC639(_0xB90A[13], _0xB90A[677], _0xB90A[5], function _0x108A1() {
                this.imgSrc = [];
                for (var _0x10B5D = 0; _0x10B5D < this.gameObject.children.length; _0x10B5D++) {
                    var _0xF163 = this.gameObject.children[_0x10B5D];
                    this.imgSrc.push(_0xF163.getTexture());
                    var _0xD6A1 = _0xF163.x - _0xF163.unscaledWidth * _0xF163.anchor.x + this.originalBounds.halfWidth;
                    var _0xD6BA = _0xF163.y - _0xF163.unscaledHeight * _0xF163.anchor.y + this.originalBounds.halfHeight;
                    this.positions.push(_0xD6A1 + _0xB90A[572] + _0xD6BA)
                };
                for (var _0x10B76 = this.gameObject.children.length - 1; _0x10B76 >= 0; _0x10B76--) {
                    this.gameObject.children[_0x10B76].destroy()
                };
                this.imgSrc.reverse();
                this.positions.reverse()
            }), _0xC639(_0xB90A[13], _0xB90A[678], _0xB90A[5], function _0x10856() {
                if (this.penSize % 2 != 0) {
                    this.penSize++
                };
                this.penCanvas.resize(this.penSize * 2, this.penSize * 2);
                this.penCanvas.circle(this.penSize, this.penSize, this.penSize, _0xB90A[679]);
                this.penCanvas.blendDestinationOut();
                this.penCanvas.circle(this.penSize, this.penSize, this.penSize - 2, _0xB90A[608]);
                this.penCanvas.blendSourceOver()
            }), _0xC639(_0xB90A[13], _0xB90A[680], _0xB90A[5], function _0x10824() {
                this.completionWorker = new Worker(_0xB90A[681]);
                this.completionWorker.onmessage = this.finalCompletion;
                this.countWorker = new Worker(_0xB90A[682]);
                this.countWorker.onmessage = this.countComplete;
                this.checkInterval = 5 + Math.round(Math.random() * 5)
            }), _0xC639(_0xB90A[13], _0xB90A[683], _0xB90A[5], function _0x1080B() {
                if (this.circle == null || this.circle == undefined) {
                    this.circle = Util.Bitmap.create(this.penSize * 2, this.penSize * 2)
                };
                this.circle.clear();
                this.blendCanvas.clear();
                this.circle.resize(this.penSize * 2, this.penSize * 2);
                this.blendCanvas.resize(this.penSize * 2, this.penSize * 2);
                this.blendCanvas.blendSourceOver();
                var _0x109E6 = this.circle.canvas.getContext(_0xB90A[684]);
                if (this.withAlpha) {
                    var _0x109FF = _0x109E6.createRadialGradient(this.penSize, this.penSize, 1, this.penSize, this.penSize, this.penSize);
                    _0x109FF.addColorStop(0, _0xB90A[685]);
                    _0x109FF.addColorStop(1, _0xB90A[686]);
                    _0x109E6.fillStyle = _0x109FF
                } else {
                    _0x109E6.fillStyle = _0xB90A[608]
                };
                _0x109E6.beginPath();
                _0x109E6.arc(this.penSize, this.penSize, this.penSize, 0, 2 * Math.PI);
                _0x109E6.fill();
                _0x109E6.closePath();
                this.circle.update();
                this.circle.dirty = true
            }), _0xC639(_0xB90A[13], _0xB90A[687], _0xB90A[5], function _0x10905() {
                var _0x10C70 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (this.completeEvent) {
                    this.events.throwEvent(this.completeEvent, Util.Util.createEventData([
                        [_0xB90A[688], this],
                        [_0xB90A[689], _0x10C70]
                    ]))
                };
                this.events.throwEvent(_0x1075C.DRAWING_FINISHED, Util.Util.createEventData([
                    [_0xB90A[689], _0x10C70]
                ]))
            }), _0xC639(_0xB90A[13], _0xB90A[690], _0xB90A[5], function _0x1078E(_0x106DF) {
                var _0x10937 = this;
                if (_0x106DF == this.lastColor + 1 && this.wasCompleted) {
                    this.gameObject.game.time.events.add(20, function() {
                        _0x10937.throwFinalEvents(true)
                    }, this);
                    return
                };
                if (!this._isActive) {
                    this.gameObject.game.input.onDown.add(this.startDrawing);
                    this.gameObject.game.input.onUp.add(this.stopDrawing);
                    this.events.addEventListener(_0xB90A[29], this.penAndCompletion)
                } else {
                    this.forcedStopDrawing()
                };
                this._isActive = true;
                if (this._guide) {
                    this._guide.visible = true
                };
                if (_0x106DF || _0x106DF == 0) {
                    this.changeColor(_0x106DF)
                } else {
                    this.changeColor(1)
                };
                if (this.showPenSize) {
                    this.penGameObject.visible = true
                }
            }), _0xC639(_0xB90A[13], _0xB90A[691], _0xB90A[5], function _0x107F2(_0x1099B, _0x109B4) {
                var _0x109CD = _0x1099B.getPixels(new Phaser.Rectangle(0, 0, _0x1099B.width, _0x1099B.height));
                this.countWorker.postMessage(_0xC639(_0xB90A[667], _0x109CD.data.buffer, _0xB90A[692], _0x109B4), [_0x109CD.data.buffer])
            }), _0xC639(_0xB90A[13], _0xB90A[693], _0xB90A[5], function _0x107A7(_0xE227) {
                if (_0xE227) {
                    _0xE227--
                };
                if (_0xE227 == 0 || _0xE227) {
                    if (_0xE227 < 0) {
                        trace(_0xB90A[694] + this.eventName + _0xB90A[695] + _0xE227 + _0xB90A[696], _0xB90A[697]);
                        _0xE227 = 0
                    };
                    if (_0xE227 >= this.imgSrc.length) {
                        trace(_0xB90A[694] + this.eventName + _0xB90A[695] + _0xE227 + _0xB90A[698] + (this.imgSrc.length - 1) + _0xB90A[699], _0xB90A[697]);
                        _0xE227 = this.imgSrc.length - 1
                    }
                };
                this.events.throwEvent(_0x1075C.DEACTIVATE_ALL, Util.Util.createEventData([
                    [_0xB90A[653], this.eventName]
                ]));
                if (this.lastColor == -1 || this.lastColor != _0xE227) {
                    this.wasCompleted = false;
                    this.image = this.imgSrc[_0xE227];
                    this.activeOffset = this.offsets[_0xE227];
                    this._totalPixels = this.width * this.height;
                    if (!this.isCustomColor) {
                        this.imageCanvas.resize(this.image.width, this.image.height);
                        this.imageCanvas.clear();
                        this.imageCanvas.context.drawImage(this.image.canvas, 0, 0)
                    };
                    if (this.pixelsMap.has(_0xE227 + _0xB90A[27])) {
                        this._totalPixels = this.pixelsMap[_0xB90A[8]](_0xE227 + _0xB90A[27])
                    } else {
                        this.countPixels(this.imageCanvas, _0xE227 + _0xB90A[27])
                    };
                    if (this.resetOnChange) {
                        this.resultCanvas.clear()
                    } else {
                        this.resultCanvas.clear();
                        if (this.keepShape) {
                            this.resultCanvas.blendSourceOver();
                            this.resultCanvas.draw(this.finalCanvas);
                            this.finalCanvas.clear();
                            this.finalCanvas.blendSourceOver();
                            this.finalCanvas.draw(this.resultCanvas);
                            this.resultCanvas.clear()
                        };
                        this.oldCanvas.clear();
                        this.oldCanvas.draw(this.finalCanvas)
                    };
                    if (this.erase) {
                        this.erasingCanvas.resize(this.width, this.height);
                        this.erasingCanvas.clear();
                        this.resultCanvas.clear();
                        this.resultCanvas.blendSourceOver();
                        this.resultCanvas.draw(this.image, this.activeOffset.x, this.activeOffset.y);
                        this.finalCanvas.draw(this.resultCanvas)
                    };
                    this.canvasChanged = true
                };
                if (this.isCustomColor && !this.showInitial) {
                    this.showInitial = true
                };
                this.lastColor = _0xE227
            }), _0xC639(_0xB90A[13], _0xB90A[700], _0xB90A[5], function _0x10888() {
                if (this._isActive && this._isDrawing) {
                    this._isDrawing = false;
                    if (!this.isInCanvas()) {
                        this.upListenerAdded = true;
                        if (this.gameObject.game.device.desktop) {
                            this.gameObject.game.canvas.addEventListener(_0xB90A[670], this.mouseUp, _0xC639(_0xB90A[701], true))
                        } else {
                            this.gameObject.game.canvas.addEventListener(_0xB90A[671], this.mouseUp, _0xC639(_0xB90A[701], true))
                        };
                        return
                    };
                    this.forcedStopDrawing()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[702], _0xB90A[5], function _0x108D3() {
                var _0x10BC1 = this.gameObject.game.canvas.getBoundingClientRect();
                var _0x10167 = _0x10BC1.top;
                var _0x10BDA = _0x10BC1.left;
                var _0xD5F2 = _0x10BC1.width;
                var _0xD5C0 = _0x10BC1.height;
                var _0x10BF3 = new Phaser.Rectangle(_0x10BDA, _0x10167, _0xD5F2, _0xD5C0);
                return _0x10BF3.contains(this.realMx, this.realMy)
            }), _0xC639(_0xB90A[13], _0xB90A[15], _0xB90A[5], function _0xC972() {
                if (this.checkColision() && this._isDrawing && !this.checkStop) {
                    var _0xC85F = this.gameObject.toLocal(this.gameObject.game.input, this.gameObject.game.world);
                    var _0x10A63 = _0xC85F.x + this.originalBounds.width / 2;
                    var _0x10A7C = _0xC85F.y + this.originalBounds.height / 2;
                    if (this.lastX == null && this.lastY == null) {
                        this.lastX = _0x10A63;
                        this.lastY = _0x10A7C
                    };
                    this.drawCircles(_0x10A63, _0x10A7C);
                    this.lastX = _0x10A63;
                    this.lastY = _0x10A7C;
                    this.updateCycle++
                }
            }), _0xC639(_0xB90A[13], _0xB90A[703], _0xB90A[5], function _0x1083D(_0x10A63, _0x10A7C) {
                this.updateNormalize++;
                var _0xDFCF = Phaser.Math.distance(_0x10A63, _0x10A7C, this.lastX, this.lastY);
                var _0x10A95 = false;
                if (_0xDFCF == 0) {
                    _0xDFCF = 1
                };
                var _0x10A18 = 0;
                this.l = 5000;
                this.t = 5000;
                this.r = -5000;
                this.b = -5000;
                while (_0xDFCF >= _0x10A18) {
                    var _0x10A31 = this.lerp(this.lastX, _0x10A63, _0x10A18 / _0xDFCF);
                    var _0x10A4A = this.lerp(this.lastY, _0x10A7C, _0x10A18 / _0xDFCF);
                    _0x10A18 += this.penSize / 2;
                    var _0x10AAE = _0x10A31 + this.activeOffset.x;
                    var _0x10AC7 = _0x10A4A + this.activeOffset.y;
                    if (this.isExactSize(_0x10AAE, _0x10AC7)) {
                        continue
                    };
                    if (!this.erase) {
                        this.blendCanvas.clear();
                        this.blendCanvas.draw(this.circle, 0, 0);
                        this.blendCanvas.blendSourceIn();
                        this.blendCanvas.draw(this.imageCanvas, -(_0x10A31 - this.penSize), -(_0x10A4A - this.penSize));
                        this.blendCanvas.blendSourceOver();
                        this.resultCanvas.draw(this.blendCanvas, _0x10AAE - this.penSize, _0x10AC7 - this.penSize);
                        if (this.l > _0x10AAE - this.penSize) {
                            this.l = _0x10AAE - this.penSize
                        };
                        if (this.t > _0x10AC7 - this.penSize) {
                            this.t = _0x10AC7 - this.penSize
                        };
                        if (this.r < _0x10AAE + this.penSize) {
                            this.r = _0x10AAE + this.penSize
                        };
                        if (this.b < _0x10AC7 + this.penSize) {
                            this.b = _0x10AC7 + this.penSize
                        };
                        this.w = this.r - this.l;
                        this.h = this.b - this.t;
                        _0x10A95 = true
                    } else {
                        this.resultCanvas.blendDestinationOut();
                        this.resultCanvas.draw(this.circle, _0x10AAE - this.penSize + this.activeOffset.x, _0x10AC7 - this.penSize + this.activeOffset.y);
                        this.resultCanvas.blendSourceOver()
                    }
                };
                this.normalizeResult(this.l, this.t, this.w, this.h);
                if (!this.resetOnChange) {
                    this.finalCanvas.clear();
                    this.finalCanvas.draw(this.oldCanvas);
                    this.finalCanvas.draw(this.resultCanvas)
                };
                this.canvasChanged = true
            }), _0xC639(_0xB90A[13], _0xB90A[704], _0xB90A[5], function _0x1091E() {
                if (Core.game.device.windows || Core.game.device.macOS || Core.game.device.linux) {
                    this.penGameObject.position[_0xB90A[95]](this.gameObject.game.input.x, this.gameObject.game.input.y)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[705], _0xB90A[5], function _0x1086F() {
                if (this.erase) {
                    this.resultCanvas.clear()
                } else {
                    this.resultCanvas.clear();
                    this.resultCanvas.draw(this.image, this.activeOffset.x, this.activeOffset.y);
                    this.finalCanvas.clear();
                    this.finalCanvas.draw(this.oldCanvas);
                    this.finalCanvas.draw(this.resultCanvas)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[706], _0xB90A[5], function _0x108BA(_0x10AAE, _0x10AC7) {
                return _0x10AAE - this.penSize == -this.resultCanvas.width || _0x10AC7 - this.penSize == -this.resultCanvas.height || _0x10AAE - this.penSize == this.resultCanvas.width || _0x10AC7 - this.penSize == this.resultCanvas.height
            }), _0xC639(_0xB90A[13], _0xB90A[20], _0xB90A[5], function _0xC940(_0xC927, _0xCA3A, _0xCA53) {
                return Math.round(_0xC927 + _0xCA53 * (_0xCA3A - _0xC927))
            }), _0xC639(_0xB90A[13], _0xB90A[707], _0xB90A[5], function _0x108EC(_0x10A31, _0x10A4A, _0xD5F2, _0xD5C0) {
                if (_0xD5F2 == 0 || _0xD5C0 == 0 || this.imageCanvas.width == 0 || this.resultCanvas.width == 0) {
                    return
                };
                var _0x10C0C = false;
                var _0x10C25 = this.resultCanvas.context.getImageData(_0x10A31, _0x10A4A, _0xD5F2, _0xD5C0);
                var _0x10C3E = this.imageCanvas.context.getImageData(_0x10A31 - this.activeOffset.x, _0x10A4A - this.activeOffset.y, _0xD5F2, _0xD5C0);
                for (var _0xC6E8 = 3; _0xC6E8 < _0x10C3E.data.length; _0xC6E8 += 4) {
                    if (_0x10C25.data[_0xC6E8] > _0x10C3E.data[_0xC6E8]) {
                        _0x10C25.data[_0xC6E8] = _0x10C3E.data[_0xC6E8];
                        _0x10C0C = true
                    }
                };
                if (_0x10C0C) {
                    this.resultCanvas.context.putImageData(_0x10C25, _0x10A31, _0x10A4A)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[708], _0xB90A[5], function _0x107D9() {
                var _0xFD02 = Components.DevUtils.getBounds(this.gameObject);
                this._objectRect.x = _0xFD02.x;
                this._objectRect.y = _0xFD02.y;
                this._objectRect.width = _0xFD02.width;
                this._objectRect.height = _0xFD02.height;
                this._colisionRect.x = this.gameObject.game.input.x - this.penSize;
                this._colisionRect.y = this.gameObject.game.input.y - this.penSize;
                return this._colisionRect.intersects(this._objectRect, 0)
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.completionWorker.terminate();
                this.countWorker.terminate();
                this.canvasChanged = false;
                if (this.gameObject.game.device.desktop) {
                    document.removeEventListener(_0xB90A[675], this.moveMouse)
                } else {
                    document.removeEventListener(_0xB90A[676], this.moveMouse)
                };
                _get(_getPrototypeOf(_0x1075C.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x1075C
        }(Scene.Component);
        _0x1075C.DEACTIVATE_ALL = _0xB90A[709];
        _0x1075C.DRAWING_FINISHED = _0xB90A[710];
        _0x1075C.RESET_ALL_DRAWINGS = _0xB90A[711];
        _0x1075C.CHANGE_BRUSH_SIZE = _0xB90A[712];
        _0x1075C.CHANGE_BRUSH_TYPE = _0xB90A[713];
        _0x1075C.ACTIVATE_ERASE = _0xB90A[714];
        _0x1075C.DEACTIVATE_ERASE = _0xB90A[715];
        Components.DrawingComponent = _0x1075C
    }

    function _0xBF63(Components) {
        var _0x10C89 = function(_0x10CA2) {
            _0xBA1D(_0x10C89, _0x10CA2);

            function _0x10C89() {
                var _0x10D51;
                _0xB955(this, _0x10C89);
                _0x10D51 = _0xB9A0(this, _getPrototypeOf(_0x10C89).apply(this, arguments));
                _0x10D51.countTimes = 2;
                _0x10D51.isAnimated = false;
                _0x10D51.count = 0;
                _0x10D51.isReady = true;
                _0x10D51.onActivate = function(_0xCF35) {
                    if (!_0x10D51.isReady) {
                        return
                    };
                    _0x10D51.count = 0;
                    if (_0x10D51.gameObject.game.device.desktop) {
                        if (_0x10C89.activeCursor) {
                            if (_0x10C89.activeCursor != _0x10D51.gameObject) {
                                _0x10C89.activeCursor.getComponent(_0x10C89).deactivate(true)
                            }
                        };
                        _0x10C89.activeCursor = _0x10D51.gameObject;
                        _0x10D51.events.addEventListener(_0xB90A[29], _0x10D51.updateCursor);
                        var _0xE227 = 1;
                        if (_0xCF35 && _0xCF35.getData(_0xB90A[661])) {
                            _0xE227 = Number(_0xCF35.getData(_0xB90A[661]))
                        };
                        _0xE227--;
                        _0xE227 = _0xE227 > _0x10D51.gameObject.children.length - 1 ? _0x10D51.gameObject.children.length - 1 : _0xE227;
                        if (_0x10D51.activeObject) {
                            _0x10D51.activeObject.visible = false
                        };
                        _0x10D51.activeObject = _0x10D51.gameObject.children[_0xE227];
                        _0x10D51.activeObject.visible = true;
                        _0x10D51.show();
                        _0x10D51.isReady = false;
                        _0x10D51.gameObject.game.time.events.add(50, function() {
                            _0x10D51.isReady = true
                        }, _0xB9B9(_0x10D51))
                    }
                };
                _0x10D51.onDeactivateAll = function() {
                    if (_0x10D51.gameObject == _0x10C89.activeCursor) {
                        _0x10D51.deactivate()
                    }
                };
                _0x10D51.onDeactivate = function() {
                    _0x10D51.count++;
                    if (_0x10D51.count == _0x10D51.countTimes) {
                        _0x10D51.deactivate()
                    }
                };
                _0x10D51.showAnim = function() {
                    if (_0x10D51.standardObject) {
                        _0x10D51.standardObject.visible = false
                    };
                    if (_0x10D51.animObject) {
                        _0x10D51.animObject.visible = true
                    };
                    if (_0x10D51.soundWhileAnimated) {
                        Components.DevUtils.playSound(_0x10D51.soundWhileAnimated, true)
                    };
                    if (_0x10D51.animStarEvent && _0x10D51.animStarEvent != _0xB90A[27]) {
                        _0x10D51.events.throwEvent(_0x10D51.animStarEvent)
                    }
                };
                _0x10D51.hideAnim = function() {
                    if (_0x10D51.standardObject) {
                        _0x10D51.standardObject.visible = true
                    };
                    if (_0x10D51.animObject) {
                        _0x10D51.animObject.visible = false
                    };
                    if (_0x10D51.soundWhileAnimated) {
                        Components.DevUtils.stopSound(_0x10D51.soundWhileAnimated)
                    };
                    if (_0x10D51.animStarEvent && _0x10D51.animStarEvent != _0xB90A[27]) {
                        _0x10D51.events.throwEvent(_0x10D51.animEndEvent)
                    }
                };
                _0x10D51.updateCursor = function() {
                    _0x10D51.gameObject.x = _0x10D51.gameObject.game.input.x;
                    _0x10D51.gameObject.y = _0x10D51.gameObject.game.input.y
                };
                return _0x10D51
            }
            _0xB987(_0x10C89, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x10D1F = this;
                this.events.addEventListener(this.activateEvent, this.onActivate);
                this.events.addEventListener(this.deactivateEvent, this.onDeactivate);
                this.events.addEventListener(_0x10C89.DEACTIVATE_CURSOR, this.onDeactivateAll);
                this.gameObject.children.forEach(function(_0xF163) {
                    _0xF163.visible = false;
                    if (_0x10D1F.isAnimated && _0xF163.children.length > 0) {
                        _0xF163.children.forEach(function(_0x10D38) {
                            if (_0x10D38.children.length > 0) {
                                _0x10D38.visible = false;
                                _0x10D1F.animObject = _0x10D38
                            } else {
                                _0x10D1F.standardObject = _0x10D38
                            }
                        })
                    }
                });
                this.gameObject.alpha = 0;
                this.gameObject.children.reverse()
            }), _0xC639(_0xB90A[13], _0xB90A[716], _0xB90A[5], function _0x10CBB() {
                var _0x10D06 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (this.gameObject.game.device.desktop) {
                    _0x10C89.activeCursor = null;
                    this.events.removeEventListener(_0xB90A[29], this.updateCursor);
                    this.hide();
                    this.gameObject.position[_0xB90A[95]](1000, 1000)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[717], _0xB90A[5], function _0x10CED() {
                this.gameObject.game.add.tween(this.gameObject).to(_0xC639(_0xB90A[45], 1), 100, null, true);
                this.gameObject.game.canvas.style.cursor = _0xB90A[718];
                if (this.isAnimated) {
                    this.gameObject.game.input.onDown.add(this.showAnim);
                    this.gameObject.game.input.onUp.add(this.hideAnim)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[719], _0xB90A[5], function _0x10CD4() {
                this.gameObject.game.add.tween(this.gameObject).to(_0xC639(_0xB90A[45], 0), 100, null, true);
                this.gameObject.game.canvas.style.cursor = _0xB90A[720];
                if (this.isAnimated) {
                    this.gameObject.game.input.onDown.remove(this.showAnim);
                    this.gameObject.game.input.onUp.remove(this.hideAnim);
                    this.hideAnim()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.canvas.style.cursor = _0xB90A[720];
                _0x10C89.activeCursor = null;
                _get(_getPrototypeOf(_0x10C89.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x10C89
        }(Scene.Component);
        _0x10C89.SHOW_CURSOR = _0xB90A[721];
        _0x10C89.HIDE_CURSOR = _0xB90A[722];
        _0x10C89.DEACTIVATE_CURSOR = _0xB90A[722];
        Components.MouseCursorComponent = _0x10C89
    }

    function _0xBF7C(Components) {
        var _0x10D6A = function(_0x10D83) {
            _0xBA1D(_0x10D6A, _0x10D83);

            function _0x10D6A() {
                var _0x10D9C;
                _0xB955(this, _0x10D6A);
                _0x10D9C = _0xB9A0(this, _getPrototypeOf(_0x10D6A).apply(this, arguments));
                _0x10D9C.deactivateDrawing = true;
                _0x10D9C.animate = true;
                _0x10D9C.keepGlow = true;
                _0x10D9C.onEvent = function() {
                    if (_0x10D9C.tags[1] == _0xB90A[142]) {
                        _0x10D9C.gameObject.onButtonPressed(_0x10D9C.gameObject)
                    }
                };
                _0x10D9C.onLoad = function() {
                    if (_0x10D9C.tags[1] == _0xB90A[142] && _0x10D9C.keepGlow) {
                        if (_0x10D9C.gameObject.getComponent(Components.TypeGlow)) {
                            _0x10D9C.gameObject.getComponent(Components.TypeGlow).focusGlowOn(_0x10D9C.gameObject)
                        }
                    }
                };
                return _0x10D9C
            }
            _0xB987(_0x10D6A, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0xB90A[28], this.onLoad)
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743() {
                this.events.throwEvent(_0xB90A[228], Util.Util.createEventData([
                    [_0xB90A[229], this.tags[1]]
                ]));
                if (this.deactivateDrawing) {
                    this.events.throwEvent(Components.DrawingComponent.DEACTIVATE_ALL);
                    this.events.throwEvent(Components.MouseCursorComponent.HIDE_CURSOR)
                };
                if (this.animate) {
                    this.gameObject.angle = 0;
                    Components.Tweens.create(this.gameObject).to(_0xC639(_0xB90A[46], 5), 50, null, true, 0, 5, true)
                };
                if (!this.keepGlow) {
                    this.events.throwEvent(Components.TypeGlow.REMOVE_TYPE_GLOW, Util.Util.createEventData([
                        [_0xB90A[672], this.tags[0]]
                    ]))
                }
            })]);
            return _0x10D6A
        }(Scene.Component);
        Components.CategoryButtonComponent = _0x10D6A
    }

    function _0xBF95(Components) {
        var _0x10DB5 = function(_0x10DCE) {
            _0xBA1D(_0x10DB5, _0x10DCE);

            function _0x10DB5() {
                var _0x10E19;
                _0xB955(this, _0x10DB5);
                _0x10E19 = _0xB9A0(this, _getPrototypeOf(_0x10DB5).apply(this, arguments));
                _0x10E19.bodyItems = [];
                _0x10E19.mainButton = null;
                _0x10E19.extraButtons = [];
                _0x10E19.create = function() {
                    _0x10E19.findObjects();
                    if (_0x10E19.mainButton) {
                        var _0x10E4B = _0x10E19.gameObject.getComponent(Components.GlowComponent);
                        _0x10E4B.staticGlow = _0x10E19.staticGlowOverwrite;
                        _0x10E4B.removeStaticGlow = _0x10E19.removeStaticGlowOverwrite;
                        var _0x10E32 = GameObject.getObject(_0xB90A[723]).getComponent(Components.DressupControllerComponent)
                    }
                };
                _0x10E19.onClick = function(_0xC7FB) {
                    if (_0x10E19.lastPressed) {
                        _0x10E19.removeStaticGlowOverwrite()
                    };
                    _0x10E19.lastPressed = _0xC7FB;
                    if (_0x10E19.bodyItems.length == 0) {
                        var _0xD0F7 = GameObject.getObject(_0xB90A[723]).getComponent(Components.DressupControllerComponent).getItemArray(_0x10E19.gameObject.tags[1], _0x10E19.gameObject.tags[2]);
                        for (var _0x10E64 = 0; _0x10E64 < _0xD0F7.length; _0x10E64++) {
                            var _0xEF88 = _0xD0F7[_0x10E64];
                            var _0x10EAF = [];
                            for (var _0xC9D6 = 0; _0xC9D6 < _0xEF88.children.length; _0xC9D6++) {
                                var _0xF163 = _0xEF88.children[_0xC9D6];
                                _0x10EAF.push(_0xF163)
                            };
                            _0x10E19.bodyItems.push(_0x10EAF)
                        }
                    };
                    var _0xE227 = 0;
                    if (_0xC7FB != _0x10E19.mainButton) {
                        _0xE227 = Number(_0xC7FB.tags[1]) - 1
                    };
                    for (var _0x10E7D = 0; _0x10E7D < _0x10E19.bodyItems.length; _0x10E7D++) {
                        var _0x10EC8 = _0x10E19.bodyItems[_0x10E7D];
                        for (var _0x10E96 = 0; _0x10E96 < _0x10EC8.length; _0x10E96++) {
                            var _0xCE22 = _0x10EC8[_0x10E96];
                            _0xCE22.visible = false
                        };
                        _0x10EC8[_0xE227].visible = true
                    };
                    var _0x10EE1 = true;
                    if (_0x10DB5.lastButton == _0x10E19.gameObject && _0x10E19.lastPressed == _0x10E19.mainButton && _0x10E19.lastColor == _0xC7FB || _0x10E19.lastColor == _0xC7FB) {
                        _0x10E19.events.throwEvent(_0xB90A[724], Util.Util.createEventData([
                            [_0xB90A[725], _0x10E19.gameObject]
                        ]))
                    } else {
                        if (_0x10DB5.lastButton == _0x10E19.gameObject) {
                            _0x10E19.removeStaticGlowOverwrite();
                            _0x10E19.staticGlowOverwrite();
                            _0x10EE1 = false
                        } else {
                            _0x10E19.events.throwEvent(_0xB90A[724], Util.Util.createEventData([
                                [_0xB90A[725], _0x10E19.gameObject]
                            ]))
                        }
                    };
                    if (_0x10DB5.lastButton && _0x10EE1) {
                        _0x10DB5.lastButton.getComponent(_0x10DB5).reset();
                        if (_0x10DB5.lastButton == _0x10E19.gameObject) {
                            _0x10DB5.lastButton = null
                        } else {
                            _0x10DB5.lastButton = _0x10E19.gameObject
                        }
                    } else {
                        _0x10DB5.lastButton = _0x10E19.gameObject
                    };
                    if (_0xC7FB != _0x10E19.mainButton) {
                        _0x10E19.lastColor = _0xC7FB
                    } else {
                        _0x10E19.lastColor = _0x10E19.findFirst()
                    }
                };
                _0x10E19.staticGlowOverwrite = function() {
                    if (_0x10E19.lastPressed) {
                        _0x10E19.lastPressed.getComponent(Components.GlowComponent).staticGlow();
                        if (_0x10E19.lastPressed != _0x10E19.mainButton) {
                            _0x10E19.mainButton.getComponent(Components.GlowComponent).staticGlow()
                        } else {
                            _0x10E19.findFirst().getComponent(Components.GlowComponent).staticGlow()
                        }
                    }
                };
                _0x10E19.removeStaticGlowOverwrite = function() {
                    if (_0x10E19.lastPressed) {
                        _0x10E19.lastPressed.getComponent(Components.GlowComponent).removeStaticGlow();
                        if (_0x10E19.lastPressed != _0x10E19.mainButton) {
                            _0x10E19.mainButton.getComponent(Components.GlowComponent).removeStaticGlow()
                        } else {
                            _0x10E19.findFirst().getComponent(Components.GlowComponent).removeStaticGlow()
                        }
                    }
                };
                return _0x10E19
            }
            _0xB987(_0x10DB5, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(Scene.Unit.UNIT_CREATED, this.create)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.gameObject.getComponent(Components.ButtonComponent).clickSound = _0xB90A[27];
                this.gameObject.getComponent(Components.ButtonComponent).scroll = true
            }), _0xC639(_0xB90A[13], _0xB90A[726], _0xB90A[5], function _0x10E00() {
                this.lastColor = null;
                this.lastPressed = null
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743(_0xC7FB) {
                this.events.throwEvent(_0xB90A[724], Util.Util.createEventData([
                    [_0xB90A[725], _0xC7FB]
                ]))
            }), _0xC639(_0xB90A[13], _0xB90A[727], _0xB90A[5], function _0x10DE7() {
                for (var _0x10EFA = 0; _0x10EFA < this.extraButtons.length; _0x10EFA++) {
                    var _0x10F13 = this.extraButtons[_0x10EFA];
                    if (_0x10F13.tags[1] == _0xB90A[142]) {
                        return _0x10F13
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[655], _0xB90A[5], function _0x1067B() {
                if (this.gameObject.children.length == 0) {
                    return
                };
                for (var _0x10F2C = 0; _0x10F2C < this.gameObject.children.length; _0x10F2C++) {
                    var _0xF163 = this.gameObject.children[_0x10F2C];
                    if (_0xF163.name.indexOf(_0xB90A[728]) != -1) {
                        this.mainButton = _0xF163
                    } else {
                        this.extraButtons.push(_0xF163)
                    };
                    _0xF163.addButtonPressedCallback(this.onClick)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                _0x10DB5.lastButton = null;
                _get(_getPrototypeOf(_0x10DB5.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x10DB5
        }(Scene.Component);
        Components.DressupButtonComponent = _0x10DB5
    }

    function _0xBFAE(Components) {
        var _0x10F45 = function(_0x10F5E) {
            _0xBA1D(_0x10F45, _0x10F5E);

            function _0x10F45() {
                var _0x1132D;
                _0xB955(this, _0x10F45);
                _0x1132D = _0xB9A0(this, _getPrototypeOf(_0x10F45).apply(this, arguments));
                _0x1132D.itemTag = _0xB90A[27];
                _0x1132D.buttonTag = _0xB90A[27];
                _0x1132D.maskTag = _0xB90A[27];
                _0x1132D.categoryExclusions = _0xB90A[27];
                _0x1132D.categExclusions = [];
                _0x1132D.defaultCategories = _0xB90A[27];
                _0x1132D.defCategs = [];
                _0x1132D.defaultsFromPanel = _0xB90A[27];
                _0x1132D.defsFromPanel = [];
                _0x1132D.buttonName = _0xB90A[27];
                _0x1132D.saveProgressGroup = _0xB90A[27];
                _0x1132D._items = new Map();
                _0x1132D._buttons = new Map();
                _0x1132D._bodyItems = new Map();
                _0x1132D._glowingButtons = new Map();
                _0x1132D._exclusionMap = new Map();
                _0x1132D._defaults = new Map();
                _0x1132D._defaultItemsForNext = [];
                _0x1132D._defaultsFromPanel = new Map();
                _0x1132D.hasMasks = false;
                _0x1132D.isStarting = false;
                _0x1132D.onLoad = function() {
                    _0x1132D.corelateGlow();
                    if (_0x1132D.saveProgressGroup && _0x1132D.saveProgressGroup != _0xB90A[27] && _0x10F45.savedButtons.has(_0x1132D.saveProgressGroup)) {
                        _0x1132D.isStarting = true;
                        _0x10F45.savedButtons[_0xB90A[8]](_0x1132D.saveProgressGroup).forEach(function(_0xF5E1) {
                            GameObject.getObject(_0xF5E1).onButtonPressed(GameObject.getObject(_0xF5E1))
                        });
                        _0x10F45.savedButtons[_0xB90A[336]](_0x1132D.saveProgressGroup);
                        _0x1132D.isStarting = false
                    } else {
                        _0x1132D.checkNextButton()
                    }
                };
                _0x1132D.onItemClick = function(_0xCF35) {
                    var _0x11346 = _0xCF35.getData(_0xB90A[725]);
                    if (_0x1132D.buttonTag.indexOf(_0x11346.tags[0]) == -1) {
                        return
                    };
                    var _0xD15B = _0x11346.name.split(_0xB90A[61])[1];
                    var _0x111CF = _0x11346.name.split(_0xB90A[61])[2];
                    var _0x1116B = _0x1132D.getItem(_0xD15B, _0x111CF);
                    if (!_0x1116B) {
                        return
                    };
                    var _0x11152 = _0x1132D._bodyItems[_0xB90A[8]](_0xD15B);
                    if (_0x11152) {
                        if (_0x11152 == _0x1116B) {
                            _0x1132D._bodyItems[_0xB90A[95]](_0xD15B, null);
                            _0x1132D.showDefault(_0xD15B);
                            _0x1132D.hideItem(_0xD15B, _0x111CF)
                        } else {
                            _0x1132D._bodyItems[_0xB90A[95]](_0xD15B, _0x1116B);
                            _0x1132D.showItem(_0xD15B, _0x111CF);
                            _0x1132D.hideItem(_0xD15B, _0x11152.name.split(_0xB90A[61])[2])
                        }
                    } else {
                        _0x1132D._bodyItems[_0xB90A[95]](_0xD15B, _0x1116B);
                        _0x1132D.showItem(_0xD15B, _0x111CF)
                    };
                    if (_0x1132D._defaultsFromPanel[_0xB90A[8]](_0xD15B) == _0x111CF) {
                        _0x1132D._bodyItems[_0xB90A[95]](_0xD15B, _0x1116B);
                        _0x1132D.hideItem(_0xD15B, _0x111CF);
                        _0x1132D.showDefault(_0xD15B)
                    };
                    if (_0x1132D.categExclusions.length != 0) {
                        _0x1132D.checkExclusion(_0xD15B, _0x111CF, _0x11152, _0x1116B)
                    };
                    if (!_0x1132D.isStarting) {
                        _0x1132D.checkNextButton()
                    };
                    _0x1132D.corelateGlow();
                    if (_0x1132D.hasMasks) {
                        _0x1132D.checkMasks()
                    };
                    _0x1132D.events.throwEvent(_0xB90A[654], Util.Util.createEventData([
                        [_0xB90A[6], _0x11346]
                    ]))
                };
                _0x1132D.activatorsMap = new Map();
                _0x1132D.pressedMap = new Map();
                _0x1132D.buttonMasks = new Map();
                _0x1132D.maskedItems = [];
                return _0x1132D
            }
            _0xB987(_0x10F45, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x11508 = this.buttonTag.split(_0xB90A[572]);
                var _0x1153A = this.itemTag.split(_0xB90A[572]);
                this.bodyItems = GameObject.getObjectsByTag(_0x1153A[0], true);
                this.bodyButtons = GameObject.getObjectsByTag(_0x11508[0], true);
                Core.game.input.activePointer.active = false;
                var _0xF09B = GameObject.getObjectsByTag(_0x1153A[0], true);
                var _0x11521 = GameObject.getObjectsByTag(_0x1153A[1], true);
                var _0x114D6 = GameObject.getObjectsByTag(_0x11508[0], true);
                var _0x114EF = GameObject.getObjectsByTag(_0x11508[1], true);
                _0x114EF.forEach(function(_0xCE22) {
                    _0x114D6.push(_0xCE22)
                });
                _0x11521.forEach(function(_0xCE22) {
                    _0xF09B.push(_0xCE22)
                });
                var _0xD223 = this.categoryExclusions.split(_0xB90A[729]);
                this.categExclusions = [];
                for (var _0x11472 = 0; _0x11472 < _0xD223.length; _0x11472++) {
                    var _0xCE22 = _0xD223[_0x11472];
                    this.categExclusions.push(_0xCE22.split(_0xB90A[572]))
                };
                _0xD223 = this.defaultCategories.split(_0xB90A[572]);
                for (var _0x1148B = 0; _0x1148B < _0xD223.length; _0x1148B++) {
                    var _0x11440 = _0xD223[_0x1148B];
                    this.defCategs.push(Number(_0x11440))
                };
                var _0xD223 = this.defaultsFromPanel.split(_0xB90A[729]);
                this.defsFromPanel = [];
                for (var _0x114A4 = 0; _0x114A4 < _0xD223.length; _0x114A4++) {
                    var _0x11459 = _0xD223[_0x114A4];
                    var _0x11553 = _0x11459.split(_0xB90A[572]);
                    var _0xD0F7 = [];
                    for (var _0x114BD = 0; _0x114BD < _0x11553.length; _0x114BD++) {
                        var _0xF5E1 = _0x11553[_0x114BD];
                        _0xD0F7.push(Number(_0xF5E1))
                    };
                    this.defsFromPanel.push(_0xD0F7)
                };
                this.distributeObjects(_0xF09B, this._items);
                this.distributeObjects(_0x114D6, this._buttons);
                this.findDefaults();
                this.findExclusions();
                this.hideAll();
                this._nextButton = GameObject.getObject(this.buttonName);
                if (this._nextButton) {
                    this._nextButton.scale[_0xB90A[95]](0);
                    this._nextButton.alpha = 0;
                    this._nextButton.disableInput()
                };
                this.events.addEventListener(_0xB90A[724], this.onItemClick);
                if (this.maskTag) {
                    this._masks = GameObject.getObjectsByTag(this.maskTag, true)
                };
                if (this._masks && this._masks.length > 0) {
                    this.hasMasks = true;
                    this.findMasks()
                };
                this.events.addEventListener(_0xB90A[28], this.onLoad)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[730], _0xB90A[5], function _0x10FDB(_0x112FB, _0xFB27) {
                var _0x11314 = _0x112FB.shift();
                var _0xD15B = _0x11314.name.split(_0xB90A[61])[1];
                var _0xD0F7 = [_0x11314];
                while (_0x112FB.length > 0) {
                    _0x11314 = _0x112FB.shift();
                    var _0x112E2 = _0x11314.name.split(_0xB90A[61])[1];
                    if (_0x112E2 == _0xD15B) {
                        _0xD0F7.push(_0x11314)
                    } else {
                        _0xFB27[_0xB90A[95]](_0xD15B, _0xD0F7);
                        _0xD0F7 = [_0x11314];
                        _0xD15B = _0x112E2
                    }
                };
                _0xFB27[_0xB90A[95]](_0xD15B, _0xD0F7)
            }), _0xC639(_0xB90A[13], _0xB90A[731], _0xB90A[5], function _0x110BC() {
                var _0x1121A = this._items.keys();
                var _0xD39A = _0x1121A.next();
                while (!_0xD39A.done) {
                    var _0xD0F7 = this._items[_0xB90A[8]](_0xD39A.value);
                    this._bodyItems[_0xB90A[95]](_0xD39A.value, null);
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                        var _0xCE22 = _0xD0F7[_0xC6E8];
                        _0xCE22.visible = false
                    };
                    this.showDefault(_0xD39A.value);
                    _0xD39A = _0x1121A.next()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[732], _0xB90A[5], function _0x10FC2() {
                for (var _0x1127E = 0; _0x1127E < this.bodyItems.length; _0x1127E++) {
                    var _0xCE22 = this.bodyItems[_0x1127E];
                    var _0x11297 = GameObject.getObject(_0xB90A[145] + _0xB90A[61] + _0xCE22.tags[1] + _0xB90A[61] + _0xCE22.tags[2] + _0xB90A[61] + _0xCE22.tags[3] + _0xB90A[61] + _0xCE22.tags[4]);
                    if (_0xCE22.visible) {
                        if (_0x11297) {
                            _0x11297.getComponent(Components.GlowComponent).staticGlow()
                        }
                    } else {
                        if (_0x11297) {
                            _0x11297.getComponent(Components.GlowComponent).removeStaticGlow()
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[733], _0xB90A[5], function _0x10F77(_0xD15B, _0x111CF, _0x11152, _0x1116B) {
                var _0x1119D = this._exclusionMap[_0xB90A[8]](_0xD15B);
                _0x1119D = _0x1119D ? _0x1119D : [];
                if (_0x1116B.visible) {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x1119D.length; _0xC6E8++) {
                        var _0x11184 = _0x1119D[_0xC6E8];
                        var _0xC7FB = this._bodyItems[_0xB90A[8]](_0x11184);
                        if (_0xC7FB) {
                            var _0x111B6 = _0xC7FB.name.split(_0xB90A[61])[2];
                            this.hideItem(_0x11184, _0x111B6);
                            this.extraCheckExclusion(_0x11184, _0xD15B)
                        }
                    }
                } else {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x1119D.length; _0xC6E8++) {
                        var _0x11184 = _0x1119D[_0xC6E8];
                        this.showDefault(_0x11184);
                        this.extraCheckExclusion(_0x11184, _0xD15B)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[734], _0xB90A[5], function _0x10FA9() {
                var _0x11265 = this;
                if (this._nextButton) {
                    var _0x10CED = true;
                    for (var _0xC6E8 = 0; _0xC6E8 < this._defaultItemsForNext.length; _0xC6E8++) {
                        var _0xEF88 = this._defaultItemsForNext[_0xC6E8];
                        if (_0xEF88.visible) {
                            _0x10CED = false;
                            break
                        }
                    };
                    if (_0x10CED) {
                        if (this._nextButton.alpha != 1) {
                            Components.Tweens.create(this._nextButton, true).to(_0xC639(_0xB90A[45], 1), 400, null, true);
                            Components.Tweens.create(this._nextButton.scale, true).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 400, null, true).onComplete.addOnce(function() {
                                _0x11265._nextButton.enableInput()
                            })
                        }
                    } else {
                        if (this._nextButton.alpha != 0) {
                            this._nextButton.disableInput();
                            Components.Tweens.create(this._nextButton, true).to(_0xC639(_0xB90A[45], 0), 400, null, true);
                            Components.Tweens.create(this._nextButton.scale, true).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 400, null, true)
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[735], _0xB90A[5], function _0x10FF4(_0xD15B, _0x11378) {
                var _0x1119D = this._exclusionMap[_0xB90A[8]](_0xD15B);
                for (var _0xC6E8 = 0; _0xC6E8 < _0x1119D.length; _0xC6E8++) {
                    var _0x1135F = _0x1119D[_0xC6E8];
                    if (_0x1135F != _0x11378 && !this._bodyItems[_0xB90A[8]](_0x1135F)) {
                        this.showDefault(_0x1135F)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[736], _0xB90A[5], function _0x11120(_0x115B7) {
                var _0xD0F7 = this._defaults[_0xB90A[8]](_0x115B7);
                _0xD0F7 = _0xD0F7 ? _0xD0F7 : [];
                if (_0xD0F7.length > 0) {
                    this._bodyItems[_0xB90A[95]](_0x115B7, _0xD0F7[0])
                };
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xD4C6 = _0xD0F7[_0xC6E8];
                    _0xD4C6.visible = true
                }
            }), _0xC639(_0xB90A[13], _0xB90A[737], _0xB90A[5], function _0x1100D() {
                var _0x1121A = this._items.keys();
                var _0xD39A = _0x1121A.next();
                while (!_0xD39A.done) {
                    var _0xD0F7 = this._items[_0xB90A[8]](_0xD39A.value);
                    var _0x11391 = [];
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                        var _0xCE22 = _0xD0F7[_0xC6E8];
                        var _0x101B2 = _0xCE22.name.split(_0xB90A[61]);
                        if (_0x101B2[2] == _0xB90A[114]) {
                            _0x11391.push(_0xCE22);
                            if (this.defCategs.indexOf(Number(_0x101B2[1])) != -1) {
                                this._defaultItemsForNext.push(_0xCE22)
                            }
                        };
                        if (this.isInDefsFromPanel(_0x101B2)) {
                            _0x11391.push(_0xCE22);
                            this._defaultsFromPanel[_0xB90A[95]](_0x101B2[1], _0x101B2[2])
                        }
                    };
                    if (_0x11391.length != 0) {
                        this._defaults[_0xB90A[95]](_0xD39A.value, _0x11391)
                    };
                    _0xD39A = _0x1121A.next()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[738], _0xB90A[5], function _0x110EE(_0x101B2) {
                for (var _0xC6E8 = 0; _0xC6E8 < this.defsFromPanel.length; _0xC6E8++) {
                    var _0xD0F7 = this.defsFromPanel[_0xC6E8];
                    if (_0xD0F7[0] == Number(_0x101B2[1]) && _0xD0F7[1] == Number(_0x101B2[2])) {
                        return true
                    }
                };
                return false
            }), _0xC639(_0xB90A[13], _0xB90A[739], _0xB90A[5], function _0x11026() {
                for (var _0xC6E8 = 0; _0xC6E8 < this.categExclusions.length; _0xC6E8++) {
                    var _0xD0F7 = this.categExclusions[_0xC6E8];
                    if (_0xD0F7.length > 1) {
                        var _0xE47F = this._exclusionMap[_0xB90A[8]](_0xD0F7[0].toString());
                        var _0xE4CA = this._exclusionMap[_0xB90A[8]](_0xD0F7[1].toString());
                        if (_0xE47F) {
                            _0xE47F.push(_0xD0F7[1].toString())
                        } else {
                            this._exclusionMap[_0xB90A[95]](_0xD0F7[0].toString(), [_0xD0F7[1].toString()])
                        };
                        if (_0xE4CA) {
                            _0xE4CA.push(_0xD0F7[0].toString())
                        } else {
                            this._exclusionMap[_0xB90A[95]](_0xD0F7[1].toString(), [_0xD0F7[0].toString()])
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[740], _0xB90A[5], function _0x1103F() {
                var _0x113AA = this;
                this._masks.forEach(function(_0x1124C) {
                    var _0x113C3 = _0x1124C.getComponent(Components.DressupMaskComponent).getActivators();
                    var _0x113DC = _0x1124C.getComponent(Components.DressupMaskComponent).getItems();
                    _0x113C3.forEach(function(_0xDCFA) {
                        var _0xEF88 = _0x113AA.getItem(_0xDCFA.split(_0xB90A[61])[0], _0xDCFA.split(_0xB90A[61])[1]);
                        if (_0x113AA.activatorsMap.has(_0xEF88)) {
                            var _0xD0F7 = _0x113AA.activatorsMap[_0xB90A[8]](_0xEF88);
                            for (var _0xC6E8 = 0; _0xC6E8 < _0x113DC.length; _0xC6E8++) {
                                var _0x113F5 = _0x113DC[_0xC6E8];
                                var _0xF09B = _0x113AA.getItemArray(_0x113F5.split(_0xB90A[61])[0], _0x113F5.split(_0xB90A[61])[1]);
                                _0xF09B.forEach(function(_0xC652) {
                                    if (_0xD0F7.indexOf(_0xC652) == -1) {
                                        _0xD0F7.push(_0xC652)
                                    }
                                });
                                _0x113AA.activatorsMap[_0xB90A[95]](_0xEF88, _0xD0F7)
                            }
                        } else {
                            _0xD0F7 = [];
                            for (var _0xC6E8 = 0; _0xC6E8 < _0x113DC.length; _0xC6E8++) {
                                var _0x113F5 = _0x113DC[_0xC6E8];
                                var _0xF09B = _0x113AA.getItemArray(_0x113F5.split(_0xB90A[61])[0], _0x113F5.split(_0xB90A[61])[1]);
                                _0xF09B.forEach(function(_0xC652) {
                                    if (_0xD0F7.indexOf(_0xC652) == -1) {
                                        _0xD0F7.push(_0xC652)
                                    }
                                });
                                _0x113AA.activatorsMap[_0xB90A[95]](_0xEF88, _0xD0F7)
                            }
                        };
                        _0x113AA.pressedMap[_0xB90A[95]](_0xEF88, false);
                        if (_0x113AA.buttonMasks.has(_0xEF88)) {
                            var _0xD0F7 = _0x113AA.buttonMasks[_0xB90A[8]](_0xEF88);
                            _0xD0F7.push(_0x1124C);
                            _0x113AA.buttonMasks[_0xB90A[95]](_0xEF88, _0xD0F7)
                        } else {
                            _0x113AA.buttonMasks[_0xB90A[95]](_0xEF88, [_0x1124C])
                        }
                    })
                })
            }), _0xC639(_0xB90A[13], _0xB90A[741], _0xB90A[5], function _0x11071(_0xD15B, _0xDD2C) {
                var _0xD0F7 = this._items[_0xB90A[8]](_0xD15B);
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xCE22 = _0xD0F7[_0xC6E8];
                    var _0x101B2 = _0xCE22.name.split(_0xB90A[61]);
                    if (Number(_0x101B2[2]) == Number(_0xDD2C)) {
                        return _0xCE22
                    }
                };
                return null
            }), _0xC639(_0xB90A[13], _0xB90A[742], _0xB90A[5], function _0x1108A(_0xD15B, _0xDD2C) {
                var _0xD0F7 = this._items[_0xB90A[8]](_0xD15B);
                var _0x1140E = [];
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xCE22 = _0xD0F7[_0xC6E8];
                    var _0x101B2 = _0xCE22.name.split(_0xB90A[61]);
                    if (Number(_0x101B2[2]) == Number(_0xDD2C)) {
                        _0x1140E.push(_0xCE22)
                    }
                };
                return _0x1140E
            }), _0xC639(_0xB90A[13], _0xB90A[743], _0xB90A[5], function _0x11058(_0xD15B) {
                return this._items[_0xB90A[8]](_0xD15B)
            }), _0xC639(_0xB90A[13], _0xB90A[744], _0xB90A[5], function _0x110D5(_0xD15B, _0xDD2C) {
                if (this._bodyItems[_0xB90A[8]](_0xD15B) && this._bodyItems[_0xB90A[8]](_0xD15B).name.split(_0xB90A[61])[2] == _0xDD2C) {
                    this._bodyItems[_0xB90A[95]](_0xD15B, null)
                };
                var _0xD0F7 = this._items[_0xB90A[8]](_0xD15B);
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xCE22 = _0xD0F7[_0xC6E8];
                    var _0x101B2 = _0xCE22.name.split(_0xB90A[61]);
                    if (Number(_0x101B2[2]) == Number(_0xDD2C)) {
                        _0xCE22.visible = false
                    };
                    if (Number(_0x101B2[2]) > Number(_0xDD2C)) {
                        break
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[745], _0xB90A[5], function _0x11139(_0xD15B, _0xDD2C) {
                var _0xD0F7 = this._items[_0xB90A[8]](_0xD15B);
                this._bodyItems[_0xB90A[95]](_0xD15B, this.getItem(_0xD15B, _0xDD2C));
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xCE22 = _0xD0F7[_0xC6E8];
                    var _0x101B2 = _0xCE22.name.split(_0xB90A[61]);
                    if (Number(_0x101B2[2]) == Number(_0xDD2C)) {
                        _0xCE22.visible = true;
                        var _0x115D0 = [];
                        for (var _0xC9D6 = 0; _0xC9D6 < _0xCE22.children.length; _0xC9D6++) {
                            var _0xF163 = _0xCE22.children[_0xC9D6];
                            _0x115D0.push(_0xF163)
                        };
                        for (var _0xC9D6 = 0; _0xC9D6 < _0x115D0.length; _0xC9D6++) {
                            var _0xF163 = _0x115D0[_0xC9D6];
                            if (_0xF163.getComponent(Components.GlowComponent)) {
                                _0xF163.getComponent(Components.GlowComponent).blink(1)
                            }
                        }
                    };
                    if (Number(_0x101B2[2]) > Number(_0xDD2C)) {
                        break
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[746], _0xB90A[5], function _0x10F90() {
                var _0x111E8 = this;
                this.maskedItems.length = 0;
                var _0x1121A = this.activatorsMap.keys();
                var _0xD39A = _0x1121A.next();
                while (!_0xD39A.done) {
                    var _0xF09B = this.activatorsMap[_0xB90A[8]](_0xD39A.value);
                    if (_0xD39A.value.visible) {
                        var _0x11233 = [];
                        _0xF09B.forEach(function(_0xEF88) {
                            if (_0xEF88.visible) {
                                _0x11233.push(_0xEF88)
                            }
                        });
                        this.buttonMasks[_0xB90A[8]](_0xD39A.value).forEach(function(_0x1124C) {
                            if (_0x111E8.shouldApplyMask(_0x1124C, _0x11233)) {
                                _0x1124C.getComponent(Components.DressupMaskComponent).maskObjects(_0x11233)
                            }
                        });
                        this.maskedItems = this.maskedItems.concat(_0x11233)
                    } else {
                        var _0x11201 = true;
                        for (var _0xC6E8 = 0; _0xC6E8 < _0xF09B.length; _0xC6E8++) {
                            var _0xEF88 = _0xF09B[_0xC6E8];
                            if (this.maskedItems.indexOf(_0xEF88) != -1) {
                                _0x11201 = false;
                                break
                            }
                        };
                        if (_0x11201) {
                            this.buttonMasks[_0xB90A[8]](_0xD39A.value).forEach(function(_0x1124C) {
                                _0x1124C.getComponent(Components.DressupMaskComponent).removeMasks(_0xF09B)
                            })
                        }
                    };
                    _0xD39A = _0x1121A.next()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[747], _0xB90A[5], function _0x11107(_0x1124C, _0x112FB) {
                var _0x11585 = _0x1124C.getComponent(Components.DressupMaskComponent);
                var _0x1156C = _0x11585.getItems();
                var _0x1159E = this.getItemsToMaksName(_0x112FB);
                var _0x1140E = false;
                _0x1156C.forEach(function(_0xF5E1) {
                    if (_0x1159E.indexOf(_0xF5E1) != -1) {
                        _0x1140E = true
                    }
                });
                return _0x1140E
            }), _0xC639(_0xB90A[13], _0xB90A[748], _0xB90A[5], function _0x110A3(_0x11427) {
                var _0xFFA5 = [];
                _0x11427.forEach(function(_0xC652) {
                    _0xFFA5.push(_0xC652.tags[1] + _0xB90A[61] + _0xC652.tags[2])
                });
                return _0xFFA5
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                var _0x112C9 = [];
                var _0x112B0 = this._glowingButtons.values();
                var _0xC652 = _0x112B0.next();
                while (_0xC652 && !_0xC652.done) {
                    if (_0xC652.value) {
                        _0x112C9.push(_0xC652.value.name)
                    };
                    _0xC652 = _0x112B0.next()
                };
                if (this.saveProgressGroup && this.saveProgressGroup != _0xB90A[27]) {
                    _0x10F45.savedButtons[_0xB90A[95]](this.saveProgressGroup, _0x112C9)
                };
                Util.Util.destroyMap(this._buttons);
                Util.Util.destroyMap(this._items);
                Util.Util.destroyMap(this._bodyItems);
                Util.Util.destroyMap(this._exclusionMap);
                Util.Util.destroyMap(this._defaults);
                this._defaultsFromPanel.clear();
                this._defaultsFromPanel = null;
                _get(_getPrototypeOf(_0x10F45.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x10F45
        }(Scene.Component);
        _0x10F45.savedButtons = new Map();
        Components.DressupControllerComponent = _0x10F45
    }

    function _0xBFC7(Components) {
        var _0x115E9 = function(_0x11602) {
            _0xBA1D(_0x115E9, _0x11602);

            function _0x115E9() {
                var _0x116CA;
                _0xB955(this, _0x115E9);
                _0x116CA = _0xB9A0(this, _getPrototypeOf(_0x115E9).apply(this, arguments));
                _0x116CA.bmds = new Map();
                _0x116CA.cachedData = new Map();
                return _0x116CA
            }
            _0xB987(_0x115E9, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (!_0x115E9.bigBmd) {
                    _0x115E9.bigBmd = Util.Bitmap.create(Core.Main.gameWidth, Core.Main.gameHeight)
                };
                this.gameObject.visible = false
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[749], _0xB90A[5], function _0x11666(_0x112FB) {
                for (var _0xC6E8 = 0; _0xC6E8 < _0x112FB.length; _0xC6E8++) {
                    var _0xC652 = _0x112FB[_0xC6E8];
                    this.addMask(_0xC652)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[750], _0xB90A[5], function _0x11698(_0x112FB) {
                for (var _0xC6E8 = 0; _0xC6E8 < _0x112FB.length; _0xC6E8++) {
                    var _0xC652 = _0x112FB[_0xC6E8];
                    this.removeMask(_0xC652)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[751], _0xB90A[5], function _0x1167F(_0xC652) {
                if (_0x115E9.originalTextures.has(_0xC652)) {
                    var _0x116B1;
                    _0x116B1 = _0x115E9.originalTextures[_0xB90A[8]](_0xC652);
                    _0xC652.setTexture(_0x116B1)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[752], _0xB90A[5], function _0x1161B(_0xC652) {
                if (this.cachedData.has(_0xC652)) {
                    _0xC652.loadTexture(this.cachedData[_0xB90A[8]](_0xC652))
                } else {
                    var _0x116B1;
                    if (_0x115E9.originalTextures.has(_0xC652)) {
                        _0x116B1 = _0x115E9.originalTextures[_0xB90A[8]](_0xC652)
                    } else {
                        _0x116B1 = _0xC652.texture;
                        _0x115E9.originalTextures[_0xB90A[95]](_0xC652, _0x116B1)
                    };
                    var _0xCD8C;
                    _0xCD8C = Util.Bitmap.create(_0x116B1.width, _0x116B1.height);
                    _0xC652.setTexture(_0x116B1);
                    var _0xD223 = _0x115E9.bigBmd;
                    _0xD223.clear();
                    _0xD223.blendDestinationOver();
                    _0xD223.draw(_0xC652);
                    _0xD223.blendDestinationIn();
                    _0xD223.draw(this.gameObject);
                    _0xCD8C.clear();
                    _0xCD8C.draw(_0xD223, -(_0xC652.x - _0xC652.anchor.x * _0x116B1.width), -(_0xC652.y - _0xC652.anchor.y * _0x116B1.height), _0xD223.width, _0xD223.height);
                    _0xC652.setTexture(_0xCD8C.texture);
                    this.cachedData[_0xB90A[95]](_0xC652, _0xCD8C)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[753], _0xB90A[5], function _0x11634() {
                return this.maskActivators.split(_0xB90A[572])
            }), _0xC639(_0xB90A[13], _0xB90A[754], _0xB90A[5], function _0x1164D() {
                return this.maskedItems.split(_0xB90A[572])
            })]);
            return _0x115E9
        }(Scene.Component);
        _0x115E9.originalTextures = new Map();
        Components.DressupMaskComponent = _0x115E9
    }

    function _0xBFE0(Components) {
        var _0x116E3 = function(_0x11715) {
            _0xBA1D(_0x116E3, _0x11715);

            function _0x116E3() {
                var _0x11779;
                _0xB955(this, _0x116E3);
                _0x11779 = _0xB9A0(this, _getPrototypeOf(_0x116E3).apply(this, arguments));
                _0x11779.checkOnEvent = _0xB90A[27];
                _0x11779.toThrowEvent = _0xB90A[27];
                _0x11779.eventData = _0xB90A[27];
                _0x11779.globalName = _0xB90A[27];
                _0x11779.unitStart = _0xB90A[27];
                _0x11779.unitEnd = _0xB90A[27];
                _0x11779.staticVariable = _0xB90A[27];
                _0x11779.condition = _0xB90A[27];
                _0x11779.rightSideGlobalName = _0xB90A[27];
                _0x11779.rightSideUnitStart = _0xB90A[27];
                _0x11779.rightSideUnitEnd = _0xB90A[27];
                _0x11779.rightSideStaticVariable = _0xB90A[27];
                _0x11779.leftSideNumbers = [];
                _0x11779.rightSideNumbers = [];
                _0x11779.found = false;
                _0x11779.checkCondition = function() {
                    if (_0x11779.operation == _0x116FC.lt) {
                        _0x11779.leftSideNumbers.forEach(function(_0x11792) {
                            if (!_0x11779.found) {
                                _0x11779.rightSideNumbers.forEach(function(_0x117AB) {
                                    if (_0x11792 < _0x117AB && !_0x11779.found) {
                                        _0x11779.throwEvent();
                                        _0x11779.found = true
                                    }
                                })
                            }
                        })
                    } else {
                        if (_0x11779.operation == _0x116FC[_0xB90A[755]]) {
                            _0x11779.leftSideNumbers.forEach(function(_0x11792) {
                                if (!_0x11779.found) {
                                    _0x11779.rightSideNumbers.forEach(function(_0x117AB) {
                                        if (_0x11792 <= _0x117AB && !_0x11779.found) {
                                            _0x11779.throwEvent();
                                            _0x11779.found = true
                                        }
                                    })
                                }
                            })
                        } else {
                            if (_0x11779.operation == _0x116FC.eq) {
                                _0x11779.leftSideNumbers.forEach(function(_0x11792) {
                                    if (!_0x11779.found) {
                                        _0x11779.rightSideNumbers.forEach(function(_0x117AB) {
                                            if (_0x11792 == _0x117AB && !_0x11779.found) {
                                                _0x11779.throwEvent();
                                                _0x11779.found = true
                                            }
                                        })
                                    }
                                })
                            } else {
                                if (_0x11779.operation == _0x116FC.gt) {
                                    _0x11779.leftSideNumbers.forEach(function(_0x11792) {
                                        if (!_0x11779.found) {
                                            _0x11779.rightSideNumbers.forEach(function(_0x117AB) {
                                                if (_0x11792 > _0x117AB && !_0x11779.found) {
                                                    _0x11779.throwEvent();
                                                    _0x11779.found = true
                                                }
                                            })
                                        }
                                    })
                                } else {
                                    if (_0x11779.operation == _0x116FC[_0xB90A[8]]) {
                                        _0x11779.leftSideNumbers.forEach(function(_0x11792) {
                                            if (!_0x11779.found) {
                                                _0x11779.rightSideNumbers.forEach(function(_0x117AB) {
                                                    if (_0x11792 >= _0x117AB && !_0x11779.found) {
                                                        _0x11779.throwEvent();
                                                        _0x11779.found = true
                                                    }
                                                })
                                            }
                                        })
                                    } else {
                                        if (_0x11779.operation == _0x116FC.ne) {
                                            _0x11779.leftSideNumbers.forEach(function(_0x11792) {
                                                if (!_0x11779.found) {
                                                    _0x11779.rightSideNumbers.forEach(function(_0x117AB) {
                                                        if (_0x11792 != _0x117AB && !_0x11779.found) {
                                                            _0x11779.throwEvent();
                                                            _0x11779.found = true
                                                        }
                                                    })
                                                }
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                _0x11779.throwEvent = function() {
                    if (_0x11779.eventData != _0xB90A[27]) {
                        var _0xD0F7 = [];
                        for (var _0xC6E8 = 0; _0xC6E8 < _0x11779.eventData.split(_0xB90A[572]).length; _0xC6E8 += 2) {
                            var _0xCE22 = _0x11779.eventData.split(_0xB90A[572])[_0xC6E8];
                            _0xD0F7.push([_0xCE22, _0x11779.eventData.split(_0xB90A[572])[_0xC6E8 + 1]])
                        };
                        var _0xCD8C = Util.Util.createEventData(_0xD0F7);
                        _0x11779.events.throwEvent(_0x11779.toThrowEvent, _0xCD8C)
                    } else {
                        _0x11779.events.throwEvent(_0x11779.toThrowEvent)
                    }
                };
                return _0x11779
            }
            _0xB987(_0x116E3, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.findOperation();
                this.initLeftSide();
                this.initRightSide();
                if (this.checkOnEvent) {
                    this.events.addEventListener(this.checkOnEvent, this.checkCondition)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[756], _0xB90A[5], function _0x11760() {
                if (this.rightSideGlobalName) {
                    var _0x117C4 = Util.Globals.getFromGlobals(this.rightSideGlobalName);
                    if (_0x117C4 || _0x117C4 == 0) {
                        this.rightSideNumbers.push(_0x117C4)
                    }
                };
                if (this.rightSideUnitStart) {
                    this.rightSideNumbers.push(Components.DevUtils.getUnitStartTimes(this.rightSideUnitStart))
                };
                if (this.rightSideUnitEnd) {
                    this.rightSideNumbers.push(Components.DevUtils.getUnitEndTimes(this.rightSideUnitEnd))
                };
                if (this.rightSideNr || this.rightSideNr == 0) {
                    this.rightSideNumbers.push(this.rightSideNr)
                };
                if (this.rightSideStaticVariable) {
                    this.rightSideNumbers.push(Object.getOwnPropertyDescriptor(Components[this.rightSideStaticVariable.split(_0xB90A[42])[0]], this.rightSideStaticVariable.split(_0xB90A[42])[1]).value)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[757], _0xB90A[5], function _0x11747() {
                if (this.globalName) {
                    var _0x117C4 = Util.Globals.getFromGlobals(this.globalName);
                    if (_0x117C4 || _0x117C4 == 0) {
                        this.leftSideNumbers.push(_0x117C4)
                    }
                };
                if (this.unitStart) {
                    this.leftSideNumbers.push(Components.DevUtils.getUnitStartTimes(this.unitStart))
                };
                if (this.unitEnd) {
                    this.leftSideNumbers.push(Components.DevUtils.getUnitEndTimes(this.unitEnd))
                };
                if (this.nr || this.nr == 0) {
                    this.leftSideNumbers.push(this.nr)
                };
                if (this.staticVariable) {
                    this.leftSideNumbers.push(Object.getOwnPropertyDescriptor(Components[this.staticVariable.split(_0xB90A[42])[0]], this.staticVariable.split(_0xB90A[42])[1]).value)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[758], _0xB90A[5], function _0x1172E() {
                if (this.condition == _0xB90A[27]) {
                    trace(_0xB90A[759], _0xB90A[697]);
                    return
                };
                if (this.condition.includes(_0xB90A[760]) && !this.condition.includes(_0xB90A[761])) {
                    this.operation = _0x116FC.lt
                };
                if (this.condition.includes(_0xB90A[760]) && this.condition.includes(_0xB90A[761])) {
                    this.operation = _0x116FC[_0xB90A[755]]
                };
                if (!this.condition.includes(_0xB90A[762])) {
                    this.operation = _0x116FC.eq
                };
                if (this.condition.includes(_0xB90A[763]) && !this.condition.includes(_0xB90A[761])) {
                    this.operation = _0x116FC.gt
                };
                if (this.condition.includes(_0xB90A[763]) && this.condition.includes(_0xB90A[761])) {
                    this.operation = _0x116FC[_0xB90A[8]]
                };
                if (this.condition.includes(_0xB90A[699]) && this.condition.includes(_0xB90A[761])) {
                    this.operation = _0x116FC.lt
                };
                if (this.condition.includes(_0xB90A[764])) {
                    this.operation = _0x116FC.lt
                };
                if (this.condition.includes(_0xB90A[755])) {
                    this.operation = _0x116FC[_0xB90A[755]]
                };
                if (this.condition.includes(_0xB90A[765])) {
                    this.operation = _0x116FC.eq
                };
                if (this.condition.includes(_0xB90A[766])) {
                    this.operation = _0x116FC.gt
                };
                if (this.condition.includes(_0xB90A[8])) {
                    this.operation = _0x116FC[_0xB90A[8]]
                };
                if (this.condition.includes(_0xB90A[767])) {
                    this.operation = _0x116FC.ne
                }
            })]);
            return _0x116E3
        }(Scene.Component);
        Components.EventOnCondition = _0x116E3;
        var _0x116FC;
        (function(_0x116FC) {
            _0x116FC[_0x116FC[_0xB90A[764]] = 0] = _0xB90A[764];
            _0x116FC[_0x116FC[_0xB90A[755]] = 1] = _0xB90A[755];
            _0x116FC[_0x116FC[_0xB90A[765]] = 2] = _0xB90A[765];
            _0x116FC[_0x116FC[_0xB90A[766]] = 3] = _0xB90A[766];
            _0x116FC[_0x116FC[_0xB90A[8]] = 4] = _0xB90A[8];
            _0x116FC[_0x116FC[_0xB90A[767]] = 5] = _0xB90A[767]
        })(_0x116FC || (_0x116FC = {}))
    }

    function _0xBFF9(Components) {
        var _0x117DD = function(_0x117F6) {
            _0xBA1D(_0x117DD, _0x117F6);

            function _0x117DD() {
                var _0x11828;
                _0xB955(this, _0x117DD);
                _0x11828 = _0xB9A0(this, _getPrototypeOf(_0x117DD).apply(this, arguments));
                _0x11828.countedEvent = _0xB90A[27];
                _0x11828.eventData = _0xB90A[27];
                _0x11828.countTimes = 2;
                _0x11828.throwOnce = true;
                _0x11828.onDownObject = false;
                _0x11828.onUpObject = false;
                _0x11828.onOverObject = false;
                _0x11828.onOutObject = false;
                _0x11828.onClickObject = false;
                _0x11828.onDownStage = false;
                _0x11828.onUpStage = false;
                _0x11828.active = false;
                _0x11828._count = 0;
                _0x11828.stopCounting = false;
                _0x11828.isUnitCount = false;
                _0x11828.onActivate = function() {
                    _0x11828.active = true
                };
                _0x11828.onDeactivate = function() {
                    _0x11828.active = false
                };
                _0x11828.onCount = function() {
                    if (_0x11828.stopCounting) {
                        return
                    };
                    if (_0x11828.active) {
                        _0x11828._count++;
                        if (_0x11828._count == _0x11828.countTimes) {
                            if (_0x11828.throwOnce) {
                                _0x11828.stopCounting = true
                            };
                            if (_0x11828.eventData != _0xB90A[27]) {
                                var _0xD0F7 = [];
                                for (var _0xC6E8 = 0; _0xC6E8 < _0x11828.eventData.split(_0xB90A[572]).length; _0xC6E8 += 2) {
                                    var _0xCE22 = _0x11828.eventData.split(_0xB90A[572])[_0xC6E8];
                                    _0xD0F7.push([_0xCE22, _0x11828.eventData.split(_0xB90A[572])[_0xC6E8 + 1]])
                                };
                                var _0xCD8C = Util.Util.createEventData(_0xD0F7);
                                _0x11828.events.throwEvent(_0x11828.toThrowEvent, _0xCD8C)
                            } else {
                                _0x11828.events.throwEvent(_0x11828.toThrowEvent)
                            };
                            _0x11828._count = 0
                        }
                    }
                };
                return _0x11828
            }
            _0xB987(_0x117DD, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x1180F = this;
                if (Components.DevUtils.getUnitsName().indexOf(this.countedEvent) != -1) {
                    this.isUnitCount = true
                };
                if (this.countedEvent != _0xB90A[27] && !this.isUnitCount) {
                    this.events.addEventListener(this.countedEvent, this.onCount)
                };
                if (this.deactivateEvent != _0xB90A[27]) {
                    this.events.addEventListener(this.deactivateEvent, this.onDeactivate)
                };
                if (this.activateEvent != _0xB90A[27] && this.activateEvent) {
                    this.events.addEventListener(this.activateEvent, this.onActivate)
                } else {
                    this.active = true
                };
                if (this.resetCounterEvent != _0xB90A[27]) {
                    this.events.addEventListener(this.resetCounterEvent, function() {
                        _0x1180F._count = 0;
                        _0x1180F.stopCounting = false
                    })
                };
                if (this.onDownObject) {
                    this.gameObject.inputEvents.addInputDown(this.onCount)
                };
                if (this.onUpObject) {
                    this.gameObject.inputEvents.addInputUp(this.onCount)
                };
                if (this.onOverObject) {
                    this.gameObject.inputEvents.addInputOver(this.onCount)
                };
                if (this.onOutObject) {
                    this.gameObject.inputEvents.addInputOut(this.onCount)
                };
                if (this.onDownStage) {
                    this.gameObject.game.input.onDown.add(this.onCount)
                };
                if (this.onUpStage) {
                    this.gameObject.game.input.onUp.add(this.onCount)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x117DD
        }(Scene.Component);
        Components.ThrowEventOnCount = _0x117DD
    }

    function _0xC012(Components) {
        var _0x11841 = function(_0x1185A) {
            _0xBA1D(_0x11841, _0x1185A);

            function _0x11841() {
                var _0x11873;
                _0xB955(this, _0x11841);
                _0x11873 = _0xB9A0(this, _getPrototypeOf(_0x11841).apply(this, arguments));
                _0x11873.setInitValues = function() {
                    _0x11873.gameObject.alpha = 0;
                    _0x11873.cont.scale.x = 0;
                    _0x11873.cont.scale.y = 0;
                    _0x11873.cont.alpha = 0;
                    _0x11873.close.scale[_0xB90A[95]](0, 0);
                    _0x11873.close.alpha = 0;
                    _0x11873.gameObject.disableInput()
                };
                _0x11873.onShow = function() {
                    var _0x1188C = _0x11873.cont.getComponent(Components.SizeFit).getFreeSpace();
                    var _0x118A5 = _0x1188C.width / _0x11873.originalBounds.width;
                    var _0x118BE = _0x1188C.height / _0x11873.originalBounds.height;
                    var _0xD8F9 = Math.min(_0x118A5, _0x118BE);
                    _0x11873.bg.enableInput();
                    _0x11873.gameObject.ignoreChildInput = false;
                    Components.Tweens.create(_0x11873.gameObject).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                    _0x11873.gameObject.game.time.events.add(200, function() {
                        Components.Tweens.create(_0x11873.cont).to(_0xC639(_0xB90A[45], 1), 250, null, true);
                        Components.Tweens.create(_0x11873.cont.scale).to(_0xC639(_0xB90A[43], _0xD8F9, _0xB90A[44], _0xD8F9), 250, null, true);
                        _0x11873.gameObject.game.time.events.add(250, function() {
                            Components.Tweens.create(_0x11873.close).to(_0xC639(_0xB90A[45], 1), 250, null, true);
                            Components.Tweens.create(_0x11873.close.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 250, null, true);
                            _0x11873.gameObject.game.time.events.add(250, function() {
                                _0x11873.gameObject.enableInput()
                            }, _0xB9B9(_0x11873))
                        }, _0xB9B9(_0x11873))
                    }, _0xB9B9(_0x11873))
                };
                _0x11873.onHide = function() {
                    _0x11873.gameObject.disableInput();
                    _0x11873.bg.disableInput();
                    Components.Tweens.create(_0x11873.close).to(_0xC639(_0xB90A[45], 0), 250, null, true);
                    Components.Tweens.create(_0x11873.close.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 250, null, true);
                    _0x11873.gameObject.game.time.events.add(250, function() {
                        Components.Tweens.create(_0x11873.cont).to(_0xC639(_0xB90A[45], 0), 250, null, true);
                        Components.Tweens.create(_0x11873.cont.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 250, null, true);
                        _0x11873.gameObject.game.time.events.add(250, function() {
                            Components.Tweens.create(_0x11873.gameObject).to(_0xC639(_0xB90A[45], 0), 200, null, true);
                            _0x11873.gameObject.game.time.events.add(200, function() {
                                _0x11873.gameObject.disableInput()
                            }, _0xB9B9(_0x11873))
                        }, _0xB9B9(_0x11873))
                    }, _0xB9B9(_0x11873))
                };
                return _0x11873
            }
            _0xB987(_0x11841, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x118D7 = this;
                this.credits = GameObject.getTransitionObject(_0xB90A[768]);
                this.music = GameObject.getTransitionObject(_0xB90A[769]);
                if (this.music == null) {
                    this.music = GameObject.getTransitionObject(_0xB90A[770])
                };
                if (this.music == null) {
                    this.music = GameObject.getTransitionObject(_0xB90A[771])
                };
                this.gameObject.children.forEach(function(_0xC652) {
                    if (_0xC652.children.length > 0) {
                        _0x118D7.cont = _0xC652
                    };
                    if (_0xC652.getComponent(Components.MouseInputComponent)) {
                        _0x118D7.bg = _0xC652
                    }
                });
                this.originalBounds = Components.DevUtils.getBounds(this.cont, true, true);
                this.cont.children.forEach(function(_0xC652) {
                    if (_0xC652.getComponent(Components.ButtonComponent) && !_0xC652.getComponent(Components.OpenSiteComponent)) {
                        _0x118D7.close = _0xC652
                    }
                });
                this.close.inputEvents.addButtonPressed(this.onHide);
                this.setInitValues();
                this.events.addEventListener(_0x11841.SHOW_CREDITS, this.onShow);
                this.events.addEventListener(_0x11841.HIDE_CREDITS, this.onHide);
                this.events.addEventListener(Managers.SceneManager.TRANSITION_CLOSE_ANIM_DONE, this.setInitValues, true);
                this.events.addEventListener(_0xB90A[28], function() {
                    _0x118D7.onHide();
                    _0x118D7.gameObject.ignoreChildInput = true
                }, true);
                if (!this.cont.data.maxScale) {
                    this.cont.data.maxScale = _0xC639(_0xB90A[43], 1, _0xB90A[44], 1)
                };
                var _0x11922 = Components.DevUtils.getGameLanguage();
                if (_0x11922 == _0xB90A[772] || _0x11922 == _0xB90A[773]) {
                    var _0x1193B = _0xB90A[27];
                    var _0x118F0 = _0xB90A[27];
                    if (Components.DevUtils.getGameLanguage() == _0xB90A[772]) {
                        _0x1193B = _0xB90A[774];
                        _0x118F0 = _0xB90A[775]
                    };
                    if (Components.DevUtils.getGameLanguage() == _0xB90A[773]) {
                        _0x1193B = _0xB90A[776];
                        _0x118F0 = _0xB90A[777]
                    };
                    var _0x11954 = Util.Bitmap.create(this.music.texture.baseTexture.source.width, this.music.texture.baseTexture.source.height);
                    var _0x1196D = _0xB90A[778];
                    _0x11954.context.font = _0x1196D;
                    _0x11954.context.textAlign = _0xB90A[616];
                    _0x11954.context.textBaseline = _0xB90A[620];
                    _0x11954.context.fillStyle = _0xB90A[779];
                    var _0x11986 = _0x11954.context.measureText(_0x1193B).width;
                    if (_0x11986 > _0x11954.width) {
                        _0x11954.width = _0x11986 + 2
                    };
                    _0x11954.text(_0x1193B, _0x11954.width / 2, _0x11954.height / 2, _0x1196D, _0xB90A[780], false);
                    _0x11954.update();
                    this.music.loadTexture(_0x11954);
                    var _0x11909 = Util.Bitmap.create(this.credits.texture.baseTexture.source.width, this.credits.texture.baseTexture.source.height);
                    var _0x1196D = _0xB90A[781];
                    _0x11909.context.font = _0x1196D;
                    _0x11909.context.textAlign = _0xB90A[616];
                    _0x11909.context.textBaseline = _0xB90A[620];
                    _0x11909.context.fillStyle = _0xB90A[779];
                    var _0x11986 = _0x11909.context.measureText(_0x118F0).width;
                    if (_0x11986 > _0x11909.width) {
                        _0x11909.width = _0x11986 + 2
                    };
                    _0x11909.text(_0x118F0, _0x11909.width / 2, _0x11909.height / 2, _0x1196D, _0xB90A[780], false);
                    _0x11909.update();
                    this.credits.loadTexture(_0x11909)
                }
            })]);
            return _0x11841
        }(Scene.Component);
        _0x11841.SHOW_CREDITS = _0xB90A[782];
        _0x11841.HIDE_CREDITS = _0xB90A[783];
        Components.CreditsController = _0x11841
    }

    function _0xC02B(Components) {
        var _0x1199F = function(_0x119B8) {
            _0xBA1D(_0x1199F, _0x119B8);

            function _0x1199F() {
                var _0x119EA;
                _0xB955(this, _0x1199F);
                _0x119EA = _0xB9A0(this, _getPrototypeOf(_0x1199F).apply(this, arguments));
                _0x119EA.index = 0;
                _0x119EA.repBName = [];
                _0x119EA.initObjects = function() {
                    _0x119EA.repBName = GameObject.getObjectsByTag(_0x119EA.bodiesCont, true);
                    _0x119EA.rightArrow = GameObject.getObject(_0x119EA.rightArrowName);
                    _0x119EA.leftArrow = GameObject.getObject(_0x119EA.leftArrowName)
                };
                _0x119EA.initEvents = function() {
                    Components.Tweens.create(_0x119EA.rightArrow).to(_0xC639(_0xB90A[43], _0x119EA.rightArrow.x + 10), 1000, null, true, 0, -1, true);
                    Components.Tweens.create(_0x119EA.leftArrow).to(_0xC639(_0xB90A[43], _0x119EA.leftArrow.x - 10), 1000, null, true, 0, -1, true);
                    _0x119EA.rightArrow.addButtonPressedCallback(_0x119EA.onRight);
                    _0x119EA.leftArrow.addButtonPressedCallback(_0x119EA.onLeft);
                    _0x119EA.events.addEventListener(_0xB90A[784], _0x119EA.onLeft);
                    _0x119EA.events.addEventListener(_0xB90A[785], function() {
                        _0x119EA.onRight(_0x119EA.rightArrow)
                    });
                    _0x119EA.repBName.forEach(function(_0xCE22) {
                        _0xCE22.alpha = 0;
                        _0xCE22.visible = false;
                        _0xCE22.disableInput()
                    });
                    _0x119EA.events.addEventListener(_0xB90A[786], _0x119EA.changeContainer);
                    _0x119EA.events.addEventListener(_0xB90A[787], _0x119EA.swipeChange)
                };
                _0x119EA.swipeChange = function(_0xCF35) {
                    var _0x11A03 = _0xCF35.getData(_0xB90A[788]);
                    if (!_0x11A03) {
                        _0x119EA.onRight(_0x119EA.rightArrow)
                    } else {
                        _0x119EA.onLeft()
                    }
                };
                _0x119EA.changeContainer = function(_0xCF35) {
                    _0x119EA.index = Number(_0xCF35.getData(_0xB90A[789]));
                    _0x119EA.repBName[_0x119EA.index].alpha = 1;
                    _0x119EA.repBName[_0x119EA.index].visible = true;
                    _0x119EA.repBName[_0x119EA.index].enableInput()
                };
                _0x119EA.onLeft = function() {
                    var _0xC7FB = _0x119EA.repBName[_0x119EA.index];
                    Components.Tweens.create(_0xC7FB, true, false).to(_0xC639(_0xB90A[45], 0), 100, null, true).onComplete.addOnce(function(_0xC652) {
                        _0xC652.visible = false
                    }, _0xB9B9(_0x119EA), 0, _0xC7FB);
                    _0xC7FB.disableInput();
                    _0x119EA.changeIndex();
                    _0xC7FB = _0x119EA.repBName[_0x119EA.index];
                    _0xC7FB.visible = true;
                    Components.Tweens.create(_0xC7FB, true, false).to(_0xC639(_0xB90A[45], 1), 100, null, true);
                    _0xC7FB.enableInput()
                };
                _0x119EA.onRight = function(_0xC652) {
                    var _0xC7FB = _0x119EA.repBName[_0x119EA.index];
                    Components.Tweens.create(_0xC7FB, true, false).to(_0xC639(_0xB90A[45], 0), 100, null, true).onComplete.addOnce(function(_0xC652) {
                        _0xC652.visible = false
                    }, _0xB9B9(_0x119EA), 0, _0xC7FB);
                    _0xC7FB.disableInput();
                    _0x119EA.changeIndex(true);
                    _0xC7FB = _0x119EA.repBName[_0x119EA.index];
                    _0xC7FB.visible = true;
                    Components.Tweens.create(_0xC7FB, true, false).to(_0xC639(_0xB90A[45], 1), 100, null, true);
                    _0xC7FB.enableInput()
                };
                return _0x119EA
            }
            _0xB987(_0x1199F, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                var _0x11A1C = this;
                this.events.addEventListener(Scene.Unit.UNIT_CREATED, function() {
                    _0x11A1C.initObjects();
                    _0x11A1C.initEvents()
                })
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {}), _0xC639(_0xB90A[13], _0xB90A[790], _0xB90A[5], function _0x119D1() {
                var _0xC684 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (_0xC684) {
                    this.index++;
                    if (this.index > this.repBName.length - 1) {
                        this.index = 0
                    }
                } else {
                    this.index--;
                    if (this.index < 0) {
                        this.index = this.repBName.length - 1
                    }
                }
            })]);
            return _0x1199F
        }(Scene.Component);
        Components.ExtraNavigate = _0x1199F
    }

    function _0xC044(Components) {
        var _0x11A35 = function(_0x11A4E) {
            _0xBA1D(_0x11A35, _0x11A4E);

            function _0x11A35() {
                var _0x11AB2;
                _0xB955(this, _0x11A35);
                _0x11AB2 = _0xB9A0(this, _getPrototypeOf(_0x11A35).apply(this, arguments));
                _0x11AB2.checkGa = function() {
                    gameanalytics.state.GAState.setAvailableResourceCurrencies([_0xB90A[791]]);
                    gameanalytics.state.GAState.setAvailableResourceItemTypes([_0xB90A[792], _0xB90A[793]])
                };
                return _0x11AB2
            }
            _0xB987(_0x11A35, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.checkGa()
            })], [_0xC639(_0xB90A[13], _0xB90A[794], _0xB90A[5], function _0x11A67(_0x11ACB) {
                gameanalytics.GameAnalytics.addResourceEvent(gameanalytics.EGAResourceFlowType.Source, _0xB90A[795], 1, _0x11ACB, _0x11ACB)
            }), _0xC639(_0xB90A[13], _0xB90A[796], _0xB90A[5], function _0x11A80(_0x11ACB) {
                gameanalytics.GameAnalytics.addResourceEvent(gameanalytics.EGAResourceFlowType.Source, _0xB90A[791], 1, _0x11ACB, _0x11ACB)
            }), _0xC639(_0xB90A[13], _0xB90A[797], _0xB90A[5], function _0x11A99(_0x11ACB) {
                gameanalytics.GameAnalytics.addResourceEvent(gameanalytics.EGAResourceFlowType.Source, _0xB90A[798], 1, _0x11ACB, _0x11ACB)
            })]);
            return _0x11A35
        }(Scene.Component);
        _0x11A35.achievements = new Map([
            [_0xB90A[142], _0xB90A[799]],
            [_0xB90A[184], _0xB90A[800]],
            [_0xB90A[198], _0xB90A[801]],
            [_0xB90A[212], _0xB90A[802]]
        ]);
        Components.GameAnalyticsInit = _0x11A35
    }

    function _0xC05D(Components) {
        var _0x11AE4 = function(_0x11AFD) {
            _0xBA1D(_0x11AE4, _0x11AFD);

            function _0x11AE4() {
                var _0x11BDE;
                _0xB955(this, _0x11AE4);
                _0x11BDE = _0xB9A0(this, _getPrototypeOf(_0x11AE4).apply(this, arguments));
                _0x11BDE.lvlsTag = _0xB90A[803];
                _0x11BDE.lockedTag = _0xB90A[27];
                _0x11BDE.animationTag = _0xB90A[27];
                _0x11BDE.unlockSound = _0xB90A[804];
                _0x11BDE.glitzEvent = _0xB90A[27];
                _0x11BDE.hideAnimationFromStart = true;
                _0x11BDE.animationsAfterclick = false;
                _0x11BDE.hideButtonWhileAnimating = false;
                _0x11BDE.startAnimationEvent = _0xB90A[27];
                _0x11BDE.glitzContainerName = _0xB90A[27];
                _0x11BDE.glitzOffset = _0xB90A[27];
                _0x11BDE.hasAnimations = false;
                _0x11BDE.initProp = function() {

                    if (_0x11AE4._currentLevel > 0) {
                        for (var _0x11BF7 = 1; _0x11BF7 <= _0x11AE4._currentLevel; _0x11BF7++) {
                            GameObject.getObject(_0xB90A[434] + _0x11BF7).visible = false
                        }
                    };
                    if (_0x11BDE.resetAtTheEnd && _0x11AE4._currentLevel >= _0x11BDE._lvls.length) {
                        _0x11AE4._currentLevel = 0
                    };
                    if (_0x11BDE.keepProgression && _0x11AE4._currentLevel != _0x11AE4.lastClick && _0x11AE4._currentLevel <= _0x11BDE._lvls.length) {
                        if (_0x11AE4._currentLevel != 0) {
                            _0x11AE4._currentLevel--
                        }
                    };
                    _0x11AE4._currentLevel++;
                    _0x11BDE.disableLevels();
                    if (_0x11BDE.keepProgression) {
                        _0x11BDE.hideObjects(_0x11BDE._lvls)
                    } else {
                        _0x11BDE.hideObjects(_0x11BDE._lvls, true);
                        _0x11BDE.disableLevels(true)
                    };
                    if (_0x11BDE.keepProgression) {
                        _0x11BDE.hideObjects(_0x11BDE._locked, false, false, true)
                    };
                    if (_0x11BDE.hasAnimations) {
                        _0x11BDE.hideObjects(_0x11BDE.anims, true)
                    };
                    var _0xCC2E;
                    if (_0x11AE4._currentLevel <= _0x11BDE._lvls.length) {
                        _0xCC2E = Number(_0x11BDE._lvls[_0x11AE4._currentLevel - 1].parent.name.split(_0xB90A[61])[1]) - 1;
                        _0x11BDE.events.throwEvent(_0xB90A[786], Util.Util.createEventData([
                            [_0xB90A[789], _0xCC2E]
                        ]))
                    } else {
                        _0xCC2E = Number(_0x11BDE._lvls[_0x11AE4.lastClick - 1].parent.name.split(_0xB90A[61])[1]) - 1;
                        _0x11BDE.events.throwEvent(_0xB90A[786], Util.Util.createEventData([
                            [_0xB90A[789], _0xCC2E]
                        ]))
                    }
                };
                _0x11BDE.initObjects = function() {
                    _0x11BDE.hasAnimations = _0x11BDE.startAnimationEvent != _0xB90A[27];
                    _0x11BDE._lvls = GameObject.getObjectsByTag(_0x11BDE.lvlsTag, true);
                    _0x11BDE.anims = GameObject.getObjectsByTag(_0x11BDE.animationTag, true);
                    _0x11BDE._locked = GameObject.getObjectsByTag(_0x11BDE.lockedTag, true);
                    _0x11BDE.bodies = GameObject.getObjectsByTag(_0xB90A[805], true)
                };
                _0x11BDE.initLocalEvents = function() {
                    _0x11BDE._lvls.forEach(function(_0xC652) {
                        _0xC652.inputEvents.addButtonPressed(_0x11BDE.onLevelClick)
                    });
                    if (_0x11AE4.lastClick) {
                        _0x11BDE.gameObject.game.time.events.add(100, function() {}, _0xB9B9(_0x11BDE))
                    }
                };
                _0x11BDE.onLevelClick = function(_0xCC47) {
                    _0x11AE4.lastClick = Number(_0xCC47.tags[1]);
                    _0x11AE4.bodyToShow = Number(_0xCC47.tags[2]);
                    _0x11AE4.played[Number(_0xCC47.tags[1]) - 1] = true;
                    if (_0x11BDE.hasAnimations && _0x11BDE.animationsAfterclick) {
                        if (_0x11BDE.hideAnimationFromStart) {
                            Components.Tweens.create(_0x11BDE.anims[_0x11AE4.lastClick - 1]).to(_0xC639(_0xB90A[45], 1), 400, null, true).onComplete.addOnce(function() {
                                _0x11BDE.events.throwEvent(_0x11BDE.startAnimationEvent + _0x11AE4.lastClick)
                            });
                            Components.Tweens.create(_0x11BDE._lvls[_0x11AE4.lastClick - 1]).to(_0xC639(_0xB90A[45], 0), 400, null, true)
                        } else {
                            _0x11BDE.events.throwEvent(_0x11BDE.startAnimationEvent + _0x11AE4.lastClick)
                        }
                    };
                    _0x11BDE.disableLevels(true)
                };
                _0x11BDE.handleEnable = function(_0xCF35) {
                    var _0xCC2E;
                    if (_0xCF35) {
                        _0xCC2E = _0xCF35.getData(_0xB90A[62])
                    } else {
                        _0xCC2E = _0x11AE4.lastClick.toString()
                    };
                    for (var _0x11C10 = 0; _0x11C10 < _0x11BDE._lvls.length; _0x11C10++) {
                        var _0xCE22 = _0x11BDE._lvls[_0x11C10];
                        if (_0xCC2E == _0xCE22.tags[1]) {
                            _0xCE22.enableInput()
                        } else {
                            _0xCE22.disableInput()
                        }
                    }
                };
                _0x11BDE.doLvlStuff = function() {
                    if (_0x11AE4._currentLevel > _0x11BDE._lvls.length) {
                        _0x11BDE.events.throwEvent(_0xB90A[806]);
                        return
                    };
                    if (_0x11BDE.hasAnimations) {
                        if (!_0x11BDE.hideButtonWhileAnimating) {
                            Components.Tweens.create(_0x11BDE._lvls[_0x11AE4._currentLevel - 1]).to(_0xC639(_0xB90A[45], 1), 400, null, true)
                        };
                        Components.Tweens.create(_0x11BDE.anims[_0x11AE4._currentLevel - 1]).to(_0xC639(_0xB90A[45], 1), 400, null, true).onComplete.addOnce(function() {
                            if (!_0x11BDE.animationsAfterclick) {
                                _0x11BDE.events.throwEvent(_0x11BDE.startAnimationEvent + _0x11AE4._currentLevel);
                                _0x11BDE.events.addEventListener(_0xB90A[807], _0x11BDE.animationComplete, true)
                            } else {
                                _0x11BDE.animationComplete()
                            }
                        })
                    } else {
                        _0x11BDE._lvls[_0x11AE4._currentLevel - 1].visible = true;
                        _0x11BDE._lvls[_0x11AE4._currentLevel - 1].alpha = 0;
                        Components.Tweens.create(_0x11BDE._lvls[_0x11AE4._currentLevel - 1]).to(_0xC639(_0xB90A[45], 1), 400, null, true).onComplete.addOnce(_0x11BDE.animationComplete)
                    };
                    if (_0x11BDE.hasAnimations) {
                        _0x11BDE.disableLevels()
                    };
                    if (Components.DevUtils.getUnitStartTimes(Components.DevUtils.getCurrentUnitName()) == 1) {
                        _0x11BDE.events.throwEvent(_0xB90A[808])
                    }
                };
                _0x11BDE.animationComplete = function() {
                    var _0x11C29 = _0x11BDE._lvls[_0x11AE4._currentLevel - 1];
                    if (_0x11BDE.glitzContainerName != _0xB90A[27]) {
                        GameObject.getObject(_0x11BDE.glitzContainerName).x = _0x11C29.x;
                        GameObject.getObject(_0x11BDE.glitzContainerName).y = _0x11C29.y;
                        if (_0x11BDE.glitzOffset != _0xB90A[27]) {
                            GameObject.getObject(_0x11BDE.glitzContainerName).x += Number(_0x11BDE.glitzOffset.split(_0xB90A[572])[0]);
                            GameObject.getObject(_0x11BDE.glitzContainerName).y += Number(_0x11BDE.glitzOffset.split(_0xB90A[572])[1])
                        }
                    };
                    _0x11BDE.events.throwEvent(_0xB90A[809]);
                    _0x11C29.visible = true;
                    _0x11C29.enableInput();
                    if (_0x11C29.getComponent(Components.GlowComponent)) {
                        _0x11C29.getComponent(Components.GlowComponent).blink(2)
                    };
                    if (_0x11BDE.hasAnimations) {
                        if (!_0x11BDE.animationsAfterclick) {
                            Components.Tweens.create(_0x11BDE.anims[_0x11AE4._currentLevel - 1]).to(_0xC639(_0xB90A[45], 0), 400, null, true);
                            Components.Tweens.create(_0x11BDE._lvls[_0x11AE4._currentLevel - 1]).to(_0xC639(_0xB90A[45], 1), 400, null, true)
                        }
                    };
                    Components.DevUtils.playSound(_0x11BDE.unlockSound);
                    if (_0x11BDE.multipleGlitzPositions) {
                        _0x11BDE.events.throwEvent(_0x11BDE.glitzEvent + _0x11AE4._currentLevel)
                    } else {
                        _0x11BDE.events.throwEvent(_0x11BDE.glitzEvent)
                    }
                };
                return _0x11BDE
            }
            _0xB987(_0x11AE4, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initObjects();
                this.initProp();
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[810], _0xB90A[5], function _0x11B16() {
                var _0xD462 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                for (var _0xC6E8 = 0; _0xC6E8 < this._lvls.length; _0xC6E8++) {
                    var _0x11B61 = this._locked[_0xC6E8];
                    var _0x11B7A = this._lvls[_0xC6E8];
                    var _0x11B48 = this.anims[_0xC6E8];
                    if (_0xD462) {
                        _0x11B7A.disableInput()
                    } else {
                        if (_0xC6E8 >= _0x11AE4._currentLevel - 1) {
                            _0x11B7A.visible = false
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[811], _0xB90A[5], function _0x11B2F(_0xD0F7) {
                var _0xD462 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var _0xCCC4 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var _0x11BC5 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                var _0x11BAC = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _0xB90A[27];
                for (var _0x11B93 = 0; _0x11B93 < _0xD0F7.length; _0x11B93++) {
                    var _0xC652 = _0xD0F7[_0x11B93];
                    if (_0xD462) {
                        if (_0xC652.name == _0x11BAC) {
                            _0xC652.alpha = 0;
                            continue
                        };
                        if (_0xCCC4) {
                            Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[45], 0), 300, null, true)
                        } else {
                            _0xC652.alpha = 0
                        }
                    } else {
                        if (_0xC652.name == _0x11BAC) {
                            _0xC652.alpha = 0;
                            continue
                        } else {
                            if (!_0x11BC5 && _0x11B93 >= _0x11AE4._currentLevel - 1) {
                                if (_0xCCC4) {
                                    Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[45], 0), 300, null, true)
                                } else {
                                    _0xC652.alpha = 0
                                }
                            } else {
                                if (_0x11BC5 && _0x11B93 < _0x11AE4._currentLevel - 1) {
                                    if (_0xCCC4) {
                                        Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[45], 0), 300, null, true)
                                    } else {
                                        _0xC652.alpha = 0
                                    }
                                }
                            }
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                var _0x11C42 = this;
                if (!_0x11AE4.lastClick) {
                    this.doLvlStuff()
                } else {
                    if (_0x11AE4._currentLevel > this._lvls.length) {
                        this.doLvlStuff()
                    } else {
                        this.gameObject.game.time.events.add(200, function() {
                            _0x11C42.gameObject.game.time.events.add(200, _0x11C42.doLvlStuff, _0x11C42)
                        }, this)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                _get(_getPrototypeOf(_0x11AE4.prototype), _0xB90A[24], this).call(this);
                this._locked = [];
                this._lvls = []
            })]);
            return _0x11AE4
        }(Scene.Component);
        _0x11AE4._currentLevel = 0;
        _0x11AE4.lastClick = 0;
        _0x11AE4.bodyToShow = 0;
        _0x11AE4.played = [];
        Components.LevelSelectController = _0x11AE4
    }

    function _0xC076(Components) {
        var _0x11C5B = function(_0x11C74) {
            _0xBA1D(_0x11C5B, _0x11C74);

            function _0x11C5B() {
                var _0x11DD2;
                _0xB955(this, _0x11C5B);
                _0x11DD2 = _0xB9A0(this, _getPrototypeOf(_0x11C5B).apply(this, arguments));
                _0x11DD2.invertMask = false;
                _0x11DD2.fadeAtEdges = true;
                _0x11DD2.maskChildren = true;
                _0x11DD2.lastMx = 0;
                _0x11DD2.lastMy = 0;
                _0x11DD2.lastMw = 0;
                _0x11DD2.lastMh = 0;
                _0x11DD2.lastMa = 0;
                _0x11DD2.lastOx = 0;
                _0x11DD2.lastOy = 0;
                _0x11DD2.lastOw = 0;
                _0x11DD2.lastOh = 0;
                _0x11DD2.lastOa = 0;
                _0x11DD2.lastTint = 0xffffff;
                _0x11DD2.tint = 0xffffff;
                _0x11DD2.onUpdate = function() {
                    if (!_0x11DD2.gameObject.visible || _0x11DD2.gameObject.alpha == 0) {
                        return
                    };
                    var _0x11D0A = false;
                    var _0x11DA0 = null;
                    if (_0x11DD2.gameObject.game.time.frames != _0x11C5B.boundsFrameUpdated[_0xB90A[8]](_0x11DD2.maskedBy)) {
                        _0x11C5B.boundsFrameUpdated[_0xB90A[95]](_0x11DD2.maskedBy, _0x11DD2.gameObject.game.time.frames);
                        _0x11DA0 = Components.DevUtils.getBounds(_0x11DD2.maskedBy, true, true);
                        _0x11C5B.maskBounds[_0xB90A[95]](_0x11DD2.maskedBy, _0x11DA0)
                    } else {
                        _0x11DA0 = _0x11C5B.maskBounds[_0xB90A[8]](_0x11DD2.maskedBy)
                    };
                    var _0x11DB9 = Components.DevUtils.getBounds(_0x11DD2.gameObject, true, true);
                    if (_0x11DA0.x != _0x11DD2.lastMx || _0x11DA0.y != _0x11DD2.lastMy || _0x11DA0.width != _0x11DD2.lastMw || _0x11DA0.height != _0x11DD2.lastMh || _0x11DD2.maskedBy.alpha != _0x11DD2.lastMa) {
                        _0x11D0A = true
                    };
                    if (_0x11DB9.x != _0x11DD2.lastOx || _0x11DB9.y != _0x11DD2.lastOy || _0x11DB9.width != _0x11DD2.lastOw || _0x11DB9.height != _0x11DD2.lastOh || _0x11DD2.gameObject.alpha != _0x11DD2.lastOa) {
                        _0x11D0A = true
                    };
                    _0x11DD2.lastMx = _0x11DA0.x;
                    _0x11DD2.lastMy = _0x11DA0.y;
                    _0x11DD2.lastMw = _0x11DA0.width;
                    _0x11DD2.lastMh = _0x11DA0.height;
                    _0x11DD2.lastMa = _0x11DD2.maskedBy.alpha;
                    _0x11DD2.lastOx = _0x11DB9.x;
                    _0x11DD2.lastOy = _0x11DB9.y;
                    _0x11DD2.lastOw = _0x11DB9.width;
                    _0x11DD2.lastOh = _0x11DB9.height;
                    _0x11DD2.lastOa = _0x11DD2.gameObject.alpha;
                    if (_0x11D0A) {
                        var _0x11DEB = _0x11DA0.intersects(_0x11DB9, 1);
                        _0x11DEB ? _0x11DD2.gameObject.enableInput() : _0x11DD2.gameObject.disableInput();
                        _0x11DD2.recreateMask(_0x11DA0, _0x11DB9, _0x11DEB)
                    }
                };
                return _0x11DD2
            }
            _0xB987(_0x11C5B, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMask();
                if (this.maskChildren) {
                    if (this.gameObject.children.length != 0) {
                        this.applyMaskRec(this.gameObject.children)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[812], _0xB90A[5], function _0x11C8D(_0x11D3C) {
                for (var _0x11D23 = 0; _0x11D23 < _0x11D3C.length; _0x11D23++) {
                    var _0xF163 = _0x11D3C[_0x11D23];
                    if (_0xF163.getComponent(_0x11C5B) == null) {
                        var _0x1124C = new _0x11C5B();
                        _0xF163.addComponent(_0x1124C)
                    };
                    if (_0xF163.children.length != 0) {
                        this.applyMaskRec(_0xF163.children)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[813], _0xB90A[5], function _0x11CA6() {
                var _0x11D55 = this;
                this.maskedBy = GameObject.getObject(_0xB90A[308]);
                this.events.addEventListener(Scene.Unit.UPDATE, this.onUpdate);
                this.originalTexture = this.gameObject.texture.baseTexture.source;
                this.activeTexture = Util.Bitmap.create(this.originalTexture.width, this.originalTexture.height);
                this.toDrawTexture = Util.Bitmap.create(this.originalTexture.width, this.originalTexture.height);
                this.toDrawTexture.draw(this.originalTexture);
                this.gameObject.loadTexture(this.activeTexture);
                if (_0x11C5B.maskCompMap.has(this.maskedBy)) {
                    _0x11C5B.maskCompMap[_0xB90A[8]](this.maskedBy).push(this)
                } else {
                    _0x11C5B.maskCompMap[_0xB90A[95]](this.maskedBy, [this])
                };
                this.updateMask(false);
                var _0x11D6E = Object.getOwnPropertyDescriptor(this.gameObject.tint, _0xB90A[814]);
                Object.defineProperty(this.gameObject, _0xB90A[814], _0xC639(_0xB90A[8], function _0xE8CB() {
                    return 0xffffff
                }, _0xB90A[95], function _0x11D87(_0xD255) {
                    _0x11D55.lastTint = _0x11D55.tint;
                    _0x11D55.tint = _0xD255;
                    _0x11D55.toDrawTexture.clear();
                    _0x11D55.toDrawTexture.rect(0, 0, _0x11D55.activeTexture.width, _0x11D55.activeTexture.height, _0x11D55.toColor(_0x11D55.tint));
                    _0x11D55.toDrawTexture.blendDestinationAtop();
                    _0x11D55.toDrawTexture.draw(_0x11D55.originalTexture);
                    _0x11D55.toDrawTexture.blendSourceOver();
                    var _0x11DA0 = Components.DevUtils.getBounds(_0x11D55.maskedBy, true, true);
                    var _0x11DB9 = Components.DevUtils.getBounds(_0x11D55.gameObject, true, true);
                    _0x11D55.recreateMask(_0x11DA0, _0x11DB9, true)
                }));
                this.events.addEventListener(_0xB90A[28], function() {
                    if (_0x11D55.gameObject.input) {
                        _0x11D55.gameObject.input.pixelPerfectClick = true;
                        _0x11D55.gameObject.input.pixelPerfectOver = true;
                        _0x11D55.gameObject.input.pixelPerfectAlpha = 1
                    }
                })
            }), _0xC639(_0xB90A[13], _0xB90A[815], _0xB90A[5], function _0x11CF1(_0x11E81) {
                _0x11E81 >>>= 0;
                var _0xCE3B = _0x11E81 & 0xFF,
                    _0xFCE9 = (_0x11E81 & 0xFF00) >>> 8,
                    _0xFD02 = (_0x11E81 & 0xFF0000) >>> 16;
                return _0xB90A[571] + [_0xFD02, _0xFCE9, _0xCE3B].join(_0xB90A[572]) + _0xB90A[573]
            }), _0xC639(_0xB90A[13], _0xB90A[816], _0xB90A[5], function _0x11D0A() {
                var _0x10D06 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (!_0x11C5B.maskTextures.has(this.maskedBy) || _0x10D06) {
                    this.maskTexture = !_0x10D06 ? Util.Bitmap.create(this.maskedBy.texture.baseTexture.source.width, this.maskedBy.texture.baseTexture.source.height) : _0x11C5B.maskTextures[_0xB90A[8]](this.maskedBy);
                    this.maskTexture.resize(this.maskedBy.texture.baseTexture.source.width, this.maskedBy.texture.baseTexture.source.height);
                    this.maskTexture.draw(this.maskedBy.texture.baseTexture.source);
                    if (!_0x10D06) {
                        document.body.appendChild(this.maskTexture.canvas)
                    };
                    var _0x11EB3 = this.maskTexture.context.getImageData(0, 0, this.maskTexture.width, this.maskTexture.height);
                    for (var _0x11E9A = 3; _0x11E9A < _0x11EB3.data.length; _0x11E9A += 4) {
                        if (_0x11EB3.data[_0x11E9A] != 0) {
                            _0x11EB3.data[_0x11E9A] = 255
                        }
                    };
                    this.maskTexture.context.putImageData(_0x11EB3, 0, 0);
                    var _0x109FF = this.maskTexture.context.createLinearGradient(this.maskTexture.width / 2, 0, this.maskTexture.width / 2, this.maskTexture.height);
                    _0x109FF.addColorStop(0, _0xB90A[817]);
                    _0x109FF.addColorStop(0.07, _0xB90A[818]);
                    _0x109FF.addColorStop(0.93, _0xB90A[818]);
                    _0x109FF.addColorStop(1, _0xB90A[817]);
                    this.maskTexture.blendSourceIn();
                    this.maskTexture.rect(0, 0, this.maskTexture.width, this.maskTexture.height, _0x109FF);
                    this.maskTexture.blendSourceOver();
                    _0x11C5B.maskTextures[_0xB90A[95]](this.maskedBy, this.maskTexture)
                } else {
                    this.maskTexture = _0x11C5B.maskTextures[_0xB90A[8]](this.maskedBy)
                };
                this.onUpdate()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[819], _0xB90A[5], function _0x11CD8(_0x11DA0, _0xFF5A) {
                var _0x11E68 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                if (this.isFullInside(_0xFF5A, _0x11DA0)) {
                    this.activeTexture.clear();
                    this.activeTexture.draw(this.toDrawTexture);
                    return
                };
                if (_0x11E68 || !this.isCleared) {
                    this.activeTexture.clear();
                    if (this.invertMask || _0x11E68) {
                        this.activeTexture.draw(this.toDrawTexture)
                    };
                    this.isCleared = true
                };
                if (!_0x11E68) {
                    return
                };
                this.isCleared = false;
                if (this.invertMask) {
                    this.activeTexture.blendDestinationOut()
                } else {
                    this.activeTexture.blendDestinationIn()
                };
                var _0x11E1D = this.gameObject.toLocal(new PIXI.Point(_0x11DA0.x, _0x11DA0.y), this.gameObject.game.world);
                var _0x11E04 = this.gameObject.toLocal(new PIXI.Point(_0x11DA0.bottomRight.x, _0x11DA0.bottomRight.y), this.gameObject.game.world);
                var _0x11E4F = Math.abs(_0x11E04.x - _0x11E1D.x);
                var _0x11E36 = Math.abs(_0x11E04.y - _0x11E1D.y);
                _0x11E1D.x += this.gameObject.anchor.x * this.gameObject.unscaledWidth;
                _0x11E1D.y += this.gameObject.anchor.y * this.gameObject.unscaledHeight;
                this.activeTexture.copy(this.maskTexture, 0, 0, this.maskTexture.width, this.maskTexture.height, _0x11E1D.x, _0x11E1D.y, _0x11E4F, _0x11E36, 0, 0, 0, 1, 1, 1);
                this.activeTexture.blendSourceOver()
            }), _0xC639(_0xB90A[13], _0xB90A[820], _0xB90A[5], function _0x11CBF(_0xFF5A, _0x11DA0) {
                return _0xFF5A.x > _0x11DA0.x && _0xFF5A.right < _0x11DA0.right && _0xFF5A.y > _0x11DA0.y + _0x11DA0.height / 10 && _0xFF5A.bottom < _0x11DA0.bottom - _0x11DA0.height / 10
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.maskTexture = null;
                _0x11C5B.maskTextures.clear();
                _0x11C5B.maskBounds.clear();
                _0x11C5B.boundsFrameUpdated.clear();
                _get(_getPrototypeOf(_0x11C5B.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x11C5B
        }(Scene.Component);
        _0x11C5B.maskBounds = new Map();
        _0x11C5B.maskTextures = new Map();
        _0x11C5B.maskCompMap = new Map();
        _0x11C5B.boundsFrameUpdated = new Map();
        Components.MaskComponent = _0x11C5B
    }

    function _0xC08F(Components) {
        var _0x11F30 = function(_0x11F62) {
            _0xBA1D(_0x11F30, _0x11F62);

            function _0x11F30() {
                var _0x124F3;
                _0xB955(this, _0x11F30);
                _0x124F3 = _0xB9A0(this, _getPrototypeOf(_0x11F30).apply(this, arguments));
                _0x124F3.width = 8;
                _0x124F3.height = 5;
                _0x124F3.spacing = 3;
                _0x124F3.padding = _0xB90A[821];
                _0x124F3.toCollect = _0xB90A[822];
                _0x124F3.powerupsTag = _0xB90A[823];
                _0x124F3.moves = 320;
                _0x124F3.multipleBreakBlockDifficulty = 4;
                _0x124F3.totalMultipleBreakBlock = 40;
                _0x124F3.shuffleTimeout = 10000;
                _0x124F3.toCollectMap = new Map();
                _0x124F3.labelMap = new Map();
                _0x124F3.rescaleToFit = true;
                _0x124F3.blockMatrix = [
                    []
                ];
                _0x124F3.visibleBlockMatrix = [
                    []
                ];
                _0x124F3.tilePositionMap = new Map();
                _0x124F3.totalDuplicateObjects = new Map();
                _0x124F3.inputEnabled = true;
                _0x124F3.horizontal = [];
                _0x124F3.vertical = [];
                _0x124F3.toRemoveGroups = [];
                _0x124F3.inputDisabledDuration = 0;
                _0x124F3.actionDelay = 0;
                _0x124F3.lastTime = 0;
                _0x124F3.actionQueue = [];
                _0x124F3.brokenTiles = [];
                _0x124F3.totalToBreakTiles = 0;
                _0x124F3.popupShown = false;
                _0x124F3.gameDone = false;
                _0x124F3.scoreSent = false;
                _0x124F3.afkTime = 0;
                _0x124F3.once = true;
                _0x124F3.losePopupShown = false;
                _0x124F3.checkMatchesonInit = function() {
                    var _0xF1C7 = new _0x11EE5();
                    _0xF1C7.init(_0x124F3.blockMatrix, _0xB9B9(_0x124F3), null, null);
                    _0x124F3.actionQueue.push(_0xF1C7)
                };
                _0x124F3.onUpdate = function() {
                    var _0x10167 = Date.now();
                    var _0x12525 = _0x10167 - _0x124F3.lastTime;
                    if (_0x12525 > 10000) {
                        _0x12525 = 0
                    };
                    _0x124F3.inputDisabledDuration -= _0x12525;
                    _0x124F3.actionDelay -= _0x12525;
                    if (_0x124F3.inputDisabledDuration < 0) {
                        _0x124F3.inputDisabledDuration = 0
                    };
                    var _0x1250C = _0x124F3.actionQueue.length;
                    if (_0x124F3.actionDelay <= 0) {
                        _0x124F3.actionDelay = 0;
                        _0x124F3.processQueue()
                    };
                    _0x124F3.lastTime = _0x10167;
                    _0x124F3.inputEnabled = _0x124F3.inputDisabledDuration == 0 && _0x124F3.actionDelay == 0 && _0x1250C == 0 && _0x124F3.moves != 0;
                    if (_0x124F3.inputEnabled && _0x124F3.gameDone) {
                        _0x124F3.inputEnabled = false;
                        _0x124F3.movesForReward = _0x124F3.moves;
                        _0x124F3.generateBombs();
                        _0x124F3.moves = 0
                    };
                    _0x124F3.afkTime += _0x12525;
                    if (_0x124F3.actionDelay != 0 || _0x124F3.inputDisabledDuration > 0) {
                        _0x124F3.afkTime = 0;
                        _0x124F3.shuffleButton.visible = false
                    };
                    if (_0x124F3.afkTime > 2000 && !_0x124F3.scoreSent && _0x124F3.gameDone) {
                        var _0xF86B = Components.ScoreManager.instance.getScore();
                        Components.DevUtils.playSound(_0xB90A[824]);
                        trace(_0x124F3.movesForReward, _0xB90A[825]);
                        if (_0x124F3.movesForReward > 5) {
                            _0x124F3.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                [Components.SessionData.STAR, Components.SessionData.THREE_STAR]
                            ]))
                        } else {
                            if (_0x124F3.movesForReward > 2 && _0x124F3.movesForReward <= 5) {
                                _0x124F3.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                    [Components.SessionData.STAR, Components.SessionData.TWO_STAR]
                                ]))
                            } else {
                                if (_0x124F3.movesForReward <= 2) {
                                    _0x124F3.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                        [Components.SessionData.STAR, Components.SessionData.ONE_STAR]
                                    ]))
                                } else {
                                    trace(_0xB90A[826])
                                }
                            }
                        };
                        _0x124F3.scoreSent = true
                    };
                    if (_0x124F3.afkTime > _0x124F3.shuffleTimeout && !_0x124F3.gameDone) {
                        _0x124F3.shuffleButton.visible = true
                    }
                };
                _0x124F3.shuffle = function() {
                    _0x124F3.inputDisabledDuration += 1000;
                    for (var _0x1253E = 0; _0x1253E < _0x124F3.height; _0x1253E++) {
                        for (var _0xC9D6 = 0; _0xC9D6 < _0x124F3.width; _0xC9D6++) {
                            Components.Tweens.create(_0x124F3.blockMatrix[_0x1253E][_0xC9D6].gameObject).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 300, null, true)
                        }
                    };
                    _0x124F3.gameObject.game.time.events.add(300, _0x124F3.shuffleBack, _0xB9B9(_0x124F3));
                    _0x124F3.shuffleButton.visible = false
                };
                _0x124F3.shuffleBack = function() {
                    var _0x1248F = _0x124F3.pieces[0].width + _0x124F3.spacing;
                    var _0x12476 = _0x124F3.pieces[0].height + _0x124F3.spacing;
                    var _0x124C1 = _0x124F3.holder.texture.baseTexture.source.width;
                    var _0x124A8 = _0x124F3.holder.texture.baseTexture.source.height;
                    var _0x1245D = _0x124C1 - _0x1248F * _0x124F3.width;
                    var _0x12444 = _0x124A8 - _0x12476 * _0x124F3.height;
                    var _0x101B2 = _0x124F3.padding.split(_0xB90A[572]);
                    _0x124F3.paddingLeft = Number(_0x101B2[0]) * _0x124C1 / 100;
                    _0x124F3.paddingTop = Number(_0x101B2[1]) * _0x124A8 / 100;
                    _0x124F3.paddingRight = Number(_0x101B2[2]) * _0x124C1 / 100;
                    _0x124F3.paddingLeft = Number(_0x101B2[3]) * _0x124A8 / 100;
                    var _0x10135 = -_0x124F3.holder.anchor.x * _0x124C1 + _0x124F3.paddingLeft + _0x124F3.pieces[0].unscaledWidth / 2 + _0x1245D / 2;
                    var _0x1014E = -_0x124F3.holder.anchor.y * _0x124A8 + _0x124F3.paddingTop + _0x124F3.pieces[0].unscaledHeight / 2 + _0x12444 / 2;
                    var _0xD0F7 = [];
                    for (var _0x12557 = 0; _0x12557 < _0x124F3.height; _0x12557++) {
                        _0xD0F7 = _0xD0F7.concat(_0x124F3.blockMatrix[_0x12557])
                    };
                    Phaser.ArrayUtils.shuffle(_0xD0F7);
                    var _0x10167 = 0;
                    for (var _0x12570 = 0; _0x12570 < _0x124F3.height; _0x12570++) {
                        for (var _0xC9D6 = 0; _0xC9D6 < _0x124F3.width; _0xC9D6++) {
                            _0x124F3.blockMatrix[_0x12570][_0xC9D6] = _0xD0F7[_0x10167++];
                            var _0xFFA5 = _0x124F3.blockMatrix[_0x12570][_0xC9D6].gameObject;
                            _0x124F3.holder.addChild(_0xFFA5);
                            _0x124F3.blockMatrix[_0x12570][_0xC9D6].setMatrixPosition(_0xC9D6, _0x12570);
                            Components.Tweens.create(_0xFFA5).to(_0xC639(_0xB90A[43], _0x10135 + _0xC9D6 * _0x1248F, _0xB90A[44], _0x1014E + _0x12570 * _0x12476), 300, null, true);
                            _0x124F3.tilePositionMap[_0xB90A[8]](_0xFFA5)[_0xB90A[95]](_0xC9D6, _0x12570)
                        }
                    };
                    _0x124F3.afkTime = 0;
                    _0x124F3.gameObject.game.time.events.add(300, function() {
                        var _0x12589 = new _0x11EE5();
                        _0x12589.init(_0x124F3.blockMatrix, _0xB9B9(_0x124F3), null, null);
                        _0x124F3.actionQueue.push(_0x12589)
                    }, _0xB9B9(_0x124F3))
                };
                _0x124F3.processedActions = [];
                _0x124F3.onGenerateComplete = function() {
                    var _0x125A2 = new _0x11EE5();
                    _0x125A2.init(_0x124F3.blockMatrix, _0xB9B9(_0x124F3), null, null);
                    _0x124F3.actionQueue.push(_0x125A2);
                    var _0x1216F = _0x124F3.countRemaining();
                    if (_0x1216F == 0 && _0x124F3.totalToBreakTiles == 0) {
                        _0x124F3.gameDone = true
                    }
                };
                _0x124F3.placeFirstObjects = function() {
                    var _0x1248F = _0x124F3.pieces[0].width + _0x124F3.spacing;
                    var _0x12476 = _0x124F3.pieces[0].height + _0x124F3.spacing;
                    var _0x124C1 = _0x124F3.holder.texture.baseTexture.source.width;
                    var _0x124A8 = _0x124F3.holder.texture.baseTexture.source.height;
                    var _0x1245D = _0x124C1 - _0x1248F * _0x124F3.width;
                    var _0x12444 = _0x124A8 - _0x12476 * _0x124F3.height;
                    var _0x101B2 = _0x124F3.padding.split(_0xB90A[572]);
                    _0x124F3.paddingLeft = Number(_0x101B2[0]) * _0x124C1 / 100;
                    _0x124F3.paddingTop = Number(_0x101B2[1]) * _0x124A8 / 100;
                    _0x124F3.paddingRight = Number(_0x101B2[2]) * _0x124C1 / 100;
                    _0x124F3.paddingLeft = Number(_0x101B2[3]) * _0x124A8 / 100;
                    var _0x10135 = -_0x124F3.holder.anchor.x * _0x124C1 + _0x124F3.paddingLeft + _0x124F3.pieces[0].unscaledWidth / 2 + _0x1245D / 2;
                    var _0x1014E = -_0x124F3.holder.anchor.y * _0x124A8 + _0x124F3.paddingTop + _0x124F3.pieces[0].unscaledHeight / 2 + _0x12444 / 2;
                    var _0x12363 = [];
                    while (_0x12363.length < _0x124F3.totalMultipleBreakBlock) {
                        var _0x123C7 = ~~Phaser.Math.random(0, _0x124F3.width * _0x124F3.height);
                        if (_0x12363.indexOf(_0x123C7) == -1) {
                            _0x12363.push(_0x123C7)
                        }
                    };
                    for (var _0x125BB = 0; _0x125BB < _0x124F3.height; _0x125BB++) {
                        for (var _0xC9D6 = 0; _0xC9D6 < _0x124F3.width; _0xC9D6++) {
                            var _0x1237C = _0x124F3.visibleBlockMatrix[_0x125BB][_0xC9D6].gameObject;
                            _0x124F3.holder.addChild(_0x1237C);
                            _0x1237C.x = _0x10135 + _0xC9D6 * _0x1248F;
                            _0x1237C.y = _0x1014E + _0x125BB * _0x12476;
                            if (_0x12363.indexOf(_0x125BB * _0x124F3.width + _0xC9D6) != -1) {
                                _0x1237C.getComponent(Components.MatchThreeTile).setOverlay(_0x124F3.multipleBreakBlockDifficulty)
                            }
                        }
                    };
                    for (var _0x125D4 = 0; _0x125D4 < _0x124F3.height; _0x125D4++) {
                        for (var _0x125ED = 0; _0x125ED < _0x124F3.width; _0x125ED++) {
                            var _0xFFA5 = _0x124F3.blockMatrix[_0x125D4][_0x125ED].gameObject;
                            _0x124F3.holder.addChild(_0xFFA5);
                            _0xFFA5.x = _0x10135 + _0x125ED * _0x1248F;
                            _0xFFA5.y = _0x1014E + _0x125D4 * _0x12476;
                            _0xFFA5.inputEvents.addInputDown(_0x124F3.onTileClick);
                            _0xFFA5.inputEvents.addInputDown(_0x124F3.onMouseDown);
                            _0xFFA5.inputEvents.addInputOut(_0x124F3.onTileOut);
                            _0x124F3.tilePositionMap[_0xB90A[95]](_0xFFA5, new PIXI.Point(_0x125ED, _0x125D4))
                        }
                    }
                };
                _0x124F3.onTileClick = function(_0xC652) {
                    Components.DevUtils.playSound(_0xB90A[827]);
                    if (!_0x124F3.inputEnabled || _0x124F3.moves <= 0) {
                        return
                    };
                    if (_0x124F3.lastClickedTile == _0xC652) {
                        Components.Tweens.create(_0x124F3.lastClickedTile.children[0].scale, true).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 200, null, true);
                        _0x124F3.lastClickedTile = null;
                        0;
                        _0x124F3.lastDownTile = null;
                        return
                    };
                    if (_0x124F3.lastClickedTile) {
                        var _0x12606 = _0x124F3.tilePositionMap[_0xB90A[8]](_0x124F3.lastClickedTile);
                        var _0x1261F = _0x124F3.tilePositionMap[_0xB90A[8]](_0xC652);
                        if (Math.abs(_0x12606.x - _0x1261F.x) <= 1 && _0x12606.y == _0x1261F.y || Math.abs(_0x12606.y - _0x1261F.y) <= 1 && _0x12606.x == _0x1261F.x) {
                            _0x124F3.switchPositions(_0xC652, _0x124F3.lastClickedTile);
                            _0x124F3.gameObject.game.time.events.add(350, function(_0xC652) {
                                var _0x12683 = _0x124F3.blockMatrix[_0x12606.y][_0x12606.x];
                                var _0x1269C = _0x124F3.blockMatrix[_0x1261F.y][_0x1261F.x];
                                if (_0x12683.getPowerup() == Components.Powerup.sameColors || _0x1269C.getPowerup() == Components.Powerup.sameColors || _0x1269C.getPowerup() != Components.Powerup.normal && _0x12683.getPowerup() != Components.Powerup.normal) {
                                    var _0x1266A = new _0x11F49();
                                    _0x1266A.userTriggerred = true;
                                    if (_0x12683.getPowerup() == Components.Powerup.sameColors || _0x1269C.getPowerup() != Components.Powerup.sameColors) {
                                        _0x1266A.init(_0x124F3.blockMatrix, _0xB9B9(_0x124F3), _0x12606, _0x1261F)
                                    } else {
                                        _0x1266A.init(_0x124F3.blockMatrix, _0xB9B9(_0x124F3), _0x1261F, _0x12606)
                                    };
                                    _0x124F3.actionQueue.push(_0x1266A);
                                    _0x124F3.moves--;
                                    _0x124F3.movesHolder.getComponent(Components.TextLabel).setText(_0x124F3.moves.toString())
                                } else {
                                    var _0xF62C = _0x124F3.findPairs(_0x12606.x, _0x12606.y);
                                    var _0x12651 = _0x124F3.findPairs(_0x1261F.x, _0x1261F.y);
                                    if (_0xF62C.length >= 3) {
                                        var _0x12638 = new _0x11ECC();
                                        _0x12638.init(_0x124F3.blockMatrix, _0x12606, _0xB9B9(_0x124F3), _0xF62C);
                                        _0x124F3.actionQueue.push(_0x12638);
                                        _0x124F3.moves--
                                    };
                                    if (_0x12651.length >= 3) {
                                        var _0x12638 = new _0x11ECC();
                                        _0x12638.init(_0x124F3.blockMatrix, _0x1261F, _0xB9B9(_0x124F3), _0x12651);
                                        _0x124F3.actionQueue.push(_0x12638);
                                        _0x124F3.moves--
                                    };
                                    if (_0xF62C.length == 0 && _0x12651.length == 0) {
                                        Components.DevUtils.playSound(_0xB90A[828]);
                                        _0x124F3.switchPositions(_0xC652, _0x124F3.lastClickedTile)
                                    } else {
                                        _0x124F3.vertical = [];
                                        _0x124F3.horizontal = []
                                    };
                                    _0x124F3.movesHolder.getComponent(Components.TextLabel).setText(_0x124F3.moves.toString())
                                };
                                _0x124F3.lastClickedTile = null;
                                _0x124F3.lastDownTile = null
                            }, _0xB9B9(_0x124F3), _0xC652)
                        } else {
                            Components.Tweens.create(_0x124F3.lastClickedTile.children[0].scale, true).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 200, null, true);
                            _0x124F3.lastClickedTile = _0xC652;
                            Components.Tweens.create(_0x124F3.lastClickedTile.children[0].scale, true).to(_0xC639(_0xB90A[43], 1.1, _0xB90A[44], 1.1), 400, null, true, 0, -1, true)
                        }
                    } else {
                        _0x124F3.lastClickedTile = _0xC652;
                        Components.Tweens.create(_0x124F3.lastClickedTile.children[0].scale, true).to(_0xC639(_0xB90A[43], 1.1, _0xB90A[44], 1.1), 400, null, true, 0, -1, true)
                    }
                };
                _0x124F3.onMouseDown = function(_0xC652) {
                    if (_0x124F3.moves <= 0) {
                        _0x124F3.lastDownTile = null;
                        return
                    };
                    _0x124F3.lastDownTile = _0xC652
                };
                _0x124F3.onMouseUp = function() {
                    _0x124F3.lastDownTile = null
                };
                _0x124F3.onTileOut = function() {
                    if (!_0x124F3.lastDownTile || !_0x124F3.inputEnabled) {
                        return
                    };
                    var _0x126E7 = _0x124F3.lastDownTile.parent.toLocal(_0x124F3.gameObject.game.input.position, _0x124F3.gameObject.game.world);
                    _0x126E7.x -= _0x124F3.lastDownTile.x;
                    _0x126E7.y -= _0x124F3.lastDownTile.y;
                    var _0x126B5 = Math.abs(_0x126E7.x);
                    var _0x126CE = Math.abs(_0x126E7.y);
                    var _0x12606 = _0x124F3.tilePositionMap[_0xB90A[8]](_0x124F3.lastDownTile).clone();
                    if (_0x126B5 > _0x126CE) {
                        if (_0x126E7.x > 0) {
                            _0x12606.x++
                        } else {
                            _0x12606.x--
                        }
                    } else {
                        if (_0x126E7.y > 0) {
                            _0x12606.y++
                        } else {
                            _0x12606.y--
                        }
                    };
                    if (_0x12606.x < 0 || _0x12606.x >= _0x124F3.width || _0x12606.y < 0 || _0x12606.y >= _0x124F3.height) {
                        _0x124F3.lastDownTile = null;
                        return
                    };
                    _0x124F3.lastClickedTile = _0x124F3.lastDownTile;
                    _0x124F3.onTileClick(_0x124F3.blockMatrix[_0x12606.y][_0x12606.x].gameObject);
                    _0x124F3.lastDownTile = null
                };
                _0x124F3.addInputFor = function(_0xC652) {
                    _0xC652.inputEvents.addInputDown(_0x124F3.onTileClick);
                    _0xC652.inputEvents.addInputDown(_0x124F3.onMouseDown);
                    _0xC652.inputEvents.addInputOut(_0x124F3.onTileOut)
                };
                return _0x124F3
            }
            _0xB987(_0x11F30, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                Components.MatchThreeTile.reset()
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x124DA = this;
                this.totalToBreakTiles = this.totalMultipleBreakBlock;
                this.pieces = GameObject.getObjectsByTag(_0xB90A[829]);
                this.items = GameObject.getObjectsByTag(_0xB90A[830]);
                this.overlay = GameObject.getObjectsByTag(_0xB90A[831], true);
                this.holder = GameObject.getObject(_0xB90A[308]);
                this.movesHolder = GameObject.getObject(_0xB90A[832]);
                this.movesHolder.getComponent(Components.TextLabel).fontAndSize = _0xB90A[833];
                this.powerups = GameObject.getObjectsByTag(this.powerupsTag, true);
                this.toCollectHolder = GameObject.getObject(_0xB90A[834]);
                this.toCollectNumberHolder = GameObject.getObject(_0xB90A[835]);
                this.toCollectContainer = GameObject.getObject(_0xB90A[836]);
                this.ps = GameObject.getObject(_0xB90A[308]).parent.getComponent(Components.ParticleSystem);
                this.calculatePadding();
                this.generateFirstTime();
                this.gameObject.game.input.onUp.add(this.onMouseUp);
                this.events.addEventListener(_0xB90A[29], this.onUpdate);
                this.events.addEventListener(_0xB90A[28], function() {
                    _0x124DA.findToCollectObjects()
                });
                this.events.addEventListener(_0xB90A[837], function() {
                    _0x124DA.totalToBreakTiles--;
                    trace(_0x124DA.totalToBreakTiles)
                });
                trace(_0xB90A[838]);
                this.movesHolder.getComponent(Components.TextLabel).setText(this.moves.toString());
                this.events.addEventListener(_0xB90A[320], function() {
                    _0x124DA.moves += 5;
                    _0x124DA.movesHolder.getComponent(Components.TextLabel).setText(_0x124DA.moves.toString());
                    _0x124DA.popupShown = true
                });
                this.shuffleButton.visible = false;
                this.shuffleButton.addButtonPressedCallback(this.shuffle);
                this.events.addEventListener(_0xB90A[254], function() {
                    Managers.SceneManager.instance.loadUnit(Components.DevUtils.getCurrentUnitName(), true)
                });
                this.events.addEventListener(_0xB90A[322], function() {
                    _0x124DA.events.throwEvent(Components.SessionData.LOSE_LIFE)
                })
            }), _0xC639(_0xB90A[13], _0xB90A[839], _0xB90A[5], function _0x120A7() {
                if (this.actionQueue.length == 0) {
                    for (var _0x12719 = 0; _0x12719 < this.processedActions.length; _0x12719++) {
                        var _0x12700 = this.processedActions[_0x12719];
                        this.brokenTiles = this.brokenTiles.concat(_0x12700.getRemovedTiles())
                    };
                    this.processedActions = [];
                    this.removeBrokenDuplicates();
                    for (var _0x12732 = 0; _0x12732 < this.brokenTiles.length; _0x12732++) {
                        var _0xCE22 = this.brokenTiles[_0x12732];
                        this.blockMatrix[_0xCE22.matrixY][_0xCE22.matrixX] = null;
                        this.visibleBlockMatrix[_0xCE22.matrixY][_0xCE22.matrixX].onBreak();
                        Components.ScoreManager.instance.addScore(100)
                    };
                    this.countBrokenTiles();
                    var _0x1216F = this.countRemaining();
                    if (this.moves <= 0 && (_0x1216F != 0 || this.totalToBreakTiles != 0)) {
                        this.popupShown = true;
                        if (!this.popupShown) {
                            this.events.throwEvent(_0xB90A[307])
                        } else {
                            if (!this.losePopupShown) {
                                Components.DevUtils.playSound(_0xB90A[266]);
                                this.events.throwEvent(Components.SessionData.SHOW_TRY_AGAIN_POPUP);
                                this.losePopupShown = true
                            }
                        }
                    } else {
                        if (this.moves <= 0 && _0x1216F != 0 && this.totalToBreakTiles != 0 && this.brokenTiles.length != 0 && this.popupShown) {
                            if (!this.losePopupShown) {
                                Components.DevUtils.playSound(_0xB90A[266]);
                                this.events.throwEvent(Components.SessionData.SHOW_TRY_AGAIN_POPUP);
                                this.losePopupShown = true
                            }
                        }
                    };
                    if (this.brokenTiles.length != 0) {
                        this.regenerateTiles()
                    };
                    if (this.gameDone && this.moves == 0) {
                        this.generateBombs()
                    };
                    return
                };
                var _0x12638 = this.actionQueue.shift();
                var _0x12764 = 0;
                var _0x1274B = _0x12638.getDuration();
                while (_0x12638.canRunInParalel()) {
                    _0x12638.run();
                    if (_0x12638.getDuration() > _0x1274B) {
                        _0x1274B = _0x12638.getDuration()
                    };
                    _0x12764++;
                    this.processedActions.push(_0x12638);
                    if (this.actionQueue.length == 0) {
                        break
                    };
                    _0x12638 = this.actionQueue.shift();
                    if (!_0x12638.canRunInParalel()) {
                        this.actionQueue.unshift(_0x12638)
                    }
                };
                if (_0x12764 == 0) {
                    _0x12638.run();
                    this.processedActions.push(_0x12638)
                };
                this.actionDelay += _0x1274B
            }), _0xC639(_0xB90A[13], _0xB90A[840], _0xB90A[5], function _0x120D9() {
                var _0xD0F7 = [];
                for (var _0x127C8 = 0; _0x127C8 < this.brokenTiles.length; _0x127C8++) {
                    var _0x1213D = this.brokenTiles[_0x127C8];
                    if (_0xD0F7.indexOf(_0x1213D) == -1) {
                        _0xD0F7.push(_0x1213D)
                    }
                };
                this.brokenTiles = _0xD0F7
            }), _0xC639(_0xB90A[13], _0xB90A[841], _0xB90A[5], function _0x120C0() {
                var _0x12796 = new Map();
                for (var _0x1277D = 0; _0x1277D < this.brokenTiles.length; _0x1277D++) {
                    var _0xCE22 = this.brokenTiles[_0x1277D];
                    if (_0x12796.has(_0xCE22.matrixX)) {
                        _0x12796[_0xB90A[95]](_0xCE22.matrixX, _0x12796[_0xB90A[8]](_0xCE22.matrixX) + 1)
                    } else {
                        _0x12796[_0xB90A[95]](_0xCE22.matrixX, 1)
                    }
                };
                if (this.brokenTiles.length != 0) {
                    var _0x127AF = new _0x11EFE();
                    _0x127AF.init(this.blockMatrix, this, _0x12796, this.onGenerateComplete);
                    this.actionQueue.push(_0x127AF)
                };
                this.brokenTiles = []
            }), _0xC639(_0xB90A[13], _0xB90A[842], _0xB90A[5], function _0x11FC6() {
                var _0xFB72 = 0;
                this.toCollectMap.forEach(function(_0xE8FD) {
                    _0xFB72 += _0xE8FD
                });
                return _0xFB72
            }), _0xC639(_0xB90A[13], _0xB90A[843], _0xB90A[5], function _0x11F7B() {
                if (!this.padding || this.padding.length == 0) {
                    return
                };
                var _0x101B2 = this.padding.split(_0xB90A[572]);
                if (_0x101B2.length < 4) {
                    return
                };
                this.paddingLeft = Number(_0x101B2[0]) * this.holder.unscaledWidth;
                this.paddingTop = Number(_0x101B2[1]) * this.holder.unscaledHeight;
                this.paddingRight = Number(_0x101B2[2]) * this.holder.unscaledWidth / 1000;
                this.paddingLeft = Number(_0x101B2[3]) * this.holder.unscaledHeight
            }), _0xC639(_0xB90A[13], _0xB90A[844], _0xB90A[5], function _0x1205C() {
                for (var _0x123E0 = 0; _0x123E0 < this.height; _0x123E0++) {
                    for (var _0xC9D6 = 0; _0xC9D6 < this.width; _0xC9D6++) {
                        var _0xFFA5 = this.generateTile();
                        var _0x1237C = this.generateTile();
                        var _0xCBCA = _0xFFA5.getComponent(Components.MatchThreeTile);
                        var _0x123F9 = _0x1237C.getComponent(Components.MatchThreeTile);
                        this.blockMatrix[_0x123E0][_0xC9D6] = _0xCBCA;
                        this.visibleBlockMatrix[_0x123E0][_0xC9D6] = _0x123F9;
                        _0xCBCA.setItem(this.duplicateObject(this.items[_0xCBCA.value - 1]), _0xCBCA.value);
                        _0xCBCA.setMatrixPosition(_0xC9D6, _0x123E0)
                    };
                    if (_0x123E0 != this.height - 1) {
                        this.blockMatrix.push([])
                    };
                    if (_0x123E0 != this.height - 1) {
                        this.visibleBlockMatrix.push([])
                    }
                };
                trace(_0xB90A[845]);
                this.placeFirstObjects();
                trace(_0xB90A[846])
            }), _0xC639(_0xB90A[13], _0xB90A[847], _0xB90A[5], function _0x12075() {
                var _0x1242B = 1 + ~~(Math.random() * this.pieces.length);
                var _0xEF88 = 1 + ~~(Math.random() * this.items.length);
                var _0x12412 = 1 + ~~(Math.random() * this.overlay.length);
                var _0xFFA5 = this.duplicateObject(this.pieces[_0x1242B - 1], true);
                _0xFFA5.getComponent(Components.MatchThreeTile).value = _0xEF88;
                return _0xFFA5
            }), _0xC639(_0xB90A[13], _0xB90A[848], _0xB90A[5], function _0x11FF8(_0x121D3) {
                var _0x121A1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var _0xE227 = this.totalDuplicateObjects.has(_0x121D3) ? this.totalDuplicateObjects[_0xB90A[8]](_0x121D3) + 1 : 1;
                this.totalDuplicateObjects[_0xB90A[95]](_0x121D3, _0xE227);
                var _0x121BA = new GameObject(this.gameObject.game, _0x121D3.name + _0xB90A[61] + _0xE227);
                _0x121BA.loadTexture(_0x121D3.texture);
                _0x121D3.parent.addChild(_0x121BA);
                _0x121BA.anchor[_0xB90A[95]](_0x121D3.anchor.x, _0x121D3.anchor.y);
                _0x121BA.scale[_0xB90A[95]](_0x121D3.scale.x, _0x121D3.scale.y);
                if (_0x121A1) {
                    _0x121BA.addComponent(new Components.MatchThreeTile());
                    _0x121BA.getComponent(Components.MatchThreeTile).initPowerupsAndOverlays(this.powerups, this.overlay);
                    _0x121BA.getComponent(Components.MatchThreeTile).init()
                };
                return _0x121BA
            }), _0xC639(_0xB90A[13], _0xB90A[849], _0xB90A[5], function _0x120F2(_0xC652, _0x127E1) {
                var _0x12606 = this.tilePositionMap[_0xB90A[8]](_0x127E1);
                var _0x1261F = this.tilePositionMap[_0xB90A[8]](_0xC652);
                Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[43], _0x127E1.x, _0xB90A[44], _0x127E1.y), 300, Phaser.Easing.Quadratic.Out, true);
                Components.Tweens.create(_0x127E1).to(_0xC639(_0xB90A[43], _0xC652.x, _0xB90A[44], _0xC652.y), 300, Phaser.Easing.Quadratic.Out, true);
                var _0x127FA = _0x127E1.getComponent(Components.MatchThreeTile);
                var _0x12813 = _0xC652.getComponent(Components.MatchThreeTile);
                _0x127FA.switchMatrixPosition(_0x12813);
                var _0xD223 = _0x12606.clone();
                var _0x1282C = this.blockMatrix[_0x12606.y][_0x12606.x];
                this.blockMatrix[_0x12606.y][_0x12606.x] = _0x12813;
                _0x12606[_0xB90A[95]](_0x1261F.x, _0x1261F.y);
                this.blockMatrix[_0x1261F.y][_0x1261F.x] = _0x1282C;
                _0x1261F[_0xB90A[95]](_0xD223.x, _0xD223.y);
                Components.Tweens.create(_0x127E1.children[0].scale, true).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 200, null, true);
                this.inputDisabledDuration += 350
            }), _0xC639(_0xB90A[13], _0xB90A[850], _0xB90A[5], function _0x12011(_0xD6A1, _0xD6BA) {
                var _0x1221E = [];
                var _0x121EC = [];
                this.countHorizontal(_0xD6A1, _0xD6BA, this.blockMatrix[_0xD6BA][_0xD6A1].value, -1, _0x121EC);
                this.countHorizontal(_0xD6A1, _0xD6BA, this.blockMatrix[_0xD6BA][_0xD6A1].value, 1, _0x121EC);
                this.countVertical(_0xD6A1, _0xD6BA, this.blockMatrix[_0xD6BA][_0xD6A1].value, -1, _0x1221E);
                this.countVertical(_0xD6A1, _0xD6BA, this.blockMatrix[_0xD6BA][_0xD6A1].value, 1, _0x1221E);
                if (_0x121EC.length >= 3 || _0x1221E.length >= 3) {
                    var _0x12205 = [];
                    if (_0x121EC.length >= 3) {
                        _0x12205 = _0x12205.concat(_0x121EC)
                    };
                    if (_0x1221E.length >= 3) {
                        _0x12205 = _0x12205.concat(_0x1221E)
                    };
                    return _0x12205
                };
                return []
            }), _0xC639(_0xB90A[13], _0xB90A[851], _0xB90A[5], function _0x1208E(_0xD6A1, _0xD6BA) {
                var _0x1248F = this.pieces[0].width + this.spacing;
                var _0x12476 = this.pieces[0].height + this.spacing;
                var _0x124C1 = this.holder.texture.baseTexture.source.width;
                var _0x124A8 = this.holder.texture.baseTexture.source.height;
                var _0x1245D = _0x124C1 - _0x1248F * this.width;
                var _0x12444 = _0x124A8 - _0x12476 * this.height;
                var _0x101B2 = this.padding.split(_0xB90A[572]);
                this.paddingLeft = Number(_0x101B2[0]) * _0x124C1 / 100;
                this.paddingTop = Number(_0x101B2[1]) * _0x124A8 / 100;
                this.paddingRight = Number(_0x101B2[2]) * _0x124C1 / 100;
                this.paddingLeft = Number(_0x101B2[3]) * _0x124A8 / 100;
                var _0x10135 = -this.holder.anchor.x * _0x124C1 + this.paddingLeft + this.pieces[0].unscaledWidth / 2 + _0x1245D / 2;
                var _0x1014E = -this.holder.anchor.y * _0x124A8 + this.paddingTop + this.pieces[0].unscaledHeight / 2 + _0x12444 / 2;
                var _0x1140E = new PIXI.Point(_0x10135 + _0xD6A1 * _0x1248F, _0x1014E + _0xD6BA * _0x12476);
                return _0x1140E
            }), _0xC639(_0xB90A[13], _0xB90A[852], _0xB90A[5], function _0x11FAD(_0xD6A1, _0xD6BA, _0xE8FD, _0x12188, _0xD0F7) {
                if (_0xD6A1 < 0 || _0xD6A1 >= this.width) {
                    return
                };
                if (this.blockMatrix[_0xD6BA][_0xD6A1] && this.blockMatrix[_0xD6BA][_0xD6A1].getPowerup() != Components.Powerup.sameColors && this.blockMatrix[_0xD6BA][_0xD6A1].value == _0xE8FD) {
                    if (_0xD0F7.indexOf(this.blockMatrix[_0xD6BA][_0xD6A1]) == -1) {
                        _0xD0F7.push(this.blockMatrix[_0xD6BA][_0xD6A1])
                    };
                    this.countHorizontal(_0xD6A1 + _0x12188, _0xD6BA, _0xE8FD, _0x12188, _0xD0F7)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[853], _0xB90A[5], function _0x11FDF(_0xD6A1, _0xD6BA, _0xE8FD, _0x12188, _0xD0F7) {
                if (_0xD6BA < 0 || _0xD6BA >= this.height) {
                    return
                };
                if (this.blockMatrix[_0xD6BA][_0xD6A1] && this.blockMatrix[_0xD6BA][_0xD6A1].getPowerup() != Components.Powerup.sameColors && this.blockMatrix[_0xD6BA][_0xD6A1].value == _0xE8FD) {
                    if (_0xD0F7.indexOf(this.blockMatrix[_0xD6BA][_0xD6A1]) == -1) {
                        _0xD0F7.push(this.blockMatrix[_0xD6BA][_0xD6A1])
                    };
                    this.countVertical(_0xD6A1, _0xD6BA + _0x12188, _0xE8FD, _0x12188, _0xD0F7)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                this.checkMatchesonInit()
            }), _0xC639(_0xB90A[13], _0xB90A[854], _0xB90A[5], function _0x11F94() {
                var _0x12124 = this;
                var _0x12156 = new Map();
                for (var _0x1210B = 0; _0x1210B < this.brokenTiles.length; _0x1210B++) {
                    var _0x1213D = this.brokenTiles[_0x1210B];
                    if (_0x12156.has(_0x1213D.itemNr)) {
                        _0x12156[_0xB90A[95]](_0x1213D.itemNr, _0x12156[_0xB90A[8]](_0x1213D.itemNr) + 1)
                    } else {
                        _0x12156[_0xB90A[95]](_0x1213D.itemNr, 1)
                    }
                };
                var _0xFB72 = 0;
                _0x12156.forEach(function(_0xE8FD, _0xD39A) {
                    if (_0x12124.toCollectMap.has(_0xD39A.toString())) {
                        var _0x1216F = _0x12124.toCollectMap[_0xB90A[8]](_0xD39A.toString()) - _0xE8FD;
                        if (_0x1216F < 0) {
                            _0x1216F = 0
                        };
                        _0xFB72 += _0x1216F;
                        _0x12124.toCollectMap[_0xB90A[95]](_0xD39A.toString(), _0x1216F);
                        _0x12124.labelMap[_0xB90A[8]](_0xD39A.toString()).setText(_0x1216F.toString())
                    }
                })
            }), _0xC639(_0xB90A[13], _0xB90A[855], _0xB90A[5], function _0x12043() {
                var _0x12363 = [];
                while (_0x12363.length < this.moves) {
                    var _0x123C7 = ~~Phaser.Math.random(0, this.width * this.height);
                    if (_0x12363.indexOf(_0x123C7) == -1) {
                        _0x12363.push(_0x123C7)
                    }
                };
                var _0x123AE = [];
                for (var _0x12331 = 0; _0x12331 < this.height; _0x12331++) {
                    for (var _0xC9D6 = 0; _0xC9D6 < this.width; _0xC9D6++) {
                        var _0x1237C = this.blockMatrix[_0x12331][_0xC9D6];
                        if (!_0x1237C) {
                            continue
                        };
                        if (_0x1237C.getPowerup() != Components.Powerup.normal) {
                            _0x123AE.push(_0x1237C)
                        };
                        if (_0x12363.indexOf(_0x12331 * this.width + _0xC9D6) != -1) {
                            _0x1237C.setPowerup(Math.random() > 0.5 ? Components.Powerup.horizontal : Components.Powerup.vertical);
                            _0x123AE.push(_0x1237C)
                        }
                    }
                };
                for (var _0x1234A = 0; _0x1234A < _0x123AE.length; _0x1234A++) {
                    var _0x1213D = _0x123AE[_0x1234A];
                    var _0x12395 = new _0x11F17();
                    _0x12395.paralel = false;
                    _0x12395.init(this.blockMatrix, this, new PIXI.Point(_0x1213D.matrixX, _0x1213D.matrixY), new PIXI.Point(_0x1213D.matrixX, _0x1213D.matrixY));
                    this.actionQueue.push(_0x12395)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[856], _0xB90A[5], function _0x1202A() {
                var _0x12250 = this;
                if (this.toCollect && this.toCollect != _0xB90A[27]) {
                    var _0x101B2 = this.toCollect.split(_0xB90A[572]);
                    var _0x12282 = [];
                    var _0x122E6 = [];
                    var _0x12318 = _0x101B2.length / 2;
                    var _0x1229B = this.toCollectHolder.texture.baseTexture.width + 15;
                    var _0xE3E9 = -(_0x1229B * _0x12318) / 2;
                    var _0x12318 = 0;
                    for (var _0x12237 = 0; _0x12237 < _0x101B2.length - 1; _0x12237 += 2) {
                        var _0xFB72 = Number(_0x101B2[_0x12237]);
                        var _0xEF88 = _0x101B2[_0x12237 + 1];
                        this.toCollectMap[_0xB90A[95]](_0xEF88, _0xFB72);
                        var _0x12269 = new GameObject(this.gameObject.game, _0xB90A[857] + _0x12237);
                        var _0x122CD = new GameObject(this.gameObject.game, _0xB90A[858] + _0x12237);
                        var _0x122FF = new GameObject(this.gameObject.game, _0xB90A[859] + _0x12237);
                        _0x12269.loadTexture(this.toCollectHolder.texture);
                        _0x122CD.loadTexture(this.toCollectNumberHolder.texture);
                        _0x122FF.loadTexture(this.items[Number(_0xEF88) - 1].texture);
                        _0x122FF.anchor[_0xB90A[95]](0.5, 0.5);
                        _0x12269.anchor[_0xB90A[95]](0.5, 0.5);
                        _0x122CD.anchor[_0xB90A[95]](0.5, 0.5);
                        _0x12269.addChild(_0x122FF);
                        _0x12269.addChild(_0x122CD);
                        this.toCollectContainer.addChild(_0x12269);
                        _0x122FF.scale[_0xB90A[95]](0.8, 0.8);
                        _0x12269.position[_0xB90A[95]](_0xE3E9 + _0x1229B * _0x12318, 0);
                        _0x122CD.position[_0xB90A[95]](_0x12269.texture.width / 2 - _0x122CD.texture.width / 2, _0x12269.texture.height / 2 - _0x122CD.texture.height / 2);
                        _0x122FF.position[_0xB90A[95]](0, 0);
                        var _0x122B4 = new Components.TextLabel();
                        _0x122CD.addComponent(_0x122B4);
                        _0x122B4.fontAndSize = _0xB90A[860];
                        _0x122B4.created();
                        _0x122B4.init();
                        _0x122B4.setText(_0xFB72.toString());
                        this.toCollectContainer.getComponent(Components.SizeFit).shouldUpdate = true;
                        this.labelMap[_0xB90A[95]](_0xEF88, _0x122B4);
                        _0x12318++;
                        _0x12282.push(_0x12269);
                        _0x122E6.push(_0x122CD)
                    };
                    if (this.hardBlockToBreak) {
                        var _0x12269 = new GameObject(this.gameObject.game, _0xB90A[861]);
                        var _0x122CD = new GameObject(this.gameObject.game, _0xB90A[862]);
                        var _0x122FF = new GameObject(this.gameObject.game, _0xB90A[863]);
                        _0x12269.loadTexture(this.toCollectHolder.texture);
                        _0x122CD.loadTexture(this.toCollectNumberHolder.texture);
                        _0x122FF.loadTexture(this.hardBlockToBreak.texture);
                        _0x122FF.anchor[_0xB90A[95]](0.5, 0.5);
                        _0x12269.anchor[_0xB90A[95]](0.5, 0.5);
                        _0x122CD.anchor[_0xB90A[95]](0.5, 0.5);
                        _0x12269.addChild(_0x122FF);
                        _0x12269.addChild(_0x122CD);
                        this.toCollectContainer.addChild(_0x12269);
                        _0x122FF.scale[_0xB90A[95]](0.8, 0.8);
                        _0x12269.position[_0xB90A[95]](_0xE3E9 + _0x1229B * _0x12318, 0);
                        _0x122CD.position[_0xB90A[95]](_0x12269.texture.width / 2 - _0x122CD.texture.width / 2, _0x12269.texture.height / 2 - _0x122CD.texture.height / 2);
                        _0x122FF.position[_0xB90A[95]](0, 0);
                        var _0x122B4 = new Components.TextLabel();
                        _0x122CD.addComponent(_0x122B4);
                        _0x122B4.fontAndSize = _0xB90A[860];
                        _0x122B4.created();
                        _0x122B4.init();
                        _0x122B4.setText(this.totalToBreakTiles.toString());
                        this.events.addEventListener(_0xB90A[837], function() {
                            _0x122B4.setText(_0x12250.totalToBreakTiles.toString())
                        })
                    }
                }
            })]);
            return _0x11F30
        }(Scene.Component);
        Components.MatchThree = _0x11F30;
        var _0x11F17 = function() {
            function _0x11F17() {
                _0xB955(this, _0x11F17);
                this.blockMatrix = [
                    []
                ];
                this.duration = 100;
                this.removedTiles = [];
                this.paralel = true;
                this.userTriggerred = false
            }
            _0xB987(_0x11F17, [_0xC639(_0xB90A[13], _0xB90A[864], _0xB90A[5], function _0x12926() {
                var _0x12AB6 = this.tile1;
                var _0x12ACF = this.tile2;
                if (!_0x11ECC.usedPowerups.has(_0x12AB6)) {
                    if (_0x12AB6.getPowerup() != Components.Powerup.normal) {
                        _0x11ECC.usedPowerups.add(_0x12AB6)
                    };
                    if (_0x12AB6.getPowerup() == Components.Powerup.horizontal) {
                        this.handleHorizontal(this.origin1)
                    };
                    if (_0x12AB6.getPowerup() == Components.Powerup.vertical) {
                        this.handleVertical(this.origin1)
                    };
                    if (_0x12AB6.getPowerup() == Components.Powerup.explosion) {
                        this.handleExplosion(this.origin1)
                    };
                    if (_0x12AB6.getPowerup() == Components.Powerup.sameColors) {
                        this.handleColors(this.origin1, this.origin2)
                    }
                };
                if (!_0x11ECC.usedPowerups.has(_0x12ACF)) {
                    if (_0x12ACF.getPowerup() != Components.Powerup.normal) {
                        _0x11ECC.usedPowerups.add(_0x12ACF)
                    };
                    if (_0x12ACF.getPowerup() == Components.Powerup.horizontal) {
                        this.handleHorizontal(this.origin2)
                    };
                    if (_0x12ACF.getPowerup() == Components.Powerup.vertical) {
                        this.handleVertical(this.origin2)
                    };
                    if (_0x12ACF.getPowerup() == Components.Powerup.explosion) {
                        this.handleExplosion(this.origin2)
                    };
                    if (_0x12ACF.getPowerup() == Components.Powerup.sameColors) {
                        this.handleColors(this.origin2, this.origin1)
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[865], _0xB90A[5], function _0x128DB(_0xE240) {
                Components.DevUtils.playSound(_0xB90A[866]);
                var _0xD0F7 = [];
                for (var _0x12A52 = 0; _0x12A52 < this.width; _0x12A52++) {
                    var _0x10F13 = this.blockMatrix[_0xE240.y][_0x12A52];
                    if (!_0x10F13) {
                        continue
                    };
                    if (_0x10F13) {
                        _0xD0F7.push(_0x10F13)
                    }
                };
                var _0x12971 = new _0x11ECC();
                _0x12971.init(this.blockMatrix, _0xE240, this.matchThree, _0xD0F7, false);
                _0x12971.run();
                this.removedTiles = this.removedTiles.concat(_0x12971.getRemovedTiles())
            }), _0xC639(_0xB90A[13], _0xB90A[867], _0xB90A[5], function _0x128F4(_0xE240) {
                Components.DevUtils.playSound(_0xB90A[866]);
                var _0xD0F7 = [];
                for (var _0x12A6B = 0; _0x12A6B < this.height; _0x12A6B++) {
                    var _0x10F13 = this.blockMatrix[_0x12A6B][_0xE240.x];
                    if (!_0x10F13) {
                        continue
                    };
                    if (_0x10F13) {
                        _0xD0F7.push(_0x10F13)
                    }
                };
                var _0x12971 = new _0x11ECC();
                _0x12971.init(this.blockMatrix, _0xE240, this.matchThree, _0xD0F7, false);
                _0x12971.run();
                this.removedTiles = this.removedTiles.concat(_0x12971.getRemovedTiles())
            }), _0xC639(_0xB90A[13], _0xB90A[868], _0xB90A[5], function _0x128C2(_0xE240) {
                Components.DevUtils.playSound(_0xB90A[869]);
                var _0x12958 = [];
                var _0x10F13 = this.blockMatrix[_0xE240.y][_0xE240.x];
                for (var _0xC9D6 = _0x10F13.matrixY - 1; _0xC9D6 <= _0x10F13.matrixY + 1; _0xC9D6++) {
                    if (_0xC9D6 < 0 || _0xC9D6 > this.height - 1) {
                        continue
                    };
                    for (var _0xD656 = _0x10F13.matrixX - 1; _0xD656 <= _0x10F13.matrixX + 1; _0xD656++) {
                        var _0x12A39 = this.blockMatrix[_0xC9D6][_0xD656];
                        if (!_0x12A39) {
                            continue
                        };
                        if (_0x12958.indexOf(_0x12A39) == -1) {
                            _0x12958.push(_0x12A39)
                        }
                    }
                };
                for (var _0x12A07 = 0; _0x12A07 < 2; _0x12A07++) {
                    for (var _0x129D5 = _0x10F13.matrixX - 2 - _0x12A07; _0x129D5 < _0x10F13.matrixX + 3 + _0x12A07; _0x129D5++) {
                        if (_0x129D5 < 0 || _0x129D5 > this.width - 1) {
                            continue
                        };
                        if (_0x10F13.matrixY - 2 - _0x12A07 >= 0) {
                            var _0x1213D = this.blockMatrix[_0x10F13.matrixY - 2 - _0x12A07][_0x129D5];
                            if (!_0x1213D) {
                                continue
                            };
                            var _0x12A20 = _0x10F13.gameObject.position.clone().subtract(_0x1213D.gameObject.x, _0x1213D.gameObject.y).normalize().multiply(30 - _0x12A07 * 10, 30 - _0x12A07 * 10);
                            Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x1213D.gameObject.x - _0x12A20.x, _0xB90A[44], _0x1213D.gameObject.y - _0x12A20.y), 100, null, true, 0, 0, true)
                        };
                        if (_0x10F13.matrixY + 2 + _0x12A07 < this.height) {
                            var _0x1213D = this.blockMatrix[_0x10F13.matrixY + 2 + _0x12A07][_0x129D5];
                            if (!_0x1213D) {
                                continue
                            };
                            var _0x12A20 = _0x10F13.gameObject.position.clone().subtract(_0x1213D.gameObject.x, _0x1213D.gameObject.y).normalize().multiply(30 - _0x12A07 * 10, 30 - _0x12A07 * 10);
                            Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x1213D.gameObject.x - _0x12A20.x, _0xB90A[44], _0x1213D.gameObject.y - _0x12A20.y), 100, null, true, 0, 0, true)
                        }
                    };
                    for (var _0x129EE = _0x10F13.matrixY - 2 - _0x12A07; _0x129EE < _0x10F13.matrixY + 2 + _0x12A07; _0x129EE++) {
                        if (_0x129EE < 0 || _0x129EE > this.height - 1) {
                            continue
                        };
                        if (_0x10F13.matrixX - 2 - _0x12A07 >= 0) {
                            var _0x1213D = this.blockMatrix[_0x129EE][_0x10F13.matrixX - 2 - _0x12A07];
                            if (!_0x1213D) {
                                continue
                            };
                            var _0x12A20 = _0x10F13.gameObject.position.clone().subtract(_0x1213D.gameObject.x, _0x1213D.gameObject.y).normalize().multiply(30 - _0x12A07 * 10, 30 - _0x12A07 * 10);
                            Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x1213D.gameObject.x - _0x12A20.x, _0xB90A[44], _0x1213D.gameObject.y - _0x12A20.y), 100, null, true, 0, 0, true)
                        };
                        if (_0x10F13.matrixX + 2 < this.width) {
                            var _0x1213D = this.blockMatrix[_0x129EE][_0x10F13.matrixX + 2 + _0x12A07];
                            if (!_0x1213D) {
                                continue
                            };
                            var _0x12A20 = _0x10F13.gameObject.position.clone().subtract(_0x1213D.gameObject.x, _0x1213D.gameObject.y).normalize().multiply(30 - _0x12A07 * 10, 30 - _0x12A07 * 10);
                            Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x1213D.gameObject.x - _0x12A20.x, _0xB90A[44], _0x1213D.gameObject.y - _0x12A20.y), 100, null, true, 0, 0, true)
                        }
                    }
                };
                var _0x12971 = new _0x11ECC();
                _0x12971.init(this.blockMatrix, _0xE240, this.matchThree, _0x12958, false);
                _0x12971.run();
                this.removedTiles = this.removedTiles.concat(_0x12971.getRemovedTiles());
                this.duration += _0x12971.getDuration()
            }), _0xC639(_0xB90A[13], _0xB90A[870], _0xB90A[5], function _0x128A9(_0xE240, _0xC71A) {
                Components.DevUtils.playSound(_0xB90A[869]);
                var _0x12958 = [];
                var _0x129BC = this.blockMatrix[_0xC71A.y][_0xC71A.x];
                var _0x129A3 = _0x129BC.itemNr;
                var _0x1298A = this.blockMatrix[_0xE240.y][_0xE240.x];
                _0x12958.push(_0x1298A);
                _0x12958.push(_0x129BC);
                if (_0x1298A.getPowerup() == Components.Powerup.sameColors) {
                    _0x11ECC.usedPowerups.add(_0x1298A)
                };
                if (_0x129BC.getPowerup() == Components.Powerup.sameColors) {
                    _0x11ECC.usedPowerups.add(_0x129BC)
                };
                for (var _0x1293F = 0; _0x1293F < this.height; _0x1293F++) {
                    for (var _0xC9D6 = 0; _0xC9D6 < this.width; _0xC9D6++) {
                        if (_0xE240.x == _0xC9D6 && _0xE240.y == _0x1293F || _0xC71A.x == _0xC9D6 && _0xC71A.y == _0x1293F) {
                            continue
                        };
                        var _0x1213D = this.blockMatrix[_0x1293F][_0xC9D6];
                        if (!_0x1213D) {
                            continue
                        };
                        if (_0x1213D.itemNr == _0x129A3 && _0x1213D.getPowerup() != Components.Powerup.sameColors) {
                            _0x12958.push(_0x1213D)
                        }
                    }
                };
                this.paralel = false;
                var _0x12971 = new _0x11ECC();
                _0x12971.init(this.blockMatrix, _0xE240, this.matchThree, _0x12958, false);
                _0x12971.run();
                this.removedTiles = _0x12971.getRemovedTiles()
            }), _0xC639(_0xB90A[13], _0xB90A[871], _0xB90A[5], function _0x1285E() {
                return this.duration
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927(_0x12A84, _0xF62C, _0x12651, _0x12A9D) {
                this.blockMatrix = _0x12A84;
                this.width = _0x12A84[0].length;
                this.height = _0x12A84.length;
                this.matchThree = _0xF62C;
                this.origin1 = _0x12651;
                this.origin2 = _0x12A9D;
                this.tile1 = this.blockMatrix[this.origin1.y][this.origin1.x];
                this.tile2 = this.blockMatrix[this.origin2.y][this.origin2.x]
            }), _0xC639(_0xB90A[13], _0xB90A[872], _0xB90A[5], function _0x1290D() {
                return this.removedTiles.length != 0
            }), _0xC639(_0xB90A[13], _0xB90A[873], _0xB90A[5], function _0x12877() {
                return this.removedTiles
            }), _0xC639(_0xB90A[13], _0xB90A[874], _0xB90A[5], function _0x12890() {
                return this.removedTiles.length
            }), _0xC639(_0xB90A[13], _0xB90A[875], _0xB90A[5], function _0x12845() {
                return this.paralel
            })]);
            return _0x11F17
        }();
        Components.HandlePowerup = _0x11F17;
        var _0x11F49 = function(_0x12AE8) {
            _0xBA1D(_0x11F49, _0x12AE8);

            function _0x11F49() {
                _0xB955(this, _0x11F49);
                return _0xB9A0(this, _getPrototypeOf(_0x11F49).apply(this, arguments))
            }
            _0xB987(_0x11F49, [_0xC639(_0xB90A[13], _0xB90A[864], _0xB90A[5], function _0x12926() {
                var _0x12AB6 = this.blockMatrix[this.origin1.y][this.origin1.x];
                var _0x12ACF = this.blockMatrix[this.origin2.y][this.origin2.x];
                if (_0x12AB6.getPowerup() != Components.Powerup.normal) {
                    _0x11ECC.usedPowerups.add(_0x12AB6)
                };
                if (_0x12ACF.getPowerup() != Components.Powerup.normal) {
                    _0x11ECC.usedPowerups.add(_0x12ACF)
                };
                var _0x12C2D = _0x12AB6.getPowerup() == Components.Powerup.sameColors ? _0x12AB6 : _0x12ACF;
                if (_0x12C2D.getPowerup() != Components.Powerup.sameColors) {
                    _0x12C2D = null
                };
                var _0x12C91 = this.findPowerupCombo();
                if (_0x12C91 == Components.PowerCombination.allTiles) {
                    this.breakAllTiles()
                };
                if (_0x12C91 == Components.PowerCombination.cross) {
                    this.handleHorizontal(this.origin1);
                    this.handleVertical(this.origin1)
                };
                if (_0x12C91 == Components.PowerCombination.bigCross) {
                    this.handleHorizontal(new PIXI.Point(this.origin1.x, this.origin1.y));
                    if (this.origin1.y > 0) {
                        this.handleHorizontal(new PIXI.Point(this.origin1.x, this.origin1.y - 1))
                    };
                    if (this.origin1.y < this.height - 1) {
                        this.handleHorizontal(new PIXI.Point(this.origin1.x, this.origin1.y + 1))
                    };
                    this.handleVertical(new PIXI.Point(this.origin1.x, this.origin1.y));
                    if (this.origin1.x > 0) {
                        this.handleVertical(new PIXI.Point(this.origin1.x - 1, this.origin1.y))
                    };
                    if (this.origin1.x < this.width - 1) {
                        this.handleVertical(new PIXI.Point(this.origin1.x + 1, this.origin1.y))
                    }
                };
                trace(_0x12C91 == Components.PowerCombination.oneColor);
                if (_0x12C91 == Components.PowerCombination.oneColor) {
                    if (_0x12AB6.getPowerup() == Components.Powerup.sameColors) {
                        this.handleColors(this.origin1, this.origin2)
                    } else {
                        this.handleColors(this.origin2, this.origin1)
                    }
                };
                if (_0x12C91 == Components.PowerCombination.allLine) {
                    this.addPowersToAll(Components.Powerup.horizontal, _0x12C2D == _0x12AB6 ? _0x12ACF.itemNr : _0x12AB6.itemNr)
                };
                if (_0x12C91 == Components.PowerCombination.allExplosion) {
                    this.addPowersToAll(Components.Powerup.explosion, _0x12C2D == _0x12AB6 ? _0x12ACF.itemNr : _0x12AB6.itemNr)
                };
                if (_0x12C91 == Components.PowerCombination.bigExplosion) {
                    this.handleBigExplosion(this.origin1)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[876], _0xB90A[5], function _0x12B01(_0x1266A, _0x129A3) {
                var _0x12B7E = this;
                var _0x12BB0 = [];
                var _0x12BC9 = [];
                for (var _0x12B65 = 0; _0x12B65 < this.height; _0x12B65++) {
                    for (var _0xC9D6 = 0; _0xC9D6 < this.width; _0xC9D6++) {
                        var _0x1213D = this.blockMatrix[_0x12B65][_0xC9D6];
                        if (_0x1213D.itemNr == _0x129A3) {
                            if (_0x1213D.getPowerup() != Components.Powerup.normal) {
                                if (!_0x11ECC.usedPowerups.has(_0x1213D)) {
                                    var _0x12B97 = new _0x11F17();
                                    _0x12B97.init(this.blockMatrix, this.matchThree, new PIXI.Point(_0xC9D6, _0x12B65), new PIXI.Point(_0xC9D6, _0x12B65));
                                    _0x12B97.run();
                                    this.removedTiles = this.removedTiles.concat(_0x12B97.getRemovedTiles());
                                    _0x12BC9.push(_0x1213D)
                                };
                                _0x11ECC.usedPowerups.add(_0x1213D)
                            } else {
                                _0x12BB0.push(_0x1213D);
                                if (_0x1266A != Components.Powerup.explosion) {
                                    _0x1266A = Math.random() >= 0.5 ? Components.Powerup.vertical : Components.Powerup.horizontal
                                };
                                _0x1213D.setPowerup(_0x1266A)
                            }
                        }
                    }
                };
                this.removedTiles.push(this.tile1);
                this.removedTiles.push(this.tile2);
                this.duration += 300 + _0x12BB0.length * 150;
                Core.game.time.events.add(300, function() {
                    var _0x12BFB = function _0x12BFB(_0x12BE2) {
                        var _0xCE22 = _0x12BB0[_0x12BE2];
                        Core.game.time.events.add(100 * _0x12BE2, function(_0x10F13) {
                            var _0x12B97 = new _0x11F17();
                            _0x12B97.init(_0x12B7E.blockMatrix, _0x12B7E.matchThree, new PIXI.Point(_0x10F13.matrixX, _0x10F13.matrixY), new PIXI.Point(_0x10F13.matrixX, _0x10F13.matrixY));
                            _0x12B97.run();
                            _0x11ECC.usedPowerups.add(_0xCE22);
                            _0x12B7E.removedTiles = _0x12B7E.removedTiles.concat(_0x12B97.getRemovedTiles())
                        }, _0x12B7E, _0xCE22)
                    };
                    for (var _0x12BE2 = 0; _0x12BE2 < _0x12BB0.length; _0x12BE2++) {
                        _0x12BFB(_0x12BE2)
                    };
                    var _0x12971 = new _0x11ECC();
                    _0x12971.init(_0x12B7E.blockMatrix, _0x12B7E.origin1, _0x12B7E.matchThree, [_0x12B7E.tile1, _0x12B7E.tile2], false);
                    _0x12971.run()
                }, this)
            }), _0xC639(_0xB90A[13], _0xB90A[877], _0xB90A[5], function _0x12B1A() {
                var _0xD462 = [];
                for (var _0x12C14 = 0; _0x12C14 < this.height; _0x12C14++) {
                    for (var _0xC9D6 = 0; _0xC9D6 < this.width; _0xC9D6++) {
                        var _0x1213D = this.blockMatrix[_0x12C14][_0xC9D6];
                        if (_0x1213D.getPowerup() != Components.Powerup.normal) {
                            _0x11ECC.usedPowerups.add(_0x1213D)
                        };
                        _0xD462.push(_0x1213D)
                    }
                };
                var _0x12971 = new _0x11ECC();
                _0x12971.init(this.blockMatrix, this.origin1, this.matchThree, _0xD462, false);
                _0x12971.run();
                this.removedTiles = _0x12971.getRemovedTiles()
            }), _0xC639(_0xB90A[13], _0xB90A[878], _0xB90A[5], function _0x12B4C(_0xE240) {
                var _0x12958 = [];
                var _0x10F13 = this.blockMatrix[_0xE240.y][_0xE240.x];
                for (var _0xC9D6 = _0x10F13.matrixY - 2; _0xC9D6 <= _0x10F13.matrixY + 2; _0xC9D6++) {
                    if (_0xC9D6 < 0 || _0xC9D6 > this.height - 1) {
                        continue
                    };
                    for (var _0xD656 = _0x10F13.matrixX - 2; _0xD656 <= _0x10F13.matrixX + 2; _0xD656++) {
                        var _0x12A39 = this.blockMatrix[_0xC9D6][_0xD656];
                        if (!_0x12A39) {
                            continue
                        };
                        if (_0x12958.indexOf(_0x12A39) == -1) {
                            _0x12958.push(_0x12A39)
                        }
                    }
                };
                for (var _0x12C78 = 0; _0x12C78 < 2; _0x12C78++) {
                    for (var _0x12C5F = _0x10F13.matrixX - 3 - _0x12C78; _0x12C5F < _0x10F13.matrixX + 4 + _0x12C78; _0x12C5F++) {
                        if (_0x12C5F < 0 || _0x12C5F > this.width - 1) {
                            continue
                        };
                        if (_0x10F13.matrixY - 3 - _0x12C78 >= 0) {
                            var _0x1213D = this.blockMatrix[_0x10F13.matrixY - 3 - _0x12C78][_0x12C5F];
                            if (!_0x1213D) {
                                continue
                            };
                            var _0x12A20 = _0x10F13.gameObject.position.clone().subtract(_0x1213D.gameObject.x, _0x1213D.gameObject.y).normalize().multiply(30 - _0x12C78 * 10, 30 - _0x12C78 * 10);
                            Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x1213D.gameObject.x - _0x12A20.x, _0xB90A[44], _0x1213D.gameObject.y - _0x12A20.y), 100, null, true, 0, 0, true)
                        };
                        if (_0x10F13.matrixY + 3 + _0x12C78 < this.height) {
                            var _0x1213D = this.blockMatrix[_0x10F13.matrixY + 3 + _0x12C78][_0x12C5F];
                            if (!_0x1213D) {
                                continue
                            };
                            var _0x12A20 = _0x10F13.gameObject.position.clone().subtract(_0x1213D.gameObject.x, _0x1213D.gameObject.y).normalize().multiply(30 - _0x12C78 * 10, 30 - _0x12C78 * 10);
                            Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x1213D.gameObject.x - _0x12A20.x, _0xB90A[44], _0x1213D.gameObject.y - _0x12A20.y), 100, null, true, 0, 0, true)
                        }
                    };
                    for (var _0x12C46 = _0x10F13.matrixY - 2 - _0x12C78; _0x12C46 < _0x10F13.matrixY + 3 + _0x12C78; _0x12C46++) {
                        if (_0x12C46 < 0 || _0x12C46 > this.height - 1) {
                            continue
                        };
                        if (_0x10F13.matrixX - 3 - _0x12C78 >= 0) {
                            var _0x1213D = this.blockMatrix[_0x12C46][_0x10F13.matrixX - 3 - _0x12C78];
                            if (!_0x1213D) {
                                continue
                            };
                            var _0x12A20 = _0x10F13.gameObject.position.clone().subtract(_0x1213D.gameObject.x, _0x1213D.gameObject.y).normalize().multiply(30 - _0x12C78 * 10, 30 - _0x12C78 * 10);
                            Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x1213D.gameObject.x - _0x12A20.x, _0xB90A[44], _0x1213D.gameObject.y - _0x12A20.y), 100, null, true, 0, 0, true)
                        };
                        if (_0x10F13.matrixX + 3 < this.width) {
                            var _0x1213D = this.blockMatrix[_0x12C46][_0x10F13.matrixX + 3 + _0x12C78];
                            if (!_0x1213D) {
                                continue
                            };
                            var _0x12A20 = _0x10F13.gameObject.position.clone().subtract(_0x1213D.gameObject.x, _0x1213D.gameObject.y).normalize().multiply(30 - _0x12C78 * 10, 30 - _0x12C78 * 10);
                            Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x1213D.gameObject.x - _0x12A20.x, _0xB90A[44], _0x1213D.gameObject.y - _0x12A20.y), 100, null, true, 0, 0, true)
                        }
                    }
                };
                var _0x12971 = new _0x11ECC();
                _0x12971.init(this.blockMatrix, _0xE240, this.matchThree, _0x12958, false);
                _0x12971.run();
                this.removedTiles = this.removedTiles.concat(_0x12971.getRemovedTiles());
                this.duration += _0x12971.getDuration()
            }), _0xC639(_0xB90A[13], _0xB90A[879], _0xB90A[5], function _0x12B33() {
                var _0x12AB6 = this.blockMatrix[this.origin1.y][this.origin1.x];
                var _0x12ACF = this.blockMatrix[this.origin2.y][this.origin2.x];
                var _0xF62C = _0x12AB6.getPowerup();
                var _0x12651 = _0x12ACF.getPowerup();
                if (_0xF62C == Components.Powerup.sameColors && _0x12651 == Components.Powerup.sameColors) {
                    return Components.PowerCombination.allTiles
                };
                var _0x12C2D = null;
                var _0x106DF = null;
                var _0xDFE8 = null;
                if (_0x12AB6.getPowerup() == Components.Powerup.sameColors) {
                    _0x12C2D = _0x12AB6;
                    _0x106DF = _0xF62C;
                    _0xDFE8 = _0x12651
                } else {
                    _0x12C2D = _0x12ACF;
                    _0x106DF = _0x12651;
                    _0xDFE8 = _0xF62C
                };
                if (_0x12C2D.getPowerup() != Components.Powerup.sameColors) {
                    _0x12C2D = null
                };
                if (_0x12C2D == null) {
                    if (_0xF62C == Components.Powerup.explosion && _0x12651 == Components.Powerup.explosion) {
                        return Components.PowerCombination.bigExplosion
                    };
                    if ((_0xF62C == Components.Powerup.horizontal || _0xF62C == Components.Powerup.vertical) && (_0x12651 == Components.Powerup.vertical || _0x12651 == Components.Powerup.horizontal)) {
                        return Components.PowerCombination.cross
                    };
                    return Components.PowerCombination.bigCross
                };
                if (_0xDFE8 == Components.Powerup.horizontal || _0xDFE8 == Components.Powerup.vertical) {
                    return Components.PowerCombination.allLine
                };
                if (_0xDFE8 == Components.Powerup.explosion) {
                    return Components.PowerCombination.allExplosion
                };
                return Components.PowerCombination.oneColor
            })]);
            return _0x11F49
        }(_0x11F17);
        Components.UserPowerup = _0x11F49;
        var _0x11EFE = function() {
            function _0x11EFE() {
                _0xB955(this, _0x11EFE);
                this.blockMatrix = [
                    []
                ];
                this.emptyColsCount = new Map();
                this.duration = 500
            }
            _0xB987(_0x11EFE, [_0xC639(_0xB90A[13], _0xB90A[864], _0xB90A[5], function _0x12926() {
                var _0x1121A = this.emptyColsCount.keys();
                var _0xD39A = _0x1121A.next();
                while (!_0xD39A.done) {
                    var _0xE754 = _0xD39A.value;
                    var _0x1188C = this.emptyColsCount[_0xB90A[8]](_0xE754);
                    var _0xD8E0 = 0;
                    var _0x12CF5 = false;
                    for (var _0x12CAA = this.height - 1; _0x12CAA >= 0; _0x12CAA--) {
                        if (this.blockMatrix[_0x12CAA][_0xE754] == null) {
                            _0xD8E0++
                        } else {
                            if (_0xD8E0 != 0) {
                                var _0x1213D = this.blockMatrix[_0x12CAA][_0xE754];
                                _0x1213D.setMatrixPosition(_0xE754, _0x12CAA + _0xD8E0);
                                this.blockMatrix[_0x12CAA + _0xD8E0][_0xE754] = _0x1213D;
                                this.blockMatrix[_0x12CAA][_0xE754] = null;
                                var _0x1213D = this.blockMatrix[_0x12CAA + _0xD8E0][_0xE754];
                                this.matchThree.tilePositionMap[_0xB90A[95]](_0x1213D.gameObject, new PIXI.Point(_0xE754, _0x12CAA + _0xD8E0));
                                var _0x10B8F = this.matchThree.getPositionFor(_0x1213D.matrixX, _0x1213D.matrixY);
                                var _0x12A20 = Math.abs(_0x10B8F.y - _0x1213D.gameObject.y);
                                Components.Tweens.create(_0x1213D.gameObject).to(_0xC639(_0xB90A[43], _0x10B8F.x, _0xB90A[44], _0x10B8F.y), 300, Phaser.Easing.Cubic.Out, true).onComplete.addOnce(function(_0xC652) {
                                    Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[44], _0xC652.y - 2), 100, Phaser.Easing.Quadratic.InOut, true, 0, 0, true)
                                }, this, 0, _0x1213D.gameObject)
                            }
                        }
                    };
                    for (var _0x12CC3 = 0; _0x12CC3 < _0xD8E0; _0x12CC3++) {
                        var _0xFFA5 = this.matchThree.generateTile();
                        var _0xCBCA = _0xFFA5.getComponent(Components.MatchThreeTile);
                        this.matchThree.holder.addChild(_0xFFA5);
                        var _0x10B8F = this.matchThree.getPositionFor(_0xE754, _0x12CC3 - _0xD8E0);
                        _0xFFA5.x = _0x10B8F.x;
                        _0xFFA5.y = _0x10B8F.y;
                        var _0x12CDC = this.matchThree.getPositionFor(_0xE754, _0x12CC3);
                        _0xCBCA.setMatrixPosition(_0xE754, _0x12CC3);
                        _0xCBCA.setItem(this.matchThree.duplicateObject(this.matchThree.items[_0xCBCA.value - 1]), _0xCBCA.value);
                        this.blockMatrix[_0x12CC3][_0xE754] = _0xCBCA;
                        var _0x12A20 = Math.abs(_0x12CDC.y - _0xFFA5.y);
                        Components.Tweens.create(_0xFFA5).to(_0xC639(_0xB90A[43], _0x12CDC.x, _0xB90A[44], _0x12CDC.y), 300, Phaser.Easing.Cubic.Out, true).onComplete.addOnce(function(_0xC652) {
                            Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[44], _0xC652.y - 2), 100, Phaser.Easing.Quadratic.InOut, true, 0, 0, true)
                        }, this, 0, _0xFFA5);
                        this.matchThree.addInputFor(_0xFFA5);
                        this.matchThree.tilePositionMap[_0xB90A[95]](_0xFFA5, new PIXI.Point(_0xE754, _0x12CC3))
                    };
                    _0xD39A = _0x1121A.next()
                };
                this.onComplete()
            }), _0xC639(_0xB90A[13], _0xB90A[871], _0xB90A[5], function _0x1285E() {
                return this.duration
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927(_0x12A84, _0xF62C, _0x12651, _0x12A9D) {
                this.blockMatrix = _0x12A84;
                this.width = _0x12A84[0].length;
                this.height = _0x12A84.length;
                this.matchThree = _0xF62C;
                this.emptyColsCount = _0x12651;
                this.onComplete = _0x12A9D
            }), _0xC639(_0xB90A[13], _0xB90A[872], _0xB90A[5], function _0x1290D() {
                return false
            }), _0xC639(_0xB90A[13], _0xB90A[873], _0xB90A[5], function _0x12877() {
                return []
            }), _0xC639(_0xB90A[13], _0xB90A[874], _0xB90A[5], function _0x12890() {
                return 0
            }), _0xC639(_0xB90A[13], _0xB90A[875], _0xB90A[5], function _0x12845() {
                return false
            })]);
            return _0x11EFE
        }();
        Components.GenerateBlocks = _0x11EFE;
        var _0x11EE5 = function() {
            function _0x11EE5() {
                _0xB955(this, _0x11EE5);
                this.blockMatrix = [
                    []
                ];
                this.alreadyMatchedSet = new Set();
                this.toBreak = [];
                this.allRemoved = [];
                this.duration = 0
            }
            _0xB987(_0x11EE5, [_0xC639(_0xB90A[13], _0xB90A[864], _0xB90A[5], function _0x12926() {
                _0x11ECC.usedPowerups.clear();
                var _0xD1BF = 0;
                for (var _0x12D8B = 0; _0x12D8B < this.toBreak.length; _0x12D8B++) {
                    var _0xCE22 = this.toBreak[_0x12D8B];
                    _0xCE22.run();
                    if (_0xD1BF < _0xCE22.getDuration()) {
                        _0xD1BF = _0xCE22.getDuration()
                    };
                    this.allRemoved = this.allRemoved.concat(_0xCE22.getRemovedTiles())
                };
                this.duration = _0xD1BF + 300
            }), _0xC639(_0xB90A[13], _0xB90A[871], _0xB90A[5], function _0x1285E() {
                return this.duration
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927(_0x12A84, _0xF62C, _0x12651, _0x12A9D) {
                this.blockMatrix = _0x12A84;
                this.width = _0x12A84[0].length;
                this.height = _0x12A84.length;
                this.matchThree = _0xF62C;
                this.findMatchedInGrid()
            }), _0xC639(_0xB90A[13], _0xB90A[872], _0xB90A[5], function _0x1290D() {
                return this.toBreak.length != 0
            }), _0xC639(_0xB90A[13], _0xB90A[873], _0xB90A[5], function _0x12877() {
                return this.allRemoved
            }), _0xC639(_0xB90A[13], _0xB90A[874], _0xB90A[5], function _0x12890() {
                return this.allRemoved.length
            }), _0xC639(_0xB90A[13], _0xB90A[875], _0xB90A[5], function _0x12845() {
                return false
            }), _0xC639(_0xB90A[13], _0xB90A[880], _0xB90A[5], function _0x12D0E() {
                for (var _0x12D27 = 0; _0x12D27 < this.height; _0x12D27++) {
                    for (var _0xC9D6 = 0; _0xC9D6 < this.width; _0xC9D6++) {
                        var _0x12D59 = this.blockMatrix[_0x12D27][_0xC9D6];
                        if (this.alreadyMatchedSet.has(_0x12D59)) {
                            continue
                        };
                        var _0x12D72 = this.matchThree.findPairs(_0xC9D6, _0x12D27);
                        if (_0x12D72.length != 0) {
                            for (var _0xD656 = 0; _0xD656 < _0x12D72.length; _0xD656++) {
                                var _0x12D40 = _0x12D72[_0xD656];
                                this.alreadyMatchedSet.add(_0x12D40)
                            };
                            var _0x12638 = new _0x11ECC();
                            _0x12638.init(this.blockMatrix, new PIXI.Point(_0xC9D6, _0x12D27), this.matchThree, _0x12D72);
                            this.toBreak.push(_0x12638)
                        }
                    }
                }
            })]);
            return _0x11EE5
        }();
        Components.FindMatchedInGrid = _0x11EE5;
        var _0x11ECC = function() {
            function _0x11ECC() {
                _0xB955(this, _0x11ECC);
                this.blockMatrix = [
                    []
                ];
                this.duration = 100;
                this.removedTiles = []
            }
            _0xB987(_0x11ECC, [_0xC639(_0xB90A[13], _0xB90A[864], _0xB90A[5], function _0x12926() {
                var _0x12EE9 = this;
                Components.DevUtils.playSound(_0xB90A[881]);
                var _0x12F34 = this.original;
                var _0x12F4D = this.matchedTiles.length;
                if (this.matchedTiles.length != 3 && this.combine) {
                    while (this.matchedTiles.indexOf(_0x12F34) != -1) {
                        this.matchedTiles.splice(this.matchedTiles.indexOf(_0x12F34), 1)
                    }
                };
                var _0x12F7F = 0;
                var _0x123AE = [];
                this.matchedTiles.push(_0x12F34);
                for (var _0x12E6C = 0; _0x12E6C < this.matchedTiles.length; _0x12E6C++) {
                    var _0x1213D = this.matchedTiles[_0x12E6C];
                    if (!_0x12F34 && _0x1213D && _0x1213D.getPowerup() == Components.Powerup.normal) {
                        _0x12F34 = _0x1213D
                    };
                    if (_0x1213D && _0x1213D.getPowerup() != Components.Powerup.normal && !_0x11ECC.usedPowerups.has(_0x1213D)) {
                        var _0x1266A = new _0x11F17();
                        _0x1266A.init(this.blockMatrix, this.matchThree, new PIXI.Point(_0x1213D.matrixX, _0x1213D.matrixY), new PIXI.Point(_0x12F34.matrixX, _0x12F34.matrixY));
                        _0x123AE.push(_0x1266A)
                    }
                };
                this.matchedTiles.pop();
                for (var _0x12E85 = 0; _0x12E85 < _0x123AE.length; _0x12E85++) {
                    var _0x12ED0 = _0x123AE[_0x12E85];
                    _0x12ED0.run();
                    if (_0x12F7F < _0x12ED0.getDuration()) {
                        _0x12F7F = _0x12ED0.getDuration()
                    };
                    this.duration = Math.max(this.duration, _0x12ED0.getDuration());
                    this.removedTiles = this.removedTiles.concat(_0x12ED0.getRemovedTiles())
                };
                if (_0x12F4D > 3 && this.combine && _0x12F34.getPowerup() == Components.Powerup.normal) {
                    _0x12F34.gameObject.parent.setChildIndex(_0x12F34.gameObject, _0x12F34.gameObject.parent.children.length - 1);
                    var _0x12F66 = this.getPowerup(this.matchedTiles);
                    this.matchThree.visibleBlockMatrix[this.y][this.x].onBreak();
                    for (var _0x12E9E = 0; _0x12E9E < this.matchedTiles.length; _0x12E9E++) {
                        var _0x12F02 = this.matchedTiles[_0x12E9E];
                        Components.Tweens.create(_0x12F02.gameObject).to(_0xC639(_0xB90A[45], 0, _0xB90A[43], _0x12F34.gameObject.x, _0xB90A[44], _0x12F34.gameObject.y), this.duration * 3, Phaser.Easing.Quadratic.Out, true, _0x12F7F);
                        _0x12F02.gameObject.disableInput();
                        this.removedTiles.push(_0x12F02)
                    };
                    _0x12F34.setPowerup(_0x12F66);
                    _0x12F34.onBreak();
                    if (this.matchThree.toCollectMap.has(_0x12F34.itemNr.toString())) {
                        this.matchThree.toCollectMap[_0xB90A[95]](_0x12F34.itemNr.toString(), this.matchThree.toCollectMap[_0xB90A[8]](_0x12F34.itemNr.toString()) - 1);
                        this.matchThree.labelMap[_0xB90A[8]](_0x12F34.itemNr.toString()).setText(this.matchThree.toCollectMap[_0xB90A[8]](_0x12F34.itemNr.toString()).toString())
                    };
                    this.duration *= 3
                } else {
                    for (var _0x12EB7 = 0; _0x12EB7 < this.matchedTiles.length; _0x12EB7++) {
                        var _0x12F1B = this.matchedTiles[_0x12EB7];
                        Core.game.time.events.add(_0x12F7F, function(_0x10167, _0xCC92) {
                            Components.Tweens.create(_0x10167.gameObject).to(_0xC639(_0xB90A[45], 0), _0xCC92, Phaser.Easing.Quadratic.Out, true);
                            var _0xDBCE = Components.DevUtils.getBounds(_0x10167.gameObject);
                            _0x12EE9.matchThree.ps.showParticleAt(_0xDBCE.centerX, _0xDBCE.centerY, _0x10167.itemNr - 1, true)
                        }, this, _0x12F1B, this.duration);
                        _0x12F1B.gameObject.disableInput();
                        this.removedTiles.push(_0x12F1B)
                    }
                };
                this.duration += _0x12F7F
            }), _0xC639(_0xB90A[13], _0xB90A[882], _0xB90A[5], function _0x12DA4(_0x12E08) {
                var _0x12E21 = new Map();
                var _0x12E3A = new Map();
                var _0x12DEF = 0;
                var _0x12DD6 = 0;
                for (var _0x12DBD = 0; _0x12DBD < _0x12E08.length; _0x12DBD++) {
                    var _0x10F13 = _0x12E08[_0x12DBD];
                    if (_0x12E21.has(_0x10F13.matrixX)) {
                        _0x12E21[_0xB90A[95]](_0x10F13.matrixX, _0x12E21[_0xB90A[8]](_0x10F13.matrixX) + 1)
                    } else {
                        _0x12E21[_0xB90A[95]](_0x10F13.matrixX, 1)
                    };
                    if (_0x12E3A.has(_0x10F13.matrixY)) {
                        _0x12E3A[_0xB90A[95]](_0x10F13.matrixY, _0x12E3A[_0xB90A[8]](_0x10F13.matrixY) + 1)
                    } else {
                        _0x12E3A[_0xB90A[95]](_0x10F13.matrixY, 1)
                    }
                };
                _0x12E21.forEach(function(_0xD02F, _0xD656) {
                    if (_0x12DD6 < _0xD02F) {
                        _0x12DD6 = _0xD02F
                    }
                });
                _0x12E3A.forEach(function(_0xD02F, _0xD656) {
                    if (_0x12DEF < _0xD02F) {
                        _0x12DEF = _0xD02F
                    }
                });
                if (_0x12DD6 == _0x12E08.length && _0x12E08.length == 3) {
                    return Components.Powerup.vertical
                } else {
                    if (_0x12DEF == _0x12E08.length && _0x12E08.length == 3) {
                        return Components.Powerup.horizontal
                    } else {
                        if (_0x12DD6 >= 2 && _0x12DEF >= 2) {
                            return Components.Powerup.explosion
                        } else {
                            if (_0x12E08.length >= 4) {
                                return Components.Powerup.sameColors
                            }
                        }
                    }
                };
                return Components.Powerup.normal
            }), _0xC639(_0xB90A[13], _0xB90A[871], _0xB90A[5], function _0x1285E() {
                return this.duration
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927(_0x12A84, _0xF62C, _0x12651, _0x12A9D) {
                var _0x12E53 = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
                this.blockMatrix = _0x12A84;
                this.x = _0xF62C.x;
                this.y = _0xF62C.y;
                this.matchThree = _0x12651;
                this.matchedTiles = _0x12A9D;
                this.combine = _0x12E53;
                this.original = _0x12A84[this.y][this.x]
            }), _0xC639(_0xB90A[13], _0xB90A[872], _0xB90A[5], function _0x1290D() {
                return this.removedTiles.length != 0
            }), _0xC639(_0xB90A[13], _0xB90A[873], _0xB90A[5], function _0x12877() {
                return this.removedTiles
            }), _0xC639(_0xB90A[13], _0xB90A[874], _0xB90A[5], function _0x12890() {
                return this.removedTiles.length
            }), _0xC639(_0xB90A[13], _0xB90A[875], _0xB90A[5], function _0x12845() {
                return true
            })]);
            return _0x11ECC
        }();
        _0x11ECC.usedPowerups = new Set();
        Components.BreakTiles = _0x11ECC
    }

    function _0xC0A8(Components) {
        var _0x12F98 = function(_0x12FE3) {
            _0xBA1D(_0x12F98, _0x12FE3);

            function _0x12F98() {
                var _0x130DD;
                _0xB955(this, _0x12F98);
                _0x130DD = _0xB9A0(this, _getPrototypeOf(_0x12F98).apply(this, arguments));
                _0x130DD.overlayNr = 0;
                _0x130DD.value = 0;
                _0x130DD.powerup = _0x12FCA.normal;
                _0x130DD.done = function(_0xC652, _0x130F6) {
                    return Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[45], _0x130F6), 600, null, true, 0, -1, true)
                };
                return _0x130DD
            }
            _0xB987(_0x12F98, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.gameObject.addComponent(new Components.MouseInputComponent());
                if (!_0x12F98.invisibleTexture) {
                    _0x12F98.invisibleTexture = Util.Bitmap.create(this.gameObject.texture.baseTexture.width, this.gameObject.texture.baseTexture.height)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {}), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[882], _0xB90A[5], function _0x12DA4() {
                return this.powerup
            }), _0xC639(_0xB90A[13], _0xB90A[883], _0xB90A[5], function _0x12FFC(_0x130C4, _0x130AB) {
                this.powerupArr = _0x130C4;
                this.overlayArr = _0x130AB
            }), _0xC639(_0xB90A[13], _0xB90A[884], _0xB90A[5], function _0x13079(_0xC85F) {
                this.powerup = _0xC85F;
                var _0x13173 = this.powerupArr[_0xC85F - 1];
                this.powerupGO = new GameObject(this.gameObject.game, _0x13173.name + _0xB90A[885]);
                if (_0xC85F == _0x12FCA.horizontal || _0xC85F == _0x12FCA.vertical) {
                    var _0x116B1 = null;
                    if (_0xC85F == _0x12FCA.horizontal) {
                        if (_0x12F98.horizontalTextureCache.has(this.itemNr)) {
                            _0x116B1 = _0x12F98.horizontalTextureCache[_0xB90A[8]](this.itemNr)
                        } else {
                            _0x116B1 = Util.Bitmap.create(this.item.texture.width, this.item.texture.height);
                            _0x116B1.draw(this.item.texture.baseTexture.source, 0, 0);
                            _0x116B1.blendSourceIn();
                            var _0x121D3 = _0x13173.texture.baseTexture.source;
                            _0x116B1.draw(_0x121D3, -(_0x121D3.width - _0x116B1.width) / 2, -(_0x121D3.height - _0x116B1.height) / 2);
                            _0x12F98.horizontalTextureCache[_0xB90A[95]](this.itemNr, _0x116B1)
                        }
                    };
                    if (_0xC85F == _0x12FCA.vertical) {
                        if (_0x12F98.verticalTextureCache.has(this.itemNr)) {
                            _0x116B1 = _0x12F98.verticalTextureCache[_0xB90A[8]](this.itemNr)
                        } else {
                            _0x116B1 = Util.Bitmap.create(this.item.texture.width, this.item.texture.height);
                            _0x116B1.draw(this.item.texture.baseTexture.source, 0, 0);
                            _0x116B1.blendSourceIn();
                            var _0x121D3 = _0x13173.texture.baseTexture.source;
                            _0x116B1.draw(_0x121D3, -(_0x121D3.width - _0x116B1.width) / 2, -(_0x121D3.height - _0x116B1.height) / 2);
                            _0x12F98.verticalTextureCache[_0xB90A[95]](this.itemNr, _0x116B1)
                        }
                    };
                    this.powerupGO.loadTexture(_0x116B1);
                    this.powerupGO.position[_0xB90A[95]](this.item.x, this.item.y)
                } else {
                    this.powerupGO.loadTexture(_0x13173.texture)
                };
                this.gameObject.addChild(this.powerupGO);
                this.powerupGO.anchor[_0xB90A[95]](0.5, 0.5);
                if (this.powerup > 3) {
                    this.powerupGO.alpha = 0;
                    Components.Tweens.create(this.item).to(_0xC639(_0xB90A[45], 0), 400, null, true);
                    Components.Tweens.create(this.powerupGO).to(_0xC639(_0xB90A[45], 1), 400, null, true)
                };
                if (this.powerup == 3) {
                    this.powerupGO.scale[_0xB90A[95]](0.6, 0.6);
                    this.powerupGO.position[_0xB90A[95]](this.gameObject.texture.baseTexture.width / 4 - 3, this.gameObject.texture.baseTexture.height / 4 - 3);
                    this.item.position.x -= 2;
                    this.item.position.y -= 2
                }
            }), _0xC639(_0xB90A[13], _0xB90A[886], _0xB90A[5], function _0x13060(_0x13141) {
                this.overlayNr = _0x13141 - 1;
                for (var _0x13128 = 1; _0x13128 <= this.overlayNr; _0x13128++) {
                    var _0x1315A = this.overlayArr[_0x13128 - 1];
                    this.overlay = new GameObject(this.gameObject.game, _0x1315A.name + _0xB90A[885]);
                    this.gameObject.addChild(this.overlay);
                    this.overlay.loadTexture(_0x1315A.texture);
                    this.overlay.anchor[_0xB90A[95]](0.5, 0.5);
                    this.overlay.position[_0xB90A[95]](0, 0)
                };
                var _0x10BDA = new GameObject(this.gameObject.game, _0xB90A[260] + _0xB90A[885]);
                this.gameObject.addChild(_0x10BDA);
                _0x10BDA.loadTexture(GameObject.getObject(_0xB90A[260]).texture);
                _0x10BDA.anchor[_0xB90A[95]](0.5, 0.5);
                _0x10BDA.position[_0xB90A[95]](0, 0);
                this.lightGO = _0x10BDA
            }), _0xC639(_0xB90A[13], _0xB90A[887], _0xB90A[5], function _0x13015() {
                if (this.overlayNr != 0) {
                    this.overlayNr--;
                    Components.Tweens.create(this.gameObject.getChildAt(this.overlayNr)).to(_0xC639(_0xB90A[45], 0), 150, null, true);
                    if (this.overlayNr == 0) {
                        Components.Tweens.create(this.lightGO).to(_0xC639(_0xB90A[45], 0), 200, null, true);
                        this.events.throwEvent(_0xB90A[837])
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[888], _0xB90A[5], function _0x1302E(_0xEF88, _0x1310F) {
                this.item = _0xEF88;
                this.itemNr = _0x1310F;
                this.gameObject.addChild(_0xEF88);
                _0xEF88.position[_0xB90A[95]](0, -3);
                this.gameObject.loadTexture(_0x12F98.invisibleTexture)
            }), _0xC639(_0xB90A[13], _0xB90A[889], _0xB90A[5], function _0x13047(_0xD6A1, _0xD6BA) {
                this.matrixX = _0xD6A1;
                this.matrixY = _0xD6BA
            }), _0xC639(_0xB90A[13], _0xB90A[890], _0xB90A[5], function _0x13092(_0xDFE8) {
                var _0x1318C = _0xDFE8.matrixX;
                var _0x131A5 = _0xDFE8.matrixY;
                _0xDFE8.matrixX = this.matrixX;
                _0xDFE8.matrixY = this.matrixY;
                this.matrixX = _0x1318C;
                this.matrixY = _0x131A5
            }), _0xC639(_0xB90A[13], _0xB90A[741], _0xB90A[5], function _0x11071() {
                return this.item
            })], [_0xC639(_0xB90A[13], _0xB90A[726], _0xB90A[5], function _0x10E00() {
                _0x12F98.horizontalTextureCache.forEach(function(_0xE8FD, _0xD39A) {
                    _0xE8FD.destroy()
                });
                _0x12F98.verticalTextureCache.forEach(function(_0xE8FD, _0xD39A) {
                    _0xE8FD.destroy()
                });
                _0x12F98.horizontalTextureCache.clear();
                _0x12F98.verticalTextureCache.clear()
            })]);
            return _0x12F98
        }(Scene.Component);
        _0x12F98.horizontalTextureCache = new Map();
        _0x12F98.verticalTextureCache = new Map();
        Components.MatchThreeTile = _0x12F98;
        var _0x12FCA;
        (function(_0x12FCA) {
            _0x12FCA[_0x12FCA[_0xB90A[891]] = 0] = _0xB90A[891];
            _0x12FCA[_0x12FCA[_0xB90A[892]] = 1] = _0xB90A[892];
            _0x12FCA[_0x12FCA[_0xB90A[893]] = 2] = _0xB90A[893];
            _0x12FCA[_0x12FCA[_0xB90A[894]] = 3] = _0xB90A[894];
            _0x12FCA[_0x12FCA[_0xB90A[895]] = 4] = _0xB90A[895]
        })(_0x12FCA = Components.Powerup || (Components.Powerup = {}));
        var _0x12FB1;
        (function(_0x12FB1) {
            _0x12FB1[_0x12FB1[_0xB90A[896]] = 0] = _0xB90A[896];
            _0x12FB1[_0x12FB1[_0xB90A[897]] = 1] = _0xB90A[897];
            _0x12FB1[_0x12FB1[_0xB90A[898]] = 2] = _0xB90A[898];
            _0x12FB1[_0x12FB1[_0xB90A[899]] = 3] = _0xB90A[899];
            _0x12FB1[_0x12FB1[_0xB90A[900]] = 4] = _0xB90A[900];
            _0x12FB1[_0x12FB1[_0xB90A[901]] = 5] = _0xB90A[901];
            _0x12FB1[_0x12FB1[_0xB90A[902]] = 6] = _0xB90A[902]
        })(_0x12FB1 = Components.PowerCombination || (Components.PowerCombination = {}))
    }

    function _0xC0C1(Components) {
        var _0x131F0 = function(_0x1323B) {
            _0xBA1D(_0x131F0, _0x1323B);

            function _0x131F0() {
                var _0x13303;
                _0xB955(this, _0x131F0);
                _0x13303 = _0xB9A0(this, _getPrototypeOf(_0x131F0).apply(this, arguments));
                _0x13303.cachedParticleForTexture = new Map();
                _0x13303.particleTag = _0xB90A[830];
                _0x13303.breakTextures = true;
                _0x13303.targetFps = 60;
                _0x13303.objScale = 1;
                _0x13303.splitParticleTextures = [];
                _0x13303.fixedStep = 1;
                _0x13303.lastTime = 0;
                _0x13303.remainingTime = 0;
                _0x13303.activeParticles = [];
                _0x13303.onUpdate = function() {
                    var _0xCBFC = Date.now();
                    if (_0xCBFC - _0x13303.lastTime > 1000) {
                        _0x13303.lastTime = _0xCBFC;
                        return
                    };
                    var _0x12525 = _0xCBFC - _0x13303.lastTime;
                    _0x13303.remainingTime += _0x12525;
                    while (_0x13303.remainingTime >= _0x13303.fixedStep) {
                        _0x13303.remainingTime -= _0x13303.fixedStep;
                        for (var _0x1331C = 0; _0x1331C < _0x13303.activeParticles.length; _0x1331C++) {
                            var _0x132B8 = _0x13303.activeParticles[_0x1331C];
                            _0x132B8.update(_0x13303.fixedStep)
                        }
                    };
                    _0x13303.lastTime = _0xCBFC
                };
                return _0x13303
            }
            _0xB987(_0x131F0, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.fixedStep = 1000 / this.targetFps;
                this.mainCanvas = Util.Bitmap.create(800, 600);
                this.objectsForTextures = GameObject.getObjectsByTag(this.particleTag, true);
                if (this.breakTextures) {
                    for (var _0xC9D6 = 0; _0xC9D6 < this.objectsForTextures.length; _0xC9D6++) {
                        var _0x132EA = this.objectsForTextures[_0xC9D6];
                        var _0x101B2 = _0x13222.splitTexture(_0x132EA.texture.baseTexture.source);
                        this.splitParticleTextures.push(_0x101B2)
                    }
                } else {
                    for (var _0x132D1 = 0; _0x132D1 < this.objectsForTextures.length; _0x132D1++) {
                        var _0x116B1 = this.objectsForTextures[_0x132D1].texture;
                        this.particleTextureArray.push(_0x116B1)
                    }
                };
                this.events.addEventListener(_0xB90A[29], this.onUpdate)
            }), _0xC639(_0xB90A[13], _0xB90A[903], _0xB90A[5], function _0x1329F(_0xD6A1, _0xD6BA, _0x1334E, _0xE73B) {
                var _0x101B2 = this.splitParticleTextures[_0x1334E];
                var _0x10A31 = _0xD6A1;
                var _0x10A4A = _0xD6BA;
                if (_0xE73B) {
                    var _0xC85F = this.gameObject.toLocal(new PIXI.Point(_0xD6A1, _0xD6BA), this.gameObject.game.world);
                    _0x10A31 = _0xC85F.x;
                    _0x10A4A = _0xC85F.y
                };
                for (var _0x13335 = 0; _0x13335 < _0x101B2.length; _0x13335++) {
                    var _0x116B1 = _0x101B2[_0x13335];
                    var _0x132B8 = null;
                    if (_0x13335 == 0) {
                        _0x132B8 = this.getParticleFor(_0x116B1.texture);
                        _0x132B8.setPosition(_0x10A31 - _0x116B1.texture.width / 2, _0x10A4A - _0x116B1.texture.height / 2);
                        _0x132B8.setVelocity(-200 + Math.random() * 200 - 100, -200 + Math.random() * 100 - 50);
                        _0x132B8.setAngularVelocity(-360 + Math.random() * 200 - 100);
                        _0x132B8.setAngularAcceleration(-50 + Math.random() * 20 - 10);
                        _0x132B8.setLifetime(1000);
                        _0x132B8.setAcceleration(-150 + Math.random() * 100 - 50, 950 + Math.random() * 500 - 250)
                    };
                    if (_0x13335 == 1) {
                        _0x132B8 = this.getParticleFor(_0x116B1.texture);
                        _0x132B8.setPosition(_0x10A31 + _0x116B1.texture.width / 2, _0x10A4A - _0x116B1.texture.height / 2);
                        _0x132B8.setVelocity(200 + Math.random() * 200 - 100, -200 + Math.random() * 100 - 50);
                        _0x132B8.setAngularVelocity(360 + Math.random() * 200 - 100);
                        _0x132B8.setAngularAcceleration(50 + Math.random() * 20 - 10);
                        _0x132B8.setLifetime(1000);
                        _0x132B8.setAcceleration(150 + Math.random() * 100 - 50, 950 + Math.random() * 500 - 250)
                    };
                    if (_0x13335 == 2) {
                        _0x132B8 = this.getParticleFor(_0x116B1.texture);
                        _0x132B8.setPosition(_0x10A31 - _0x116B1.texture.width / 2, _0x10A4A + _0x116B1.texture.height / 2);
                        _0x132B8.setVelocity(-100 + Math.random() * 100 - 50, -400 + Math.random() * 100 - 50);
                        _0x132B8.setAngularVelocity(-360 + Math.random() * 200 - 100);
                        _0x132B8.setAngularAcceleration(-50 + Math.random() * 20 - 10);
                        _0x132B8.setLifetime(1000);
                        _0x132B8.setAcceleration(-150 + Math.random() * 100 - 50, 950 + Math.random() * 500 - 250)
                    };
                    if (_0x13335 == 3) {
                        _0x132B8 = this.getParticleFor(_0x116B1.texture);
                        _0x132B8.setPosition(_0x10A31 + _0x116B1.texture.width / 2, _0x10A4A + _0x116B1.texture.height / 2);
                        _0x132B8.setVelocity(200 + Math.random() * 200 - 100, -200 + Math.random() * 100 - 50);
                        _0x132B8.setAngularVelocity(360 + Math.random() * 200 - 100);
                        _0x132B8.setAngularAcceleration(50 + Math.random() * 20 - 10);
                        _0x132B8.setLifetime(1000);
                        _0x132B8.setAcceleration(150 + Math.random() * 100 - 50, 950 + Math.random() * 500 - 250)
                    };
                    _0x132B8.gameObject.scale[_0xB90A[95]](this.objScale, this.objScale);
                    _0x132B8.setAlphaOverLifetime(0);
                    this.activeParticles.push(_0x132B8)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[904], _0xB90A[5], function _0x13254(_0x116B1) {
                var _0x132B8 = null;
                if (this.cachedParticleForTexture.has(_0x116B1)) {
                    if (this.cachedParticleForTexture[_0xB90A[8]](_0x116B1).length == 0) {
                        _0x132B8 = this.newParticle(_0x116B1)
                    } else {
                        _0x132B8 = this.cachedParticleForTexture[_0xB90A[8]](_0x116B1).shift()
                    }
                } else {
                    _0x132B8 = this.newParticle(_0x116B1)
                };
                this.gameObject.addChild(_0x132B8.gameObject);
                return _0x132B8
            }), _0xC639(_0xB90A[13], _0xB90A[905], _0xB90A[5], function _0x1326D(_0x116B1) {
                var _0x132B8 = new _0x131D7(_0x116B1);
                _0x132B8.onDie.add(this.onParticleDie, this);
                this.gameObject.addChild(_0x132B8.gameObject);
                return _0x132B8
            }), _0xC639(_0xB90A[13], _0xB90A[906], _0xB90A[5], function _0x13286(_0x132B8) {
                this.activeParticles.splice(this.activeParticles.indexOf(_0x132B8), 1);
                if (this.cachedParticleForTexture.has(_0x132B8.originalTexture)) {
                    this.cachedParticleForTexture[_0xB90A[8]](_0x132B8.originalTexture).push(_0x132B8);
                    this.gameObject.game.world.addChild(_0x132B8.gameObject);
                    return
                };
                this.cachedParticleForTexture[_0xB90A[95]](_0x132B8.originalTexture, [_0x132B8])
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x131F0
        }(Scene.Component);
        Components.ParticleSystem = _0x131F0;
        var _0x131D7 = function() {
            function _0x131D7(_0x116B1) {
                _0xB955(this, _0x131D7);
                this.startAlpha = 1;
                this.alphaOverLifetime = 1;
                this.updating = false;
                this.gameObject = new GameObject(Core.game, _0xB90A[907]);
                this.gameObject.loadTexture(_0x116B1);
                this.gameObject.anchor[_0xB90A[95]](0.5, 0.5);
                this.originalTexture = _0x116B1;
                this.onDie = new Phaser.Signal();
                this.velocity = new PIXI.Point(0, 0);
                this.acceleration = new PIXI.Point(0, 0)
            }
            _0xB987(_0x131D7, [_0xC639(_0xB90A[13], _0xB90A[50], _0xB90A[5], function _0x13367() {
                this.updating = true
            }), _0xC639(_0xB90A[13], _0xB90A[908], _0xB90A[5], function _0x13461(_0x116B1) {
                this.gameObject.texture = _0x116B1
            }), _0xC639(_0xB90A[13], _0xB90A[909], _0xB90A[5], function _0x1342F(_0xD6A1, _0xD6BA) {
                this.gameObject.position[_0xB90A[95]](_0xD6A1, _0xD6BA)
            }), _0xC639(_0xB90A[13], _0xB90A[910], _0xB90A[5], function _0x133CB(_0xF852) {
                this.gameObject.angle = _0xF852
            }), _0xC639(_0xB90A[13], _0xB90A[911], _0xB90A[5], function _0x13399(_0x130F6) {
                this.gameObject.alpha = _0x130F6;
                this.startAlpha = _0x130F6
            }), _0xC639(_0xB90A[13], _0xB90A[298], _0xB90A[5], function _0xDE8A(_0xD6A1, _0xD6BA) {
                this.velocity[_0xB90A[95]](_0xD6A1, _0xD6BA)
            }), _0xC639(_0xB90A[13], _0xB90A[912], _0xB90A[5], function _0x13380(_0xD6A1, _0xD6BA) {
                this.acceleration[_0xB90A[95]](_0xD6A1, _0xD6BA)
            }), _0xC639(_0xB90A[13], _0xB90A[913], _0xB90A[5], function _0x133FD(_0xE033) {
                this.angularVelocity = _0xE033
            }), _0xC639(_0xB90A[13], _0xB90A[914], _0xB90A[5], function _0x133E4(_0x1347A) {
                this.angularAcceleration = _0x1347A
            }), _0xC639(_0xB90A[13], _0xB90A[915], _0xB90A[5], function _0x133B2(_0x130F6) {
                this.alphaOverLifetime = _0x130F6
            }), _0xC639(_0xB90A[13], _0xB90A[916], _0xB90A[5], function _0x13416(_0xCC92) {
                this.lifetime = _0xCC92;
                this.currentLife = 0;
                this.enable()
            }), _0xC639(_0xB90A[13], _0xB90A[917], _0xB90A[5], function _0xFB0E(_0xCBFC) {
                if (!this.updating) {
                    return
                };
                this.currentLife += _0xCBFC;
                if (this.currentLife > this.lifetime) {
                    _0xCBFC -= this.currentLife - this.lifetime;
                    this.currentLife = this.lifetime
                };
                var _0x12525 = _0xCBFC / 1000;
                this.velocity.x += this.acceleration.x * _0x12525;
                this.velocity.y += this.acceleration.y * _0x12525;
                this.angularVelocity += this.angularAcceleration * _0x12525;
                this.gameObject.alpha = Phaser.Math.linear(this.startAlpha, this.alphaOverLifetime, this.currentLife / this.lifetime);
                this.gameObject.x += this.velocity.x * _0x12525;
                this.gameObject.y += this.velocity.y * _0x12525;
                this.gameObject.angle += this.angularVelocity * _0x12525;
                if (this.currentLife == this.lifetime) {
                    this.updating = false;
                    this.onDie.dispatch(this)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[918], _0xB90A[5], function _0x13448(_0x118A5, _0x118BE) {})]);
            return _0x131D7
        }();
        Components.Particle = _0x131D7;
        var _0x131BE;
        (function(_0x131BE) {
            _0x131BE[_0x131BE[_0xB90A[919]] = 0] = _0xB90A[919];
            _0x131BE[_0x131BE[_0xB90A[920]] = 1] = _0xB90A[920];
            _0x131BE[_0x131BE[_0xB90A[652]] = 2] = _0xB90A[652];
            _0x131BE[_0x131BE[_0xB90A[921]] = 3] = _0xB90A[921]
        })(_0x131BE = Components.LimitType || (Components.LimitType = {}));
        var _0x13222 = function() {
            function _0x13222() {
                _0xB955(this, _0x13222)
            }
            _0xB987(_0x13222, null, [_0xC639(_0xB90A[13], _0xB90A[922], _0xB90A[5], function _0x134DE(_0x13687) {
                var _0x1140E = [];
                var _0x136A0 = _0x13222.splitTextures(_0x13687);
                var _0x136B9 = Util.Bitmap.create(_0x13687.width, _0x13687.height);
                for (var _0x1363C = 0; _0x1363C < _0x136A0.length; _0x1363C++) {
                    var _0x11A03 = _0x136A0[_0x1363C];
                    _0x136B9.clear();
                    _0x136B9.draw(_0x13687);
                    _0x136B9.blendDestinationIn();
                    var _0x1366E = _0x13222.findLimits(_0x11A03, _0x1363C % 2 == 0 ? _0x131BE.right : _0x131BE.left, _0x1363C > 1 ? _0x131BE.top : _0x131BE.bottom);
                    if (_0x1363C == 0) {
                        _0x13222.fillZone(_0x11A03, _0x136B9.ctx, _0xB90A[923], _0xC639(_0xB90A[43], 0, _0xB90A[44], 0), null);
                        var _0x13655 = Util.Bitmap.create(_0x1366E.x, _0x1366E.y);
                        _0x13655.draw(_0x136B9);
                        var _0x136D2 = new _0x13209(_0x13655, true);
                        _0x1140E.push(_0x136D2)
                    };
                    if (_0x1363C == 1) {
                        _0x13222.fillZone(_0x11A03, _0x136B9.ctx, _0xB90A[924], _0xC639(_0xB90A[43], _0x13687.width, _0xB90A[44], 0), null);
                        var _0x13655 = Util.Bitmap.create(_0x13687.width - _0x1366E.x, _0x1366E.y);
                        _0x13655.draw(_0x136B9, -_0x1366E.x);
                        var _0x136D2 = new _0x13209(_0x13655, true);
                        _0x1140E.push(_0x136D2)
                    };
                    if (_0x1363C == 2) {
                        _0x13222.fillZone(_0x11A03, _0x136B9.ctx, _0xB90A[925], _0xC639(_0xB90A[43], 0, _0xB90A[44], _0x136A0[2][0].y), _0xC639(_0xB90A[43], 0, _0xB90A[44], _0x13687.height));
                        var _0x13655 = Util.Bitmap.create(_0x1366E.x, _0x13687.height - _0x1366E.y);
                        _0x13655.draw(_0x136B9, 0, -_0x1366E.y);
                        var _0x136D2 = new _0x13209(_0x13655, true);
                        _0x1140E.push(_0x136D2)
                    };
                    if (_0x1363C == 3) {
                        _0x13222.fillZone(_0x11A03, _0x136B9.ctx, _0xB90A[926], _0xC639(_0xB90A[43], _0x13687.width, _0xB90A[44], _0x136A0[3][_0x136A0[3].length - 1].y), _0xC639(_0xB90A[43], _0x13687.width, _0xB90A[44], _0x13687.height));
                        var _0x13655 = Util.Bitmap.create(_0x13687.width - _0x1366E.x, _0x13687.height - _0x1366E.y);
                        _0x13655.draw(_0x136B9, -_0x1366E.x, -_0x1366E.y);
                        var _0x136D2 = new _0x13209(_0x13655, true);
                        _0x1140E.push(_0x136D2)
                    };
                    _0x136B9.blendSourceOver()
                };
                return _0x1140E
            }), _0xC639(_0xB90A[13], _0xB90A[927], _0xB90A[5], function _0x134C5(_0xCF67, _0x13623, _0x1360A) {
                var _0x1221E = _0x13623 == _0x131BE.left ? Number.MAX_SAFE_INTEGER : 0;
                var _0x121EC = _0x1360A == _0x131BE.top ? Number.MAX_SAFE_INTEGER : 0;
                for (var _0x135F1 = 0; _0x135F1 < _0xCF67.length; _0x135F1++) {
                    var _0x135BF = _0xCF67[_0x135F1];
                    if (_0x13623 == _0x131BE.left && _0x135BF.x < _0x1221E) {
                        _0x1221E = _0x135BF.x
                    };
                    if (_0x13623 == _0x131BE.right && _0x135BF.x > _0x1221E) {
                        _0x1221E = _0x135BF.x
                    };
                    if (_0x1360A == _0x131BE.bottom && _0x135BF.y > _0x121EC) {
                        _0x121EC = _0x135BF.y
                    };
                    if (_0x1360A == _0x131BE.top && _0x135BF.y < _0x121EC) {
                        _0x121EC = _0x135BF.y
                    }
                };
                return _0xC639(_0xB90A[43], _0x1221E, _0xB90A[44], _0x121EC)
            }), _0xC639(_0xB90A[13], _0xB90A[928], _0xB90A[5], function _0x134F7(_0x13687) {
                var _0xCF67 = [];
                _0xCF67.push(_0xC639(_0xB90A[43], _0x13687.width / 2 - _0x13687.width / 10 + ~~(Math.random() * _0x13687.width / 5), _0xB90A[44], 0));
                _0xCF67.push(_0xC639(_0xB90A[43], _0x13687.width / 2 - _0x13687.width / 10 + ~~(Math.random() * _0x13687.width / 5), _0xB90A[44], _0x13687.height));
                _0x13222.expandPoints(_0xCF67, 1 / 10 * _0x13687.width, 1 / 10 * _0x13687.height, 10);
                _0x13222.expandPoints(_0xCF67, 1 / 40 * _0x13687.width, 1 / 40 * _0x13687.height, 5);
                _0x13222.expandPoints(_0xCF67, 1 / 40 * _0x13687.width, 1 / 40 * _0x13687.height, 2);
                var _0x1371D = [];
                _0x1371D.push(_0xC639(_0xB90A[43], 0, _0xB90A[44], _0x13687.height / 2 - _0x13687.height / 10 + ~~(Math.random() * _0x13687.height / 5)));
                _0x1371D.push(_0xC639(_0xB90A[43], _0x13687.width, _0xB90A[44], _0x13687.height / 2 - _0x13687.height / 10 + ~~(Math.random() * _0x13687.height / 5)));
                _0x13222.expandPoints(_0x1371D, 1 / 10 * _0x13687.width, 1 / 10 * _0x13687.height, 10);
                _0x13222.expandPoints(_0x1371D, 1 / 40 * _0x13687.width, 1 / 40 * _0x13687.height, 5);
                _0x13222.expandPoints(_0x1371D, 1 / 40 * _0x13687.width, 1 / 40 * _0x13687.height, 2);
                var _0x13704 = ~~(_0x1371D.length / 2);
                var _0x1374F = ~~(_0xCF67.length / 2);
                var _0x10180 = _0xCF67.slice(0, _0x1374F + 1).concat(_0x1371D.slice(0, _0x13704).reverse());
                var _0x13736 = _0xCF67.slice(0, _0x1374F + 1).concat(_0x1371D.slice(_0x13704, _0x1371D.length));
                var _0x136EB = _0x1371D.slice(0, _0x13704).concat(_0xCF67.slice(_0x1374F, _0xCF67.length));
                var _0x100D1 = _0x1371D.slice(_0x13704, _0x1371D.length + 1).reverse().concat(_0xCF67.slice(_0x1374F, _0xCF67.length + 1));
                return [_0x10180, _0x13736, _0x136EB, _0x100D1]
            }), _0xC639(_0xB90A[13], _0xB90A[929], _0xB90A[5], function _0x134AC(_0x135D8, _0x109E6, _0x106DF, _0xE3E9, _0x135A6) {
                _0x109E6.beginPath();
                _0x109E6.moveTo(_0xE3E9.x, _0xE3E9.y);
                for (var _0x1358D = 0; _0x1358D < _0x135D8.length; _0x1358D++) {
                    var _0x135BF = _0x135D8[_0x1358D];
                    _0x109E6.lineTo(_0x135BF.x, _0x135BF.y)
                };
                if (_0x135A6) {
                    _0x109E6.lineTo(_0x135A6.x, _0x135A6.y)
                };
                _0x109E6.closePath();
                _0x109E6.fillStyle = _0x106DF;
                _0x109E6.fill()
            }), _0xC639(_0xB90A[13], _0xB90A[930], _0xB90A[5], function _0x13493(_0x13529) {
                var _0x1355B = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var _0x13574 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var _0x13542 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;
                _0x13542 += 2;
                for (var _0xC9D6 = 0; _0xC9D6 < _0x13529.length - 1; _0xC9D6 += _0x13542 - 1) {
                    var _0x12606 = _0x13529[_0xC9D6];
                    var _0x1261F = _0x13529[_0xC9D6 + 1];
                    for (var _0x13510 = 1; _0x13510 < _0x13542 - 1; _0x13510++) {
                        var _0xD6A1 = ~~(Phaser.Math.linear(_0x12606.x, _0x1261F.x, _0x13510 / _0x13542) - _0x1355B + Math.random() * _0x1355B * 2);
                        if (_0xD6A1 < 0) {
                            _0xD6A1 = 0
                        };
                        var _0xD6BA = ~~(Phaser.Math.linear(_0x12606.y, _0x1261F.y, _0x13510 / _0x13542) - _0x13574 + Math.random() * _0x13574 * 2);
                        if (_0xD6BA < 0) {
                            _0xD6BA = 0
                        };
                        _0x13529.splice(_0xC9D6 + _0x13510, 0, _0xC639(_0xB90A[43], _0xD6A1, _0xB90A[44], _0xD6BA))
                    }
                }
            })]);
            return _0x13222
        }();
        Components.TextureSplitter = _0x13222;
        var _0x13209 = function() {
            function _0x13209(_0x116B1, _0x13768) {
                _0xB955(this, _0x13209);
                this.texture = _0x116B1;
                if (_0x13768) {
                    this.trimAlpha()
                }
            }
            _0xB987(_0x13209, [_0xC639(_0xB90A[13], _0xB90A[931], _0xB90A[5], function _0x13768() {
                var _0xCD8C = this.texture.ctx.getImageData(0, 0, this.texture.width, this.texture.height);
                this.offset = new Phaser.Rectangle(0, 0, 0, 0);
                for (var _0x13781 = 0; _0x13781 < this.texture.height; _0x13781++) {
                    var _0xD5F2 = _0x13781 * this.texture.width * 4;
                    var _0x13830 = false;
                    for (var _0xC9D6 = 0; _0xC9D6 < this.texture.width; _0xC9D6++) {
                        var _0xD016 = _0xCD8C[_0xD5F2 + _0xC9D6 * 4 + 3];
                        if (_0xD016 != 0) {
                            _0x13830 = true;
                            this.offset.y = _0x13781;
                            break
                        }
                    };
                    if (_0x13830) {
                        break
                    }
                };
                for (var _0x1379A = 0; _0x1379A < this.texture.width; _0x1379A++) {
                    var _0x13830 = false;
                    for (var _0x137E5 = 0; _0x137E5 < this.texture.height; _0x137E5++) {
                        var _0xD016 = _0xCD8C[_0x137E5 * this.texture.width * 4 + _0x1379A * 4 + 3];
                        if (_0xD016 != 0) {
                            _0x13830 = true;
                            this.offset.x = _0x1379A;
                            break
                        }
                    };
                    if (_0x13830) {
                        break
                    }
                };
                for (var _0x137B3 = this.texture.width - 1; _0x137B3 >= 0; _0x137B3--) {
                    var _0x13830 = false;
                    for (var _0x137FE = 0; _0x137FE < this.texture.height; _0x137FE++) {
                        var _0xD016 = _0xCD8C[_0x137FE * this.texture.width * 4 + _0x137B3 * 4 + 3];
                        if (_0xD016 != 0) {
                            _0x13830 = true;
                            this.offset.width = this.texture.width - _0x137B3 - 1;
                            break
                        }
                    };
                    if (_0x13830) {
                        break
                    }
                };
                for (var _0x137CC = this.texture.height - 1; _0x137CC >= 0; _0x137CC--) {
                    var _0xD5F2 = _0x137CC * this.texture.width * 4;
                    var _0x13830 = false;
                    for (var _0x13817 = 0; _0x13817 < this.texture.width; _0x13817++) {
                        var _0xD016 = _0xCD8C[_0xD5F2 + _0x13817 * 4 + 3];
                        if (_0xD016 != 0) {
                            _0x13830 = true;
                            this.offset.height = this.texture.height - _0x137CC - 1;
                            break
                        }
                    };
                    if (_0x13830) {
                        break
                    }
                };
                if (this.offset.x == 0 && this.offset.y == 0 && this.offset.width == 0 && this.offset.height == 0) {
                    return
                };
                var _0xD223 = Util.Bitmap.create(this.texture.width, this.texture.height);
                _0xD223.draw(this.texture);
                this.texture.blendSourceOver();
                this.texture.resize(this.texture.width - this.offset.x - this.offset.width, this.texture.height - this.offset.height - this.offset.y);
                this.texture.clear();
                this.texture.draw(_0xD223, -this.offset.x, -this.offset.y);
                _0xD223.destroy()
            })]);
            return _0x13209
        }();
        Components.TexturePiece = _0x13209
    }

    function _0xC0DA(Components) {
        var _0x13849 = function(_0x13862) {
            _0xBA1D(_0x13849, _0x13862);

            function _0x13849() {
                var _0x13894;
                _0xB955(this, _0x13849);
                _0x13894 = _0xB9A0(this, _getPrototypeOf(_0x13849).apply(this, arguments));
                _0x13894.unlock = false;
                _0x13894.onWatchAd = function() {
                    _0x13894.locked.disableInput();
                    _0x13849.unlockedItems[_0xB90A[95]](_0x13894.watchAdButton, true);
                    _0x13894.gameObject.game.time.events.add(_0x13894.delayAfterWatchAd, function() {
                        Components.Tweens.create(_0x13894.locked).to(_0xC639(_0xB90A[45], 0), 400, null, true);
                        Components.Tweens.create(_0x13894.unlocked).to(_0xC639(_0xB90A[45], 1), 400, null, true).onComplete.addOnce(function() {
                            _0x13894.events.throwEvent(_0x13894.glitzEvent);
                            if (_0x13894.unlockSoundName) {
                                Components.DevUtils.playSound(_0x13894.unlockSoundName)
                            };
                            _0x13894.unlocked.enableInput()
                        })
                    }, _0xB9B9(_0x13894))
                };
                return _0x13894
            }
            _0xB987(_0x13849, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x138C6 = this;
                this.checkGlobalDisable();
                this.locked = GameObject.getObject(this.watchAdButton);
                this.unlocked = GameObject.getObject(this.unlockedItem);
                if (_0x13849.unlockedItems.has(this.watchAdButton)) {
                    this.unlock = true
                };
                if (this.unlock || _0x13849.globalDisable) {
                    this.locked.visible = false;
                    this.locked.disableInput()
                } else {
                    this.unlocked.alpha = 0;
                    this.unlocked.disableInput();
                    this.locked.addButtonPressedCallback(this.onWatchAd)
                };
                this.events.addEventListener(_0xB90A[101], function() {
                    _0x138C6.locked.x = _0x138C6.unlocked.x;
                    _0x138C6.locked.y = _0x138C6.unlocked.y;
                    GameObject.getObject(_0xB90A[932]).x = _0x138C6.unlocked.x;
                    GameObject.getObject(_0xB90A[932]).y = _0x138C6.unlocked.y;
                    _0x138C6.locked.width = _0x138C6.unlocked.width;
                    _0x138C6.locked.height = _0x138C6.unlocked.height
                })
            }), _0xC639(_0xB90A[13], _0xB90A[933], _0xB90A[5], function _0x1387B() {
                var _0x138AD = true;
                for (var _0xC6E8 = 0; _0xC6E8 < GameData.rawData.publisher.ads_positions.length; _0xC6E8++) {
                    var _0xCE22 = GameData.rawData.publisher.ads_positions[_0xC6E8];
                    if (_0xCE22 == this.adPosition) {
                        _0x138AD = false;
                        break
                    }
                };
                _0x13849.globalDisable = GameData.rawData.publisher.whitelist == 1 || _0x138AD;
                if (window.location.hostname == _0xB90A[934]) {
                    _0x13849.globalDisable = false
                }
            })]);
            return _0x13849
        }(Scene.Component);
        _0x13849.globalDisable = false;
        _0x13849.unlockedItems = new Map();
        Components.AdUnlock = _0x13849
    }

    function _0xC0F3(Components) {
        var _0x138DF = function(_0x138F8) {
            _0xBA1D(_0x138DF, _0x138F8);

            function _0x138DF() {
                var _0x1392A;
                _0xB955(this, _0x138DF);
                _0x1392A = _0xB9A0(this, _getPrototypeOf(_0x138DF).apply(this, arguments));
                _0x1392A.tweenOnArrows = true;
                _0x1392A.vericalAnimation = false;
                _0x1392A.randomIndex = false;
                _0x1392A.animDuration = 400;
                _0x1392A.index = 0;
                _0x1392A.onRightClick = function() {
                    var _0xC7FB = _0x1392A.container.children[_0x1392A.index];
                    Components.Tweens.create(_0xC7FB, true, false).to(_0xC639(_0xB90A[45], 0), _0x1392A.animDuration, null, true);
                    _0x1392A.changeIndex(true);
                    _0xC7FB = _0x1392A.container.children[_0x1392A.index];
                    Components.Tweens.create(_0xC7FB, true, false).to(_0xC639(_0xB90A[45], 1), _0x1392A.animDuration, null, true)
                };
                _0x1392A.onLeftClick = function() {
                    var _0xC7FB = _0x1392A.container.children[_0x1392A.index];
                    Components.Tweens.create(_0xC7FB, true, false).to(_0xC639(_0xB90A[45], 0), _0x1392A.animDuration, null, true);
                    _0x1392A.changeIndex();
                    _0xC7FB = _0x1392A.container.children[_0x1392A.index];
                    Components.Tweens.create(_0xC7FB, true, false).to(_0xC639(_0xB90A[45], 1), _0x1392A.animDuration, null, true)
                };
                return _0x1392A
            }
            _0xB987(_0x138DF, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (this.tweenOnArrows) {
                    if (!this.vericalAnimation) {
                        Components.Tweens.create(this.rightArrow).to(_0xC639(_0xB90A[43], this.rightArrow.x + 10), 1000, null, true, 0, -1, true);
                        Components.Tweens.create(this.leftArrow).to(_0xC639(_0xB90A[43], this.leftArrow.x - 10), 1000, null, true, 0, -1, true)
                    } else {
                        Components.Tweens.create(this.rightArrow).to(_0xC639(_0xB90A[44], this.rightArrow.y - 10), 1000, null, true, 0, -1, true);
                        Components.Tweens.create(this.leftArrow).to(_0xC639(_0xB90A[44], this.leftArrow.y + 10), 1000, null, true, 0, -1, true)
                    }
                };
                for (var _0xC6E8 = 1; _0xC6E8 < this.container.children.length; _0xC6E8++) {
                    var _0xCE22 = this.container.children[_0xC6E8];
                    _0xCE22.alpha = 0
                };
                this.rightArrow.inputEvents.addButtonPressed(this.onRightClick);
                this.leftArrow.inputEvents.addButtonPressed(this.onLeftClick)
            }), _0xC639(_0xB90A[13], _0xB90A[790], _0xB90A[5], function _0x119D1() {
                var _0xC684 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                if (this.randomIndex) {
                    var _0x13911 = this.gameObject.game.rnd.integerInRange(0, this.container.children.length - 1);
                    while (_0x13911 == this.index) {
                        _0x13911 = this.gameObject.game.rnd.integerInRange(0, this.container.children.length - 1)
                    };
                    this.index = _0x13911
                } else {
                    if (_0xC684) {
                        this.index++;
                        if (this.index > this.container.children.length - 1) {
                            this.index = 0
                        }
                    } else {
                        this.index--;
                        if (this.index < 0) {
                            this.index = this.container.children.length - 1
                        }
                    }
                }
            })]);
            return _0x138DF
        }(Scene.Component);
        Components.NavigateInContainer = _0x138DF
    }

    function _0xC10C(Components) {
        var _0x13943 = function(_0x1395C) {
            _0xBA1D(_0x13943, _0x1395C);

            function _0x13943() {
                var _0x13975;
                _0xB955(this, _0x13943);
                _0x13975 = _0xB9A0(this, _getPrototypeOf(_0x13943).apply(this, arguments));
                _0x13975.loop = false;
                _0x13975.onEnableEvents = function() {
                    if (_0x13975.startEvent) {
                        _0x13975.events.addEventListener(_0x13975.startEvent, _0x13975.onStart)
                    };
                    if (_0x13975.onMouseDown) {
                        _0x13975.gameObject.game.input.onDown.add(_0x13975.onStart)
                    };
                    if (_0x13975.onMouseDownObject) {
                        _0x13975.gameObject.inputEvents.addInputDown(_0x13975.onStart)
                    }
                };
                _0x13975.onDisableEvents = function() {
                    if (_0x13975.startEvent) {
                        _0x13975.events.addEventListener(_0x13975.startEvent, _0x13975.onStart)
                    };
                    if (_0x13975.onMouseDown) {
                        _0x13975.gameObject.game.input.onDown.add(_0x13975.onStart)
                    };
                    if (_0x13975.onMouseDownObject) {
                        _0x13975.gameObject.inputEvents.addInputDown(_0x13975.onStart)
                    }
                };
                _0x13975.onStart = function() {
                    if (_0x13975.startTimeMs.length == 0 && _0x13975.startTimeFrames.length == 0) {
                        Components.DevUtils.playSound(_0x13975.sound, _0x13975.loop)
                    } else {
                        if (_0x13975.startTimeMs.length > 0) {
                            _0x13975.startTimeMs.split(_0xB90A[572]).forEach(function(_0xF5E1) {
                                var _0x117C4 = Number(_0xF5E1);
                                _0x13975.gameObject.game.time.events.add(_0x117C4, function() {
                                    Components.DevUtils.playSound(_0x13975.sound, _0x13975.loop)
                                }, _0xB9B9(_0x13975))
                            })
                        };
                        if (_0x13975.startTimeFrames.length > 0) {
                            _0x13975.startTimeFrames.split(_0xB90A[572]).forEach(function(_0xF5E1) {
                                var _0x117C4 = Number(_0xF5E1) * (1000 / 60);
                                _0x13975.gameObject.game.time.events.add(_0x117C4, function() {
                                    Components.DevUtils.playSound(_0x13975.sound, _0x13975.loop)
                                }, _0xB9B9(_0x13975))
                            })
                        }
                    }
                };
                return _0x13975
            }
            _0xB987(_0x13943, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (this.enableEvent == _0xB90A[27] || !this.enableEvent) {
                    this.onEnableEvents()
                } else {
                    this.events.addEventListener(this.enableEvent, this.onEnableEvents)
                };
                if (this.disableEvent != _0xB90A[27] && this.disableEvent) {
                    this.events.addEventListener(this.disableEvent, this.onDisableEvents)
                }
            })]);
            return _0x13943
        }(Scene.Component);
        Components.PlaySoundOnEvent = _0x13943
    }

    function _0xC125(Components) {
        var _0x1398E = function(_0x139A7) {
            _0xBA1D(_0x1398E, _0x139A7);

            function _0x1398E() {
                var _0x139C0;
                _0xB955(this, _0x1398E);
                _0x139C0 = _0xB9A0(this, _getPrototypeOf(_0x1398E).apply(this, arguments));
                _0x139C0.showForLanguage = _0xB90A[27];
                _0x139C0.ignoreRebrand = false;
                _0x139C0.init2 = function() {
                    if (!_0x1398E.initOnce) {
                        var _0x139F2 = _0x1398E.objectsForLanguage.length != 0 ? _0x1398E.objectsForLanguage : _0x1398E.emptyObjects;
                        for (var _0x139D9 = 0; _0x139D9 < _0x1398E.allObjects.length; _0x139D9++) {
                            var _0x13A0B = _0x1398E.allObjects[_0x139D9];
                            _0x13A0B.gameObject.visible = false;
                            if (_0x13A0B.gameObject.getComponent(Components.AnimationComponent)) {
                                _0x13A0B.gameObject.getComponent(Components.AnimationComponent).isRebrand = true
                            };
                            if (_0x139F2.indexOf(_0x13A0B) != -1) {
                                _0x13A0B.gameObject.visible = true;
                                if (_0x13A0B.gameObject.getComponent(Components.AnimationComponent)) {
                                    _0x13A0B.gameObject.getComponent(Components.AnimationComponent).isRebrand = false
                                };
                                if (!_0x13A0B.ignoreRebrand) {
                                    if (Util.GameData.rawData.publisher.rebrand == _0x13A0B.isRebrand) {
                                        _0x13A0B.gameObject.visible = true
                                    } else {
                                        _0x13A0B.gameObject.visible = false;
                                        if (_0x13A0B.gameObject.getComponent(Components.AnimationComponent)) {
                                            _0x13A0B.gameObject.getComponent(Components.AnimationComponent).isRebrand = true
                                        }
                                    }
                                }
                            }
                        };
                        _0x1398E.initOnce = true
                    }
                };
                return _0x139C0
            }
            _0xB987(_0x1398E, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                _0x1398E.initOnce = false;
                this.isRebrand = false;
                this.ignoreRebrand = true;
                _0x1398E.allObjects.push(this);
                if (Components.DevUtils.getGameLanguage() == this.showForLanguage) {
                    _0x1398E.objectsForLanguage.push(this)
                };
                if (this.showForLanguage == _0xB90A[27]) {
                    _0x1398E.emptyObjects.push(this)
                };
                this.events.addEventListener(Scene.Unit.POST_UNIT_LOADED, this.init2)
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                _get(_getPrototypeOf(_0x1398E.prototype), _0xB90A[24], this).call(this);
                _0x1398E.allObjects = [];
                _0x1398E.objectsForLanguage = [];
                _0x1398E.emptyObjects = [];
                _0x1398E.initOnce = false
            })]);
            return _0x1398E
        }(Scene.Component);
        _0x1398E.objectsForLanguage = [];
        _0x1398E.emptyObjects = [];
        _0x1398E.allObjects = [];
        Components.RebrandComponent = _0x1398E
    }

    function _0xC13E(Components) {
        var _0x13A24 = function(_0x13A3D) {
            _0xBA1D(_0x13A24, _0x13A3D);

            function _0x13A24() {
                var _0x13A56;
                _0xB955(this, _0x13A24);
                _0x13A56 = _0xB9A0(this, _getPrototypeOf(_0x13A24).apply(this, arguments));
                _0x13A56.replacingObjectName = _0xB90A[27];
                _0x13A56.samePosition = false;
                _0x13A56.rotationAnimation = false;
                _0x13A56.wasOver = false;
                _0x13A56.Update = function() {
                    if (_0x13A56.wasOver) {
                        if (_0x13A56.gameObject.input.enabled == false) {
                            _0x13A56.wasOver = false;
                            _0x13A56.onMouseOut();
                            return
                        };
                        if (!_0x13A56.gameObject.input.checkPointerOver(_0x13A56.gameObject.game.input.activePointer)) {
                            _0x13A56.wasOver = false;
                            _0x13A56.onMouseOut();
                            return
                        }
                    }
                };
                _0x13A56.onMouseOver = function() {
                    if (_0x13A56.rotationAnimation) {
                        _0x13A56.gameObject.game.add.tween(_0x13A56.object).to(_0xC639(_0xB90A[45], 1, _0xB90A[46], 30), 100, null, true)
                    } else {
                        _0x13A56.gameObject.game.add.tween(_0x13A56.object).to(_0xC639(_0xB90A[45], 1), 100, null, true)
                    };
                    _0x13A56.wasOver = true
                };
                _0x13A56.onMouseOut = function() {
                    if (_0x13A56.rotationAnimation) {
                        _0x13A56.gameObject.game.add.tween(_0x13A56.object).to(_0xC639(_0xB90A[45], 0, _0xB90A[46], 0), 100, null, true)
                    } else {
                        _0x13A56.gameObject.game.add.tween(_0x13A56.object).to(_0xC639(_0xB90A[45], 0), 100, null, true)
                    };
                    _0x13A56.wasOver = false
                };
                return _0x13A56
            }
            _0xB987(_0x13A24, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.gameObject.inputEvents.addInputOver(this.onMouseOver);
                this.gameObject.inputEvents.addInputDown(this.onMouseOver);
                this.gameObject.inputEvents.addInputOut(this.onMouseOut);
                this.gameObject.inputEvents.addInputUp(this.onMouseOut);
                this.object = GameObject.getObject(this.replacingObjectName);
                this.object.alpha = 0;
                this.gameObject.getComponent(Components.ButtonComponent).scale = false;
                this.events.addEventListener(_0xB90A[29], this.Update)
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.events.onInputOver.remove(this.onMouseOver, this);
                this.gameObject.events.onInputOut.remove(this.onMouseOut, this);
                _get(_getPrototypeOf(_0x13A24.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x13A24
        }(Scene.Component);
        Components.ReplaceImageComponent = _0x13A24
    }

    function _0xC157(Components) {
        var _0x13A6F = function(_0x13A88) {
            _0xBA1D(_0x13A6F, _0x13A88);

            function _0x13A6F() {
                _0xB955(this, _0x13A6F);
                return _0xB9A0(this, _getPrototypeOf(_0x13A6F).apply(this, arguments))
            }
            _0xB987(_0x13A6F, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x13AA1 = Util.Globals.getFromGlobals(this.globalsName);
                var _0xC9BD = Util.Globals.getFromGlobals(this.globalsName + _0xB90A[935]);
                if (_0x13AA1) {
                    if (_0xB93C(_0x13AA1, Util.Bitmap)) {
                        var _0x13ABA = GameObject.getObject(_0xB90A[936]);
                        var _0x13AD3 = Components.DevUtils.getBounds(_0x13ABA);
                        this.gameObject.loadTexture(_0x13AA1);
                        if (_0xC9BD) {
                            var _0xD79B = _0x13AD3.height / _0xC9BD[1];
                            this.gameObject.width = _0xC9BD[0] * _0xD79B;
                            this.gameObject.height = _0xC9BD[1] * _0xD79B;
                            this.gameObject.anchor[_0xB90A[95]](0.5, 0.5);
                            this.gameObject.x = _0x13AD3.centerX;
                            this.gameObject.y = _0x13AD3.centerY;
                            trace(this.gameObject.x, this.gameObject.y, this.gameObject.anchor)
                        };
                        for (var _0xC6E8 = 0; _0xC6E8 < this.gameObject.parent.children.length; _0xC6E8++) {
                            var _0xF163 = this.gameObject.parent.children[_0xC6E8];
                            if (_0xF163 != this.gameObject && !_0xF163.getComponent(_0x13A6F)) {
                                _0xF163.visible = false
                            }
                        }
                    };
                    if (_0xB93C(_0x13AA1, GameObject)) {
                        for (var _0xC6E8 = 0; _0xC6E8 < this.gameObject.parent.children.length; _0xC6E8++) {
                            var _0xF163 = this.gameObject.parent.children[_0xC6E8];
                            if (_0xF163 == this.gameObject) {
                                continue
                            };
                            _0xF163.visible = false;
                            _0x13AA1.x = _0x13AA1.y = 0
                        };
                        this.gameObject.addChildInit(_0x13AA1, 0, false)
                    }
                } else {
                    trace(_0xB90A[937] + this.globalsName + _0xB90A[938], _0xB90A[589])
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x13A6F
        }(Scene.Component);
        Components.ReplaceObjectComponent = _0x13A6F
    }

    function _0xC170(Components) {
        var _0x13AEC = function(_0x13B05) {
            _0xBA1D(_0x13AEC, _0x13B05);

            function _0x13AEC() {
                var _0x13BB4;
                _0xB955(this, _0x13AEC);
                _0x13BB4 = _0xB9A0(this, _getPrototypeOf(_0x13AEC).apply(this, arguments));
                _0x13BB4.ignoreTag = _0xB90A[939];
                _0x13BB4.snapshot = false;
                _0x13BB4.saveBody = function() {
                    var _0xC7FB = GameObject.getObject(_0x13BB4.toSaveObject);
                    if (_0xC7FB) {
                        if (_0x13BB4.snapshot) {
                            _0x13BB4.takeSnapshot(_0xC7FB)
                        } else {
                            _0xC7FB.shouldBeDestroyed = false;
                            Util.Globals.addToGlobals(_0x13BB4.globalsName, _0xC7FB)
                        }
                    } else {
                        trace(_0xB90A[937] + _0x13BB4.toSaveObject + _0xB90A[938], _0xB90A[589])
                    }
                };
                return _0x13BB4
            }
            _0xB987(_0x13AEC, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (this.event) {
                    this.events.addEventListener(this.event, this.saveBody)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743() {
                this.saveBody()
            }), _0xC639(_0xB90A[13], _0xB90A[940], _0xB90A[5], function _0x13B37(_0xC7FB) {
                var _0xCD8C = null;
                var _0x13BCD = Components.DevUtils.getBounds(_0xC7FB, true, true);
                if (Util.Globals.getFromGlobals(this.globalsName)) {
                    _0xCD8C = Util.Globals.getFromGlobals(this.globalsName);
                    _0xCD8C.clear()
                } else {
                    if (_0x13BCD) {
                        _0xCD8C = Util.Bitmap.create(_0x13BCD.width, _0x13BCD.height)
                    } else {
                        _0xCD8C = Util.Bitmap.create(Core.Main.gameWidth, Core.Main.gameHeight)
                    };
                    Util.Globals.addToGlobals(this.globalsName, _0xCD8C)
                };
                if (_0x13BCD) {
                    Util.Globals.addToGlobals(this.globalsName + _0xB90A[935], [_0x13BCD.width, _0x13BCD.height]);
                    var _0xC9BD = _0x13BCD;
                    var _0x13BE6 = _0xC9BD.x;
                    var _0x13BFF = _0xC9BD.y;
                    _0xCD8C = Components.DevUtils.takeSnapshot(_0xC7FB, _0xC9BD.width, _0xC9BD.height, _0x13BE6, _0x13BFF, _0xCD8C)
                } else {
                    _0xCD8C = Components.DevUtils.takeSnapshot(_0xC7FB, Core.Main.gameWidth, Core.Main.gameHeight, 0, 0, _0xCD8C)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[941], _0xB90A[5], function _0x13B1E(_0xCD8C, _0x13B50, _0x118A5, _0x118BE, _0x13B9B) {
                if (_0x13B50.children.length > 0) {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x13B50.children.length; _0xC6E8++) {
                        var _0xF163 = _0x13B50.children[_0xC6E8];
                        if (_0xF163.tags[0] == this.ignoreTag) {
                            continue
                        };
                        if (_0x13B50.visible && _0x13B50.alpha > 0 && _0x13B50.scale.x > 0 && _0x13B50.scale.y > 0) {
                            this.drawContainer(_0xCD8C, _0xF163, _0x118A5 * _0xF163.scale.x, _0x118BE * _0xF163.scale.y, _0x13B9B + _0xF163.angle)
                        }
                    }
                } else {
                    if (_0x13B50.visible && _0x13B50.alpha > 0 && _0x13B50.scale.x > 0 && _0x13B50.scale.y > 0) {
                        var _0x13B69 = _0x13B50.scale.x;
                        var _0x13B82 = _0x13B50.scale.y;
                        var _0xFD02 = _0x13B50.angle;
                        _0x13B50.scale[_0xB90A[95]](_0x118A5, _0x118BE);
                        _0x13B50.angle = _0x13B9B;
                        _0xCD8C.draw(_0x13B50, _0x13B50.world.x, _0x13B50.world.y, null, null, null, false);
                        _0x13B50.angle = _0xFD02;
                        _0x13B50.scale[_0xB90A[95]](_0x13B69, _0x13B82)
                    }
                }
            })]);
            return _0x13AEC
        }(Scene.Component);
        Components.SaveBodyComponent = _0x13AEC
    }

    function _0xC189(Components) {
        var _0x13C18 = function(_0x13C31) {
            _0xBA1D(_0x13C18, _0x13C31);

            function _0x13C18() {
                var _0x13C4A;
                _0xB955(this, _0x13C18);
                _0x13C4A = _0xB9A0(this, _getPrototypeOf(_0x13C18).apply(this, arguments));
                _0x13C4A.visible = true;
                _0x13C4A.inputEnabled = true;
                _0x13C4A.load = function() {
                    if (_0x13C4A.x || _0x13C4A.x == 0) {
                        _0x13C4A.gameObject.x = Number(_0x13C4A.x)
                    };
                    if (_0x13C4A.y || _0x13C4A.y == 0) {
                        _0x13C4A.gameObject.y = Number(_0x13C4A.y)
                    };
                    if (_0x13C4A.scaleX || _0x13C4A.scaleX == 0) {
                        _0x13C4A.gameObject.scale.x = Number(_0x13C4A.scaleX)
                    };
                    if (_0x13C4A.scaleY || _0x13C4A.scaleY == 0) {
                        _0x13C4A.gameObject.scale.y = Number(_0x13C4A.scaleY)
                    };
                    if (_0x13C4A.angle || _0x13C4A.angle == 0) {
                        _0x13C4A.gameObject.angle = Number(_0x13C4A.angle)
                    };
                    if (_0x13C4A.alpha || _0x13C4A.alpha == 0) {
                        _0x13C4A.gameObject.alpha = Number(_0x13C4A.alpha)
                    };
                    _0x13C4A.gameObject.visible = _0x13C4A.visible;
                    if (!_0x13C4A.inputEnabled) {
                        _0x13C4A.gameObject.disableInput()
                    }
                };
                return _0x13C4A
            }
            _0xB987(_0x13C18, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0xB90A[28], this.load)
            })]);
            return _0x13C18
        }(Scene.Component);
        Components.SetInitialValues = _0x13C18
    }

    function _0xC1A2(Components) {
        var _0x13C63 = function(_0x13C7C) {
            _0xBA1D(_0x13C63, _0x13C7C);

            function _0x13C63() {
                var _0x13D12;
                _0xB955(this, _0x13C63);
                _0x13D12 = _0xB9A0(this, _getPrototypeOf(_0x13C63).apply(this, arguments));
                _0x13D12.isColorButton = false;
                _0x13D12.onRemoveGlow = function(_0xCF35) {
                    var _0x13CF9 = _0xCF35.getData(_0xB90A[672]);
                    var _0x13CE0 = _0x13C63.glows[_0xB90A[8]](_0x13CF9);
                    _0x13D12.removeGlow(_0x13CE0)
                };
                return _0x13D12
            }
            _0xB987(_0x13C63, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0x13C63.REMOVE_TYPE_GLOW, this.onRemoveGlow);
                if (this.gameObject.getComponent(Components.ColorButtonComponent)) {
                    this.isColorButton = true
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (this.gameObject.tags[1] == _0xB90A[142] && this.gameObject.getComponent(Components.CategoryButtonComponent) != null) {
                    this.focusGlowOn(this.gameObject)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743() {
                this.focusGlowOn(this.gameObject)
            }), _0xC639(_0xB90A[13], _0xB90A[942], _0xB90A[5], function _0x13C95(_0xC7FB) {
                if (!this.isColorButton) {
                    this.events.throwEvent(Components.DrawingComponent.DEACTIVATE_ALL);
                    this.events.throwEvent(Components.MouseCursorComponent.HIDE_CURSOR);
                    _0x13C63.lastPressed = this.gameObject.name;
                    if (_0x13C63.categoryMap.has(_0x13C63.lastPressed)) {
                        var _0xD3CC = _0x13C63.categoryMap[_0xB90A[8]](_0x13C63.lastPressed);
                        _0xD3CC.onButtonPressed(_0xD3CC)
                    }
                } else {
                    if (_0x13C63.lastPressed != _0xB90A[27]) {
                        _0x13C63.categoryMap[_0xB90A[95]](_0x13C63.lastPressed, this.gameObject)
                    }
                };
                var _0x13CF9 = _0xC7FB.tags[0];
                var _0x13CE0 = _0x13C63.glows[_0xB90A[8]](_0x13CF9);
                if (_0x13CE0) {
                    this.removeGlow(_0x13CE0);
                    this.setGlow(_0x13CE0, _0xC7FB)
                } else {
                    _0x13CE0 = GameObject.getObjectsByTag(_0xC7FB.tags[0]);
                    this.setGlow(_0x13CE0, _0xC7FB);
                    _0x13C63.glowsVisible[_0xB90A[95]](_0x13CF9, true);
                    _0x13C63.glows[_0xB90A[95]](_0x13CF9, _0x13CE0)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[943], _0xB90A[5], function _0x13CC7(_0xD0F7, _0xC7FB) {
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xC652 = _0xD0F7[_0xC6E8];
                    if (_0xC652.tags[1] == _0xC7FB.tags[1]) {
                        if (_0xC652.getComponent(Components.GlowComponent)) {
                            _0xC652.getComponent(Components.GlowComponent).staticGlow()
                        };
                        _0xC652.disableInput()
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[944], _0xB90A[5], function _0x13CAE(_0xD0F7) {
                if (!_0xD0F7) {
                    return
                };
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xC652 = _0xD0F7[_0xC6E8];
                    if (_0xC652.getComponent(Components.GlowComponent)) {
                        _0xC652.getComponent(Components.GlowComponent).removeStaticGlow()
                    };
                    _0xC652.enableInput()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                _0x13C63.categoryMap.clear();
                if (_0x13C63.glows.size != 0) {
                    Util.Util.destroyMap(_0x13C63.glows)
                };
                if (_0x13C63.glowsVisible.size != 0) {
                    Util.Util.destroyMap(_0x13C63.glowsVisible)
                }
            })]);
            return _0x13C63
        }(Scene.Component);
        _0x13C63.categoryMap = new Map();
        _0x13C63.lastPressed = _0xB90A[27];
        _0x13C63.REMOVE_TYPE_GLOW = _0xB90A[945];
        _0x13C63.glows = new Map();
        _0x13C63.glowsVisible = new Map();
        Components.TypeGlow = _0x13C63
    }

    function _0xC1BB(Components) {
        var _0x13D2B = function(_0x13D44) {
            _0xBA1D(_0x13D2B, _0x13D44);

            function _0x13D2B() {
                var _0x13D5D;
                _0xB955(this, _0x13D2B);
                _0x13D5D = _0xB9A0(this, _getPrototypeOf(_0x13D2B).apply(this, arguments));
                _0x13D5D.isTransition = false;
                _0x13D5D.changeAspect = function() {
                    var _0x13D8F = Core.game.canvas.width / _0x13D5D.initialWidth;
                    var _0x13D76 = Core.game.canvas.height / _0x13D5D.initialHeight;
                    var _0xD8F9;
                    if (_0x13D8F > _0x13D76) {
                        _0x13D5D.gameObject.scale[_0xB90A[95]](_0x13D8F, _0x13D8F);
                        _0xD8F9 = _0x13D8F
                    } else {
                        _0x13D5D.gameObject.scale[_0xB90A[95]](_0x13D76, _0x13D76);
                        _0xD8F9 = _0x13D76
                    };
                    _0x13D5D.gameObject.x = Core.game.canvas.width / 2;
                    if (_0x13D5D.isTransition) {
                        _0x13D5D.gameObject.y = Core.game.canvas.height / 2
                    } else {
                        _0x13D5D.gameObject.y = Core.game.canvas.height - _0x13D5D.gameObject.height / 2
                    }
                };
                return _0x13D5D
            }
            _0xB987(_0x13D2B, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initialWidth = Core.Main.gameWidth;
                this.initialHeight = Core.Main.gameHeight;
                this.gameObject.game.scale.onSizeChange.add(this.changeAspect);

                if (Components.SessionData.lostLives >= 5) {
                    Components.SessionData.lostLives = 4;
                }
                this.changeAspect()
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.scale.onSizeChange.remove(this.changeAspect);
                _get(_getPrototypeOf(_0x13D2B.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x13D2B
        }(Scene.Component);
        Components.BackgroundAnchor = _0x13D2B
    }

    function _0xC1D4(Components) {
        var _0x13DA8 = function(_0x13DDA) {
            _0xBA1D(_0x13DA8, _0x13DDA);

            function _0x13DA8() {
                var _0x13E25;
                _0xB955(this, _0x13DA8);
                _0x13E25 = _0xB9A0(this, _getPrototypeOf(_0x13DA8).apply(this, arguments));
                _0x13E25.changeAspect = function() {
                    var _0x13D8F = Core.game.canvas.width / Core.Main.gameWidth;
                    var _0x13E3E = Core.game.canvas.height / Core.Main.gameHeight;
                    var _0xD8F9 = _0x13E3E > _0x13D8F ? _0x13D8F : _0x13E3E;
                    if (_0xD8F9 < 0.8 || _0xD8F9 > 1.2) {
                        _0x13E25.events.throwEvent(_0x13DA8.SHOW_BLURRY)
                    } else {
                        _0x13E25.events.throwEvent(_0x13DA8.HIDE_BLURRY)
                    }
                };
                _0x13E25.showBlur = function() {
                    _0x13E25.gameObject.loadTexture(_0x13E25.blurryImage)
                };
                _0x13E25.hideBlur = function() {
                    _0x13E25.gameObject.loadTexture(_0x13E25.originalImage)
                };
                _0x13E25.mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
                _0x13E25.shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];
                return _0x13E25
            }
            _0xB987(_0x13DA8, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0xD5F2 = this.gameObject.texture.baseTexture.source.width;
                var _0xD5C0 = this.gameObject.texture.baseTexture.source.height;
                this.originalImage = Util.Bitmap.create(_0xD5F2, _0xD5C0);
                this.blurryImage = Util.Bitmap.create(_0xD5F2, _0xD5C0);
                this.originalImage.draw(this.gameObject.texture.baseTexture.source);
                this.blurryImage.draw(this.gameObject.texture.baseTexture.source);
                this.blurImage(15);
                this.events.addEventListener(_0x13DA8.SHOW_BLURRY, this.showBlur);
                this.events.addEventListener(_0x13DA8.HIDE_BLURRY, this.hideBlur);
                if (!this.fromBody) {
                    this.gameObject.game.scale.onSizeChange.add(this.changeAspect);
                    this.changeAspect()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.scale.onSizeChange.remove(this.changeAspect);
                _get(_getPrototypeOf(_0x13DA8.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[946], _0xB90A[5], function _0x13DF3(_0x13E57) {
                this.blurryImage.draw(this.originalImage, 0, 0);
                this.stackBlurCanvasRGBA(this.blurryImage.canvas, 0, 0, this.originalImage.width, this.originalImage.height, _0x13E57)
            }), _0xC639(_0xB90A[13], _0xB90A[947], _0xB90A[5], function _0x13E0C(_0x1099B, _0x1415E, _0x14177, _0xE92F, _0xE916, _0x13E57) {
                var _0x13F06 = _0x1099B.getContext(_0xB90A[684]);
                var _0x13F9C;
                _0x13F9C = _0x13F06.getImageData(_0x1415E, _0x14177, _0xE92F, _0xE916);
                var _0x109CD = _0x13F9C.data;
                var _0xD6A1, _0xD6BA, _0xC6E8, _0xC85F, _0x141DB, _0x141C2, _0x141F4, _0x14064, _0x13F6A, _0x13EED, _0x13EA2, _0x1404B, _0x13F51, _0x13ED4, _0x13E89, _0x14032, _0x13F38, _0x13EBB, _0x13E70, _0x14019, _0x14000, _0x13FE7, _0x13FCE, _0x14096;
                var _0x13F1F = _0x13E57 + _0x13E57 + 1;
                var _0x14190 = _0xE92F << 2;
                var _0x141A9 = _0xE92F - 1;
                var _0x13F83 = _0xE916 - 1;
                var _0x1407D = _0x13E57 + 1;
                var _0x14145 = _0x1407D * (_0x1407D + 1) / 2;
                var _0x1412C = new _0x13DC1();
                var _0x140C8 = _0x1412C;
                for (_0xC6E8 = 1; _0xC6E8 < _0x13F1F; _0xC6E8++) {
                    _0x140C8 = _0x140C8.next = new _0x13DC1();
                    if (_0xC6E8 == _0x1407D) {
                        var _0x140E1 = _0x140C8
                    }
                };
                _0x140C8.next = _0x1412C;
                var _0x140FA = null;
                var _0x14113 = null;
                _0x141F4 = _0x141C2 = 0;
                var _0x13FB5 = this.mul_table[_0x13E57];
                var _0x140AF = this.shg_table[_0x13E57];
                for (_0xD6BA = 0; _0xD6BA < _0xE916; _0xD6BA++) {
                    _0x14032 = _0x13F38 = _0x13EBB = _0x13E70 = _0x14064 = _0x13F6A = _0x13EED = _0x13EA2 = 0;
                    _0x1404B = _0x1407D * (_0x14019 = _0x109CD[_0x141C2]);
                    _0x13F51 = _0x1407D * (_0x14000 = _0x109CD[_0x141C2 + 1]);
                    _0x13ED4 = _0x1407D * (_0x13FE7 = _0x109CD[_0x141C2 + 2]);
                    _0x13E89 = _0x1407D * (_0x13FCE = _0x109CD[_0x141C2 + 3]);
                    _0x14064 += _0x14145 * _0x14019;
                    _0x13F6A += _0x14145 * _0x14000;
                    _0x13EED += _0x14145 * _0x13FE7;
                    _0x13EA2 += _0x14145 * _0x13FCE;
                    _0x140C8 = _0x1412C;
                    for (_0xC6E8 = 0; _0xC6E8 < _0x1407D; _0xC6E8++) {
                        _0x140C8.r = _0x14019;
                        _0x140C8.g = _0x14000;
                        _0x140C8.b = _0x13FE7;
                        _0x140C8.a = _0x13FCE;
                        _0x140C8 = _0x140C8.next
                    };
                    for (_0xC6E8 = 1; _0xC6E8 < _0x1407D; _0xC6E8++) {
                        _0xC85F = _0x141C2 + ((_0x141A9 < _0xC6E8 ? _0x141A9 : _0xC6E8) << 2);
                        _0x14064 += (_0x140C8.r = _0x14019 = _0x109CD[_0xC85F]) * (_0x14096 = _0x1407D - _0xC6E8);
                        _0x13F6A += (_0x140C8.g = _0x14000 = _0x109CD[_0xC85F + 1]) * _0x14096;
                        _0x13EED += (_0x140C8.b = _0x13FE7 = _0x109CD[_0xC85F + 2]) * _0x14096;
                        _0x13EA2 += (_0x140C8.a = _0x13FCE = _0x109CD[_0xC85F + 3]) * _0x14096;
                        _0x14032 += _0x14019;
                        _0x13F38 += _0x14000;
                        _0x13EBB += _0x13FE7;
                        _0x13E70 += _0x13FCE;
                        _0x140C8 = _0x140C8.next
                    };
                    _0x140FA = _0x1412C;
                    _0x14113 = _0x140E1;
                    for (_0xD6A1 = 0; _0xD6A1 < _0xE92F; _0xD6A1++) {
                        _0x109CD[_0x141C2 + 3] = _0x13FCE = _0x13EA2 * _0x13FB5 >> _0x140AF;
                        if (_0x13FCE != 0) {
                            _0x13FCE = 255 / _0x13FCE;
                            _0x109CD[_0x141C2] = (_0x14064 * _0x13FB5 >> _0x140AF) * _0x13FCE;
                            _0x109CD[_0x141C2 + 1] = (_0x13F6A * _0x13FB5 >> _0x140AF) * _0x13FCE;
                            _0x109CD[_0x141C2 + 2] = (_0x13EED * _0x13FB5 >> _0x140AF) * _0x13FCE
                        } else {
                            _0x109CD[_0x141C2] = _0x109CD[_0x141C2 + 1] = _0x109CD[_0x141C2 + 2] = 0
                        };
                        _0x14064 -= _0x1404B;
                        _0x13F6A -= _0x13F51;
                        _0x13EED -= _0x13ED4;
                        _0x13EA2 -= _0x13E89;
                        _0x1404B -= _0x140FA.r;
                        _0x13F51 -= _0x140FA.g;
                        _0x13ED4 -= _0x140FA.b;
                        _0x13E89 -= _0x140FA.a;
                        _0xC85F = _0x141F4 + ((_0xC85F = _0xD6A1 + _0x13E57 + 1) < _0x141A9 ? _0xC85F : _0x141A9) << 2;
                        _0x14032 += _0x140FA.r = _0x109CD[_0xC85F];
                        _0x13F38 += _0x140FA.g = _0x109CD[_0xC85F + 1];
                        _0x13EBB += _0x140FA.b = _0x109CD[_0xC85F + 2];
                        _0x13E70 += _0x140FA.a = _0x109CD[_0xC85F + 3];
                        _0x14064 += _0x14032;
                        _0x13F6A += _0x13F38;
                        _0x13EED += _0x13EBB;
                        _0x13EA2 += _0x13E70;
                        _0x140FA = _0x140FA.next;
                        _0x1404B += _0x14019 = _0x14113.r;
                        _0x13F51 += _0x14000 = _0x14113.g;
                        _0x13ED4 += _0x13FE7 = _0x14113.b;
                        _0x13E89 += _0x13FCE = _0x14113.a;
                        _0x14032 -= _0x14019;
                        _0x13F38 -= _0x14000;
                        _0x13EBB -= _0x13FE7;
                        _0x13E70 -= _0x13FCE;
                        _0x14113 = _0x14113.next;
                        _0x141C2 += 4
                    };
                    _0x141F4 += _0xE92F
                };
                for (_0xD6A1 = 0; _0xD6A1 < _0xE92F; _0xD6A1++) {
                    _0x13F38 = _0x13EBB = _0x13E70 = _0x14032 = _0x13F6A = _0x13EED = _0x13EA2 = _0x14064 = 0;
                    _0x141C2 = _0xD6A1 << 2;
                    _0x1404B = _0x1407D * (_0x14019 = _0x109CD[_0x141C2]);
                    _0x13F51 = _0x1407D * (_0x14000 = _0x109CD[_0x141C2 + 1]);
                    _0x13ED4 = _0x1407D * (_0x13FE7 = _0x109CD[_0x141C2 + 2]);
                    _0x13E89 = _0x1407D * (_0x13FCE = _0x109CD[_0x141C2 + 3]);
                    _0x14064 += _0x14145 * _0x14019;
                    _0x13F6A += _0x14145 * _0x14000;
                    _0x13EED += _0x14145 * _0x13FE7;
                    _0x13EA2 += _0x14145 * _0x13FCE;
                    _0x140C8 = _0x1412C;
                    for (_0xC6E8 = 0; _0xC6E8 < _0x1407D; _0xC6E8++) {
                        _0x140C8.r = _0x14019;
                        _0x140C8.g = _0x14000;
                        _0x140C8.b = _0x13FE7;
                        _0x140C8.a = _0x13FCE;
                        _0x140C8 = _0x140C8.next
                    };
                    _0x141DB = _0xE92F;
                    for (_0xC6E8 = 1; _0xC6E8 <= _0x13E57; _0xC6E8++) {
                        _0x141C2 = _0x141DB + _0xD6A1 << 2;
                        _0x14064 += (_0x140C8.r = _0x14019 = _0x109CD[_0x141C2]) * (_0x14096 = _0x1407D - _0xC6E8);
                        _0x13F6A += (_0x140C8.g = _0x14000 = _0x109CD[_0x141C2 + 1]) * _0x14096;
                        _0x13EED += (_0x140C8.b = _0x13FE7 = _0x109CD[_0x141C2 + 2]) * _0x14096;
                        _0x13EA2 += (_0x140C8.a = _0x13FCE = _0x109CD[_0x141C2 + 3]) * _0x14096;
                        _0x14032 += _0x14019;
                        _0x13F38 += _0x14000;
                        _0x13EBB += _0x13FE7;
                        _0x13E70 += _0x13FCE;
                        _0x140C8 = _0x140C8.next;
                        if (_0xC6E8 < _0x13F83) {
                            _0x141DB += _0xE92F
                        }
                    };
                    _0x141C2 = _0xD6A1;
                    _0x140FA = _0x1412C;
                    _0x14113 = _0x140E1;
                    for (_0xD6BA = 0; _0xD6BA < _0xE916; _0xD6BA++) {
                        _0xC85F = _0x141C2 << 2;
                        _0x109CD[_0xC85F + 3] = _0x13FCE = _0x13EA2 * _0x13FB5 >> _0x140AF;
                        if (_0x13FCE > 0) {
                            _0x13FCE = 255 / _0x13FCE;
                            _0x109CD[_0xC85F] = (_0x14064 * _0x13FB5 >> _0x140AF) * _0x13FCE;
                            _0x109CD[_0xC85F + 1] = (_0x13F6A * _0x13FB5 >> _0x140AF) * _0x13FCE;
                            _0x109CD[_0xC85F + 2] = (_0x13EED * _0x13FB5 >> _0x140AF) * _0x13FCE
                        } else {
                            _0x109CD[_0xC85F] = _0x109CD[_0xC85F + 1] = _0x109CD[_0xC85F + 2] = 0
                        };
                        _0x14064 -= _0x1404B;
                        _0x13F6A -= _0x13F51;
                        _0x13EED -= _0x13ED4;
                        _0x13EA2 -= _0x13E89;
                        _0x1404B -= _0x140FA.r;
                        _0x13F51 -= _0x140FA.g;
                        _0x13ED4 -= _0x140FA.b;
                        _0x13E89 -= _0x140FA.a;
                        _0xC85F = _0xD6A1 + ((_0xC85F = _0xD6BA + _0x1407D) < _0x13F83 ? _0xC85F : _0x13F83) * _0xE92F << 2;
                        _0x14064 += _0x14032 += _0x140FA.r = _0x109CD[_0xC85F];
                        _0x13F6A += _0x13F38 += _0x140FA.g = _0x109CD[_0xC85F + 1];
                        _0x13EED += _0x13EBB += _0x140FA.b = _0x109CD[_0xC85F + 2];
                        _0x13EA2 += _0x13E70 += _0x140FA.a = _0x109CD[_0xC85F + 3];
                        _0x140FA = _0x140FA.next;
                        _0x1404B += _0x14019 = _0x14113.r;
                        _0x13F51 += _0x14000 = _0x14113.g;
                        _0x13ED4 += _0x13FE7 = _0x14113.b;
                        _0x13E89 += _0x13FCE = _0x14113.a;
                        _0x14032 -= _0x14019;
                        _0x13F38 -= _0x14000;
                        _0x13EBB -= _0x13FE7;
                        _0x13E70 -= _0x13FCE;
                        _0x14113 = _0x14113.next;
                        _0x141C2 += _0xE92F
                    }
                };
                _0x13F06.putImageData(_0x13F9C, _0x1415E, _0x14177)
            })]);
            return _0x13DA8
        }(Scene.Component);
        _0x13DA8.SHOW_BLURRY = _0xB90A[948];
        _0x13DA8.HIDE_BLURRY = _0xB90A[949];
        Components.BlurFilter = _0x13DA8;
        var _0x13DC1 = function _0x13DC1() {
            _0xB955(this, _0x13DC1);
            this.r = 0;
            this.g = 0;
            this.b = 0;
            this.a = 0;
            this.next = null
        };
        Components.BlurStack = _0x13DC1
    }

    function _0xC1ED(Components) {
        var _0x1420D = function(_0x14226) {
            _0xBA1D(_0x1420D, _0x14226);

            function _0x1420D() {
                var _0x1423F;
                _0xB955(this, _0x1420D);
                _0x1423F = _0xB9A0(this, _getPrototypeOf(_0x1420D).apply(this, arguments));
                _0x1423F.fromFreeSpace = true;
                _0x1423F.snapToBottom = true;
                _0x1423F.handleScale = function() {
                    var _0x118A5 = Core.Main.game.canvas.width / _0x1423F.initialWidth;
                    var _0x118BE = Core.Main.game.canvas.height / _0x1423F.initialHeight;
                    var _0x14258 = _0x1423F.bodyWidth * (_0x1423F.sizeDif / 100);
                    if (_0x1423F.verticalPanel) {
                        if (_0x1423F.bodyWidth * _0x118BE > _0x1423F.freeSpace + _0x14258) {
                            _0x118BE = _0x1423F.freeSpace / (_0x1423F.bodyWidth - _0x14258);
                            if (_0x1423F.bodyHeight * _0x118BE > Core.Main.game.canvas.height) {
                                _0x118BE = Core.Main.game.canvas.height / _0x1423F.initialHeight
                            };
                            if (_0x1423F.snapToBottom) {
                                _0x1423F.gameObject.y = Core.Main.game.canvas.height - _0x1423F.bodyHeight * _0x118BE / 2
                            } else {
                                _0x1423F.gameObject.y = Core.Main.game.canvas.height / 2
                            };
                            _0x1423F.gameObject.x = _0x1423F.freeSpace / 2
                        } else {
                            if (_0x1423F.snapToBottom) {
                                _0x1423F.gameObject.y = _0x1423F.initialY * _0x118BE
                            } else {
                                _0x1423F.gameObject.y = Core.Main.game.canvas.height / 2
                            };
                            _0x1423F.gameObject.x = _0x1423F.freeSpace / 2
                        };
                        _0x1423F.gameObject.scale[_0xB90A[95]](_0x118BE, _0x118BE)
                    } else {
                        if (_0x1423F.bodyWidth > Core.Main.game.canvas.width + _0x14258) {
                            _0x118BE = Core.Main.game.canvas.width / (_0x1423F.bodyWidth - _0x14258);
                            if (_0x1423F.bodyHeight * _0x118BE > Core.Main.game.canvas.height) {
                                _0x118BE = Core.Main.game.canvas.height / _0x1423F.initialHeight
                            };
                            if (_0x1423F.snapToBottom) {
                                _0x1423F.gameObject.y = _0x1423F.freeSpace - _0x1423F.bodyHeight * _0x118BE / 2
                            } else {
                                _0x1423F.gameObject.y = _0x1423F.freeSpace / 2
                            };
                            _0x1423F.gameObject.x = Core.Main.game.canvas.width / 2
                        } else {
                            if (_0x1423F.snapToBottom) {
                                _0x1423F.gameObject.y = _0x1423F.initialY * _0x118BE
                            } else {
                                _0x1423F.gameObject.y = _0x1423F.freeSpace / 2
                            };
                            _0x1423F.gameObject.x = Core.Main.game.canvas.width / 2
                        };
                        _0x1423F.gameObject.x = Core.Main.game.canvas.width / 2;
                        if (_0x1423F.bodyHeight * _0x118BE > _0x1423F.freeSpace) {
                            _0x118BE = _0x1423F.freeSpace / _0x1423F.bodyHeight;
                            _0x1423F.gameObject.y = _0x1423F.initialY * _0x118BE
                        };
                        _0x1423F.gameObject.scale[_0xB90A[95]](_0x118BE, _0x118BE)
                    };
                    if (_0x118BE < 0.7 || _0x118BE > 1.3) {
                        _0x1423F.events.throwEvent(_0xB90A[948])
                    } else {
                        _0x1423F.events.throwEvent(_0xB90A[949])
                    };
                    _0x1423F.events.throwEvent(_0xB90A[253], Util.Util.createEventData([
                        [_0xB90A[950], Core.Main.game.canvas.height - _0x1423F.gameObject.y - 180 * _0x118BE]
                    ]))
                };
                _0x1423F.handlePosAndScale = function(_0xCF35) {
                    if (_0xCF35 && _0x1423F.fromFreeSpace) {
                        _0x1423F.freeSpace = Number(_0xCF35.getData(Components.Panel.FREE_SPACE)[0]);
                        _0x1423F.verticalPanel = _0xCF35.getData(Components.Panel.FREE_SPACE)[1]
                    } else {
                        _0x1423F.freeSpace = Core.Main.game.canvas.width;
                        _0x1423F.verticalPanel = true
                    };
                    _0x1423F.handleScale()
                };
                _0x1423F.findWidhtAndHeight = function() {
                    var _0x1366E = Components.DevUtils.getBounds(_0x1423F.gameObject);
                    _0x1423F.bodyWidth = _0x1366E.width;
                    _0x1423F.bodyHeight = _0x1366E.height
                };
                _0x1423F.calculateBorders = function() {
                    var _0x1428A = 0,
                        _0x142D5 = 0,
                        _0x142A3 = 0,
                        _0x142BC = 0;
                    var _0x1366E = [800, 600, 0, 0];
                    var _0x13AA1 = _0x1423F.gameObject.getChildAt(0);
                    for (var _0x14271 = 0; _0x14271 < _0x13AA1.children.length; _0x14271++) {
                        var _0xF163 = _0x13AA1.getChildAt(_0x14271);
                        _0x1428A = _0xF163.position.x + _0xF163.width / 2;
                        _0x142D5 = _0xF163.position.x - _0xF163.width / 2;
                        _0x142A3 = _0xF163.position.y - _0xF163.height / 2;
                        _0x142BC = _0xF163.position.y + _0xF163.height / 2;
                        _0x1366E = [Math.min(_0x1366E[0], _0x142A3), Math.min(_0x1366E[1], _0x142D5), Math.max(_0x1366E[2], _0x142BC), Math.max(_0x1366E[3], _0x1428A)]
                    };
                    return _0x1366E
                };
                return _0x1423F
            }
            _0xB987(_0x1420D, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initialWidth = Core.Main.gameWidth;
                this.initialHeight = Core.Main.gameHeight;
                this.initialY = this.gameObject.y;
                this.findWidhtAndHeight();
                if (this.fromFreeSpace) {
                    this.events.addEventListener(Components.Panel.FREE_SPACE, this.handlePosAndScale)
                } else {
                    this.gameObject.game.scale.onSizeChange.add(this.handlePosAndScale);
                    this.handlePosAndScale()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.scale.onSizeChange.remove(this.handlePosAndScale);
                _get(_getPrototypeOf(_0x1420D.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x1420D
        }(Scene.Component);
        Components.BodyAnchor = _0x1420D
    }

    function _0xC206(Components) {
        var _0x142EE = function(_0x14307) {
            _0xBA1D(_0x142EE, _0x14307);

            function _0x142EE() {
                var _0x14320;
                _0xB955(this, _0x142EE);
                _0x14320 = _0xB9A0(this, _getPrototypeOf(_0x142EE).apply(this, arguments));
                _0x14320.XsnapLeft = false;
                _0x14320.XsnapRight = false;
                _0x14320.XsnapMiddle = false;
                _0x14320.Xmargin = 0;
                _0x14320.YsnapUp = false;
                _0x14320.YsnapDown = false;
                _0x14320.YsnapMiddle = false;
                _0x14320.Ymargin = 0;
                _0x14320.objectName = _0xB90A[27];
                _0x14320.listenToFreeSpace = true;
                _0x14320.handleXpos = function(_0xCF35) {
                    var _0x14339 = Number(_0xCF35.getData(Components.Panel.FREE_SPACE)[0]);
                    _0x14320.gameObject.x = _0x14339 / 2
                };
                _0x14320.changeAspect = function() {
                    var _0xE92F, _0xE916;
                    if (_0x14320.gameObject.data.actualSize) {
                        _0xE92F = _0x14320.gameObject.data.actualSize.width;
                        _0xE916 = _0x14320.gameObject.data.actualSize.height
                    } else {
                        _0xE92F = _0x14320.gameObject.width;
                        _0xE916 = _0x14320.gameObject.height
                    };
                    if (_0x14320.XsnapLeft) {
                        if (_0x14320.relatedObject) {
                            _0x14320.gameObject.x = _0x14320.relatedObject.x - _0x14320.relatedObject.width / 2 - _0x14320.gameObject.width / 2
                        } else {
                            _0x14320.gameObject.x = _0xE92F / 2 + _0x14320.Xmargin
                        }
                    } else {
                        if (_0x14320.XsnapMiddle) {
                            if (_0x14320.relatedObject) {
                                _0x14320.gameObject.x = _0x14320.relatedObject.x
                            } else {
                                _0x14320.gameObject.x = Core.game.width / 2
                            }
                        } else {
                            if (_0x14320.XsnapRight) {
                                if (_0x14320.relatedObject) {
                                    _0x14320.gameObject.x = _0x14320.relatedObject.width / 2 + _0x14320.relatedObject.x + _0x14320.gameObject.width / 2
                                } else {
                                    _0x14320.gameObject.x = Core.game.width - _0xE92F / 2 - _0x14320.Xmargin
                                }
                            }
                        }
                    };
                    if (_0x14320.YsnapUp) {
                        if (_0x14320.relatedObject) {
                            _0x14320.gameObject.y = _0x14320.relatedObject.y - _0x14320.relatedObject.height / 2 - _0x14320.gameObject.height / 2
                        } else {
                            _0x14320.gameObject.y = _0xE916 / 2 + _0x14320.Ymargin
                        }
                    } else {
                        if (_0x14320.YsnapMiddle) {
                            if (_0x14320.relatedObject) {
                                _0x14320.gameObject.y = _0x14320.relatedObject.y
                            } else {
                                _0x14320.gameObject.y = Core.game.height / 2
                            }
                        } else {
                            if (_0x14320.YsnapDown) {
                                if (_0x14320.relatedObject) {
                                    _0x14320.gameObject.y = _0x14320.relatedObject.y + _0x14320.relatedObject.height / 2 + _0x14320.gameObject.height / 2
                                } else {
                                    _0x14320.gameObject.y = Core.game.height - _0xE916 / 2 - _0x14320.Ymargin
                                }
                            }
                        }
                    }
                };
                return _0x14320
            }
            _0xB987(_0x142EE, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (this.objectName != _0xB90A[27]) {
                    this.relatedObject = GameObject.getObject(this.objectName)
                };
                this.gameObject.game.scale.onSizeChange.add(this.changeAspect);
                if (this.listenToFreeSpace) {
                    this.events.addEventListener(Components.Panel.FREE_SPACE, this.handleXpos)
                };
                this.changeAspect()
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.scale.onSizeChange.remove(this.changeAspect);
                _get(_getPrototypeOf(_0x142EE.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x142EE
        }(Scene.Component);
        Components.MobileAnchor = _0x142EE
    }

    function _0xC21F(Components) {
        var _0x14352 = function(_0x1436B) {
            _0xBA1D(_0x14352, _0x1436B);

            function _0x14352() {
                var _0x1439D;
                _0xB955(this, _0x14352);
                _0x1439D = _0xB9A0(this, _getPrototypeOf(_0x14352).apply(this, arguments));
                _0x1439D.fitWidth = false;
                _0x1439D.fitHeight = false;
                _0x1439D.scaleUp = false;
                _0x1439D.keepRatio = false;
                _0x1439D.paddingWidth = 0;
                _0x1439D.marginWidth = 0;
                _0x1439D.paddingHeight = 0;
                _0x1439D.marginHeight = 0;
                _0x1439D.objectName = _0xB90A[27];
                _0x1439D.sizeFromChildren = false;
                _0x1439D.calculateBorders = function() {
                    var _0x1428A = 0,
                        _0x142D5 = 0,
                        _0x142A3 = 0,
                        _0x142BC = 0;
                    var _0x1366E = [0, 0, 0, 0];
                    for (var _0x143B6 = 0; _0x143B6 < _0x1439D.gameObject.children.length; _0x143B6++) {
                        var _0xF163 = _0x1439D.gameObject.getChildAt(_0x143B6);
                        _0x1428A = _0xF163.position.x + _0xF163.width / 2;
                        _0x142D5 = _0xF163.position.x - _0xF163.width / 2;
                        _0x142A3 = _0xF163.position.y - _0xF163.height / 2;
                        _0x142BC = _0xF163.position.y + _0xF163.height / 2;
                        _0x1366E = [Math.min(_0x1366E[0], _0x142A3), Math.min(_0x1366E[1], _0x142D5), Math.max(_0x1366E[2], _0x142BC), Math.max(_0x1366E[3], _0x1428A)]
                    };
                    return _0x1366E
                };
                _0x1439D.changeAspect = function() {
                    var _0x1441A, _0x14401, _0x143E8, _0x143CF;
                    if (_0x1439D.relatedObject) {
                        _0x143E8 = _0x1439D.relatedObject.width;
                        _0x143CF = _0x1439D.relatedObject.height
                    } else {
                        _0x143E8 = Core.game.width;
                        _0x143CF = Core.game.height
                    };
                    _0x1441A = (_0x143E8 + _0x1439D.paddingWidth * 2 - _0x1439D.marginWidth * 2) / _0x1439D.initialWidth;
                    _0x14401 = (_0x143CF + _0x1439D.paddingHeight * 2 - _0x1439D.marginHeight * 2) / _0x1439D.initialHeight;
                    if (!_0x1439D.scaleUp) {
                        _0x1441A = Math.min(1, _0x1441A);
                        _0x14401 = Math.min(1, _0x14401)
                    };
                    if (_0x1439D.keepRatio) {
                        var _0xD2EB = Math.min(_0x14401, _0x1441A);
                        _0x1441A = _0x14401 = _0xD2EB
                    };
                    if (_0x1439D.fitWidth) {
                        if (!_0x1439D.gameObject.data.maxScale) {
                            _0x1439D.gameObject.data.maxScale = {}
                        };
                        _0x1439D.gameObject.data.maxScale.x = _0x1441A;
                        _0x1439D.gameObject.scale.x = _0x1441A
                    };
                    if (_0x1439D.fitHeight) {
                        if (!_0x1439D.gameObject.data.maxScale) {
                            _0x1439D.gameObject.data.maxScale = {}
                        };
                        _0x1439D.gameObject.data.maxScale.y = _0x14401;
                        _0x1439D.gameObject.scale.y = _0x14401
                    }
                };
                return _0x1439D
            }
            _0xB987(_0x14352, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (this.objectName != _0xB90A[27]) {
                    this.relatedObject = GameObject.getObject(this.objectName)
                };
                if (this.sizeFromChildren) {
                    var _0x14384 = this.calculateBorders();
                    this.initialWidth = _0x14384[3] - _0x14384[1];
                    this.initialHeight = _0x14384[2] - _0x14384[0];
                    this.gameObject.data.actualSize = _0xC639(_0xB90A[599], this.initialWidth, _0xB90A[600], this.initialHeight)
                } else {
                    this.initialWidth = this.gameObject.width;
                    this.initialHeight = this.gameObject.height
                };
                this.gameObject.game.scale.onSizeChange.add(this.changeAspect);
                this.changeAspect()
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.scale.onSizeChange.remove(this.changeAspect);
                _get(_getPrototypeOf(_0x14352.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x14352
        }(Scene.Component);
        Components.MobileFit = _0x14352
    }

    function _0xC238(Components) {
        var _0x14433 = function(_0x1444C) {
            _0xBA1D(_0x14433, _0x1444C);

            function _0x14433() {
                var _0x14465;
                _0xB955(this, _0x14433);
                _0x14465 = _0xB9A0(this, _getPrototypeOf(_0x14433).apply(this, arguments));
                _0x14465.prefix = _0xB90A[27];
                _0x14465.vertical = false;
                _0x14465.tempX = [];
                _0x14465.tempY = [];
                _0x14465.tempScale = [];
                _0x14465.objects = [];
                _0x14465.swipeLimit = 30;
                _0x14465.updateLS = function() {
                    _0x14465.createTempPos()
                };
                _0x14465.handleUp = function() {
                    _0x14465.swipeEndX = _0x14465.gameObject.game.input.x;
                    _0x14465.swipeEndY = _0x14465.gameObject.game.input.y;
                    _0x14465.checkSwipe();
                    _0x14465.mouseDown = false
                };
                _0x14465.handleDown = function() {
                    var _0xD2D2;
                    _0x14465.createTempPos();
                    _0x14465.mouseDown = true;
                    _0x14465.swipeStartX = _0x14465.gameObject.game.input.x;
                    _0x14465.swipeStartY = _0x14465.gameObject.game.input.y
                };
                _0x14465.checkSwipe = function() {
                    if (_0x14465.mouseDown) {
                        _0x14465.checkHorizontalSwipe()
                    }
                };
                _0x14465.handleSwipe = function() {
                    if (_0x14465.mouseDown) {
                        _0x14465.trySwipe()
                    }
                };
                _0x14465.createTempPos = function() {
                    for (var _0x1447E = 0; _0x1447E < _0x14465.objects.length; _0x1447E++) {
                        if (_0x14465.tempX.length != _0x14465.objects.length) {
                            _0x14465.tempX.push(_0x14465.objects[_0x1447E].x);
                            _0x14465.tempY.push(_0x14465.objects[_0x1447E].y);
                            _0x14465.tempScale.push(_0x14465.objects[_0x1447E].scale.x)
                        } else {
                            _0x14465.tempX[_0x1447E] = _0x14465.objects[_0x1447E].x;
                            _0x14465.tempY[_0x1447E] = _0x14465.objects[_0x1447E].y;
                            _0x14465.tempScale[_0x1447E] = _0x14465.objects[_0x1447E].scale.x
                        }
                    }
                };
                _0x14465.trySwipe = function() {
                    var _0x126E7 = Math.max(-300, Math.min(300, _0x14465.swipeStartX - _0x14465.gameObject.game.input.x)) / 3;
                    for (var _0x14497 = 0; _0x14497 < _0x14465.objects.length; _0x14497++) {
                        var _0xCE22 = _0x14465.objects[_0x14497];
                        var _0x14514 = void(0),
                            _0x144B0 = void(0);
                        if (_0x14497 == 0) {
                            _0x14514 = _0x14514 = _0x14465.objects.length - 1
                        } else {
                            _0x14514 = _0x14497 - 1
                        };
                        if (_0x14497 == _0x14465.objects.length - 1) {
                            _0x144B0 = 0
                        } else {
                            _0x144B0 = _0x14497 + 1
                        };
                        var _0x144E2 = void(0),
                            _0x144FB = void(0),
                            _0x144C9 = void(0);
                        if (_0x126E7 > 0) {
                            _0x144E2 = _0x14465.tempX[_0x14497] + (_0x14465.tempX[_0x14497] - _0x14465.tempX[_0x14514]) * _0x126E7 / 100;
                            _0x144FB = _0x14465.tempY[_0x14497] + (_0x14465.tempY[_0x14497] - _0x14465.tempY[_0x14514]) * _0x126E7 / 100;
                            _0x144C9 = _0x14465.tempScale[_0x14497] + (_0x14465.tempScale[_0x14497] - _0x14465.tempScale[_0x14514]) * _0x126E7 / 100
                        } else {
                            _0x144E2 = _0x14465.tempX[_0x14497] - (_0x14465.tempX[_0x14497] - _0x14465.tempX[_0x144B0]) * _0x126E7 / 100;
                            _0x144FB = _0x14465.tempY[_0x14497] - (_0x14465.tempY[_0x14497] - _0x14465.tempY[_0x144B0]) * _0x126E7 / 100;
                            _0x144C9 = _0x14465.tempScale[_0x14497] - (_0x14465.tempScale[_0x14497] - _0x14465.tempScale[_0x144B0]) * _0x126E7 / 100
                        };
                        _0xCE22.x = _0x144E2;
                        _0xCE22.y = _0x144FB;
                        _0xCE22.scale.x = _0xCE22.scale.y = _0x144C9
                    };
                    if (_0x126E7 > _0x14465.swipeLimit) {
                        _0x14465.events.throwEvent(_0xB90A[787], Util.Util.createEventData([
                            [_0xB90A[788], false]
                        ]));
                        _0x14465.mouseDown = false
                    } else {
                        if (_0x126E7 < -_0x14465.swipeLimit) {
                            _0x14465.events.throwEvent(_0xB90A[787], Util.Util.createEventData([
                                [_0xB90A[788], true]
                            ]));
                            _0x14465.mouseDown = false
                        }
                    }
                };
                _0x14465.checkHorizontalSwipe = function() {
                    _0x14465.swipeBack()
                };
                _0x14465.swipeBack = function() {
                    for (var _0x1452D = 0; _0x1452D < _0x14465.objects.length; _0x1452D++) {
                        var _0xCE3B = _0x14465.objects[_0x1452D];
                        var _0xD6A1 = _0x14465.tempX[_0x1452D];
                        var _0xD6BA = _0x14465.tempY[_0x1452D];
                        var _0x14546 = _0x14465.tempScale[_0x1452D];
                        Components.Tweens.create(_0xCE3B, true).to(_0xC639(_0xB90A[43], _0xD6A1, _0xB90A[44], _0xD6BA), 100, null, true);
                        Components.Tweens.create(_0xCE3B.scale, true).to(_0xC639(_0xB90A[43], _0x14546, _0xB90A[44], _0x14546), 100, null, true)
                    }
                };
                return _0x14465
            }
            _0xB987(_0x14433, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                Core.game.input.onUp.add(this.handleUp);
                Core.game.input.onDown.add(this.handleDown);
                this.events.addEventListener(_0xB90A[29], this.handleSwipe);
                this.objects = GameObject.getObjectsByTag(this.prefix, true);
                this.events.addEventListener(_0xB90A[951], this.updateLS)
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                Core.game.input.onUp.remove(this.handleUp);
                Core.game.input.onDown.remove(this.handleDown);
                _get(_getPrototypeOf(_0x14433.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x14433
        }(Scene.Component);
        Components.MobileSwipe = _0x14433
    }

    function _0xC251(Components) {
        var _0x1455F = function(_0x14578) {
            _0xBA1D(_0x1455F, _0x14578);

            function _0x1455F() {
                var _0x145AA;
                _0xB955(this, _0x1455F);
                _0x145AA = _0xB9A0(this, _getPrototypeOf(_0x1455F).apply(this, arguments));
                _0x145AA.buttonWidth = 100;
                _0x145AA.buttonHeight = 150;
                _0x145AA.vertical = true;
                _0x145AA.addSidePadding = true;
                _0x145AA.autoCheckButtonsSize = true;
                _0x145AA.categories = [];
                _0x145AA.xPositions = [];
                _0x145AA.yPositions = [];
                _0x145AA.buttonScale = 1;
                _0x145AA.currentCat = 1;
                _0x145AA.currentButtons = [];
                _0x145AA.currentPage = 0;
                _0x145AA.customSizes = [];
                _0x145AA.calculateItemButtonsSize = function() {
                    if (_0x145AA.autoCheckButtonsSize) {
                        for (var _0x145C3 = 0; _0x145C3 < _0x145AA.categories.length; _0x145C3++) {
                            var _0xD58E = _0x145AA.categories[_0x145C3];
                            _0x145AA.searchCatSize(_0x145C3, _0xD58E)
                        }
                    }
                };
                _0x145AA.searchCatSize = function(_0xD58E, _0xD5A7) {
                    var _0xD5F2 = 0;
                    var _0xD5C0 = 0;
                    for (var _0x145DC = 0; _0x145DC < _0xD5A7.length; _0x145DC++) {
                        var _0xCE22 = _0xD5A7[_0x145DC];
                        if (_0xCE22.getComponent(Components.GlowComponent) || _0xCE22.children.length == 0) {
                            if (_0xD5F2 < _0xCE22.width) {
                                _0xD5F2 = _0xCE22.width
                            };
                            if (_0xD5C0 < _0xCE22.height) {
                                _0xD5C0 = _0xCE22.height
                            }
                        } else {
                            var _0xD5D9 = _0x145AA.findButton(_0xCE22);
                            if (_0xD5F2 < _0xD5D9[0]) {
                                _0xD5F2 = _0xD5D9[0]
                            };
                            if (_0xD5C0 < _0xD5D9[1]) {
                                _0xD5C0 = _0xD5D9[1]
                            }
                        }
                    };
                    _0x145AA.customSizes[_0xD58E] = [_0xD5F2, _0xD5C0]
                };
                _0x145AA.findButton = function(_0xC652) {
                    for (var _0x145F5 = 0; _0x145F5 < _0xC652.children.length; _0x145F5++) {
                        var _0xCE22 = _0xC652.children[_0x145F5];
                        if (_0xCE22.getComponent(Components.GlowComponent) || _0xCE22.children.length == 0) {
                            return [_0xCE22.width, _0xCE22.height]
                        } else {
                            _0x145AA.findButton(_0xCE22)
                        }
                    }
                };
                _0x145AA.initMcProp = function() {
                    _0x145AA.panelHolder = _0x145AA.gameObject;
                    _0x145AA.vertical = _0x145AA.panelHolder.x > _0x145AA.panelHolder.y;
                    _0x145AA.initialWidth = Core.Main.gameWidth;
                    _0x145AA.initialHeight = Core.Main.gameHeight;
                    _0x145AA.originalHolderHeight = _0x145AA.panelHolder.height;
                    _0x145AA.originalHolderWidth = _0x145AA.panelHolder.width;
                    _0x145AA.maxRation_X = _0x145AA.panelHolder.width / _0x145AA.initialWidth;
                    _0x145AA.maxRation_Y = _0x145AA.panelHolder.height / _0x145AA.initialHeight
                };
                _0x145AA.initMc = function() {
                    _0x145AA.itemButtons = GameObject.getObjectsByTag(_0x145AA.itemButtonTag, true);
                    for (var _0x14627 = 0; _0x14627 < _0x145AA.itemButtons.length; _0x14627++) {
                        var _0xCE22 = _0x145AA.itemButtons[_0x14627];
                        if (!_0xCE22.visible) {
                            _0x145AA.itemButtons.splice(_0x145AA.itemButtons.indexOf(_0xCE22), 1);
                            _0x14627--
                        }
                    };
                    _0x145AA.catButtons = GameObject.getObjectsByTag(_0x145AA.catButtonTag, true);
                    _0x145AA.arrows = GameObject.getObjectsByTag(_0x145AA.arrowsTag, true);
                    _0x145AA.toggleButton = GameObject.getObject(_0xB90A[952]);
                    if (_0x145AA.catButtons[0]) {
                        _0x145AA.catIntialWidth = _0x145AA.catButtons[0].width
                    };
                    for (var _0x14640 = 0; _0x14640 < _0x145AA.catButtons.length; _0x14640++) {
                        var _0x1460E = _0x145AA.catButtons[_0x14640];
                        _0x145AA.categories[Number(_0x1460E.tags[1])] = []
                    }
                };
                _0x145AA.initLocalEvents = function() {
                    if (Core.game.device.desktop) {
                        if (_0x145AA.arrows.length != 0) {
                            _0x145AA.arrows.forEach(function(_0xCE22) {
                                _0xCE22.addButtonPressedCallback(_0x145AA.handleArrowClick)
                            })
                        }
                    } else {
                        if (_0x145AA.arrows.length != 0) {
                            _0x145AA.arrows.forEach(function(_0xCE22) {
                                _0xCE22.visible = false;
                                _0xCE22.disableInput()
                            })
                        }
                    };
                    if (_0x145AA.catButtons.length != 0) {
                        _0x145AA.events.addEventListener(_0xB90A[228], _0x145AA.handleCategClick)
                    };
                    _0x145AA.events.addEventListener(_0xB90A[29], _0x145AA.handleSwipe);
                    _0x145AA.gameObject.game.scale.onSizeChange.add(_0x145AA.changeAspect);
                    Core.game.input.onUp.add(_0x145AA.handleUp);
                    Core.game.input.onDown.add(_0x145AA.handleDown)
                };
                _0x145AA.handleCategClick = function(_0xCF35) {
                    _0x145AA.hideCurrentCat();
                    _0x145AA.currentCat = Number(_0xCF35.getData(_0xB90A[229]));
                    _0x145AA.changeAspect()
                };
                _0x145AA.handleArrowClick = function(_0xCE3B) {
                    if (_0xCE3B == _0x145AA.arrows[0]) {
                        _0x145AA.swipe(false)
                    } else {
                        _0x145AA.swipe(true)
                    }
                };
                _0x145AA.hideCurrentCat = function() {
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    _0x145AA.currentButtons.forEach(function(_0xCE22) {
                        _0xCE22.visible = false
                    })
                };
                _0x145AA.handleUp = function() {
                    _0x145AA.swipeEndX = _0x145AA.gameObject.game.input.x;
                    _0x145AA.swipeEndY = _0x145AA.gameObject.game.input.y;
                    _0x145AA.checkSwipe();
                    _0x145AA.mouseDown = false
                };
                _0x145AA.handleDown = function() {
                    _0x145AA.mouseDown = false;
                    var _0xD2D2;
                    _0x145AA.createTempPos();
                    if (_0x145AA.vertical) {
                        _0xD2D2 = _0x145AA.gameObject.game.input.x > Core.game.canvas.width - _0x145AA.panelHolder.width
                    } else {
                        _0xD2D2 = _0x145AA.gameObject.game.input.y > Core.game.canvas.height - _0x145AA.panelHolder.height
                    };
                    if (_0xD2D2) {
                        _0x145AA.mouseDown = true;
                        _0x145AA.swipeStartX = _0x145AA.gameObject.game.input.x;
                        _0x145AA.swipeStartY = _0x145AA.gameObject.game.input.y
                    }
                };
                _0x145AA.checkSwipe = function() {
                    if (_0x145AA.mouseDown) {
                        if (_0x145AA.vertical) {
                            _0x145AA.checkVerticalSwipe()
                        } else {
                            _0x145AA.checkHorizontalSwipe()
                        }
                    }
                };
                _0x145AA.handleSwipe = function() {
                    if (_0x145AA.mouseDown) {
                        _0x145AA.trySwipe()
                    }
                };
                _0x145AA.createTempPos = function() {
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    _0x145AA.tempX = [];
                    _0x145AA.tempY = [];
                    _0x145AA.currentButtons.forEach(function(_0xCE22) {
                        _0x145AA.tempX.push(_0xCE22.x);
                        _0x145AA.tempY.push(_0xCE22.y)
                    })
                };
                _0x145AA.trySwipe = function() {
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    for (var _0x14659 = 0; _0x14659 < _0x145AA.currentButtons.length; _0x14659++) {
                        var _0xCE3B = _0x145AA.currentButtons[_0x14659];
                        var _0xD6BA = _0x145AA.tempY[_0x14659];
                        var _0xD6A1 = _0x145AA.tempX[_0x14659];
                        if (_0x145AA.vertical) {
                            var _0xD688 = _0xD6BA - (_0x145AA.swipeStartY - _0x145AA.gameObject.game.input.y);
                            _0xCE3B.y = _0xD688
                        } else {
                            var _0xD66F = _0xD6A1 - (_0x145AA.swipeStartX - _0x145AA.gameObject.game.input.x);
                            _0xCE3B.x = _0xD66F
                        }
                    }
                };
                _0x145AA.checkHorizontalSwipe = function() {
                    var _0xD6D3 = Math.abs(_0x145AA.swipeEndX - _0x145AA.swipeStartX);
                    var _0xC684 = _0x145AA.swipeEndX > _0x145AA.swipeStartX;
                    if (_0xD6D3 > 100) {
                        _0x145AA.swipe(!_0xC684)
                    } else {
                        _0x145AA.swipeBack()
                    }
                };
                _0x145AA.checkVerticalSwipe = function() {
                    var _0xD6EC = Math.abs(_0x145AA.swipeEndY - _0x145AA.swipeStartY);
                    var _0xD705 = _0x145AA.swipeEndY < _0x145AA.swipeStartY;
                    if (_0xD6EC > 100) {
                        _0x145AA.swipe(_0xD705)
                    } else {
                        _0x145AA.swipeBack()
                    }
                };
                _0x145AA.swipe = function(_0xD71E) {
                    if (_0xD71E) {
                        _0x145AA.currentPage++
                    } else {
                        _0x145AA.currentPage--
                    };
                    if (_0x145AA.currentPage > _0x145AA.maxPage - 1) {
                        _0x145AA.currentPage = _0x145AA.maxPage - 1
                    };
                    if (_0x145AA.currentPage <= 0) {
                        _0x145AA.currentPage = 0
                    };
                    for (var _0x14672 = 0; _0x14672 < _0x145AA.currentButtons.length; _0x14672++) {
                        var _0xCE3B = _0x145AA.currentButtons[_0x14672];
                        var _0xD6A1 = _0x145AA.vertical ? _0x145AA.xPositions[_0x14672] : _0x145AA.xPositions[_0x14672] - Core.game.canvas.width * _0x145AA.currentPage;
                        var _0xD6BA = _0x145AA.vertical ? _0x145AA.yPositions[_0x14672] - Core.game.canvas.height * _0x145AA.currentPage : _0x145AA.yPositions[_0x14672];
                        Components.Tweens.create(_0xCE3B, true).to(_0xC639(_0xB90A[43], _0xD6A1, _0xB90A[44], _0xD6BA), 200, null, true)
                    }
                };
                _0x145AA.swipeBack = function() {
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    for (var _0x1468B = 0; _0x1468B < _0x145AA.currentButtons.length; _0x1468B++) {
                        var _0xCE3B = _0x145AA.currentButtons[_0x1468B];
                        var _0xD6A1 = _0x145AA.tempX[_0x1468B];
                        var _0xD6BA = _0x145AA.tempY[_0x1468B];
                        Components.Tweens.create(_0xCE3B, true).to(_0xC639(_0xB90A[43], _0xD6A1, _0xB90A[44], _0xD6BA), 100, null, true)
                    }
                };
                _0x145AA.createCategories = function() {
                    if (_0x145AA.catButtons.length != 0) {
                        for (var _0x146A4 = 0; _0x146A4 < _0x145AA.itemButtons.length; _0x146A4++) {
                            var _0xCE3B = _0x145AA.itemButtons[_0x146A4];
                            var _0xD15B = Number(_0xCE3B.tags[1]) - 1;
                            _0xCE3B.visible = false;
                            if (!_0x145AA.categories[_0xD15B]) {
                                _0x145AA.categories[_0xD15B] = []
                            };
                            _0x145AA.categories[_0xD15B].push(_0xCE3B)
                        }
                    };
                    _0x145AA.catButtons.push(GameObject.getObject(_0xB90A[953]));
                    _0x145AA.catButtons.unshift(GameObject.getObject(_0xB90A[954]))
                };
                _0x145AA.changeAspect = function() {
                    _0x145AA.resizePanel();
                    _0x145AA.handleCatButtonsPosition();
                    _0x145AA.handleCatButtonsScale();
                    _0x145AA.createButtonPostionsMatrix();
                    _0x145AA.showButtons(0, 0);
                    _0x145AA.fixePosition();
                    _0x145AA.handleArrows();
                    _0x145AA.handleToggleButton()
                };
                _0x145AA.handleToggleButton = function() {
                    if (_0x145AA.toggleButton) {
                        _0x145AA.toggleButton.x = _0x145AA.vertical ? Core.game.canvas.width - _0x145AA.panelHolder.width - _0x145AA.toggleButton.width / 2 : _0x145AA.toggleButton.width / 2;
                        _0x145AA.toggleButton.y = _0x145AA.vertical ? _0x145AA.toggleButton.height / 2 : Core.game.canvas.height - _0x145AA.panelHolder.height - _0x145AA.toggleButton.height / 2
                    }
                };
                _0x145AA.handleArrows = function() {
                    if (_0x145AA.arrows.length != 0) {
                        if (_0x145AA.maxPage > 1) {
                            _0x145AA.arrows.forEach(function(_0xCE22) {
                                _0xCE22.visible = true
                            })
                        } else {
                            _0x145AA.arrows.forEach(function(_0xCE22) {
                                _0xCE22.visible = false
                            })
                        }
                    }
                };
                _0x145AA.fixePosition = function() {
                    _0x145AA.xPositions = [];
                    _0x145AA.yPositions = [];
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    _0x145AA.currentButtons.forEach(function(_0xCE22) {
                        _0x145AA.xPositions.push(_0xCE22.x);
                        _0x145AA.yPositions.push(_0xCE22.y)
                    })
                };
                _0x145AA.createButtonPostionsMatrix = function() {
                    if (_0x145AA.autoCheckButtonsSize && _0x145AA.customSizes.length != 0) {
                        _0x145AA.buttonWidth = _0x145AA.customSizes[_0x145AA.currentCat - 1][0];
                        _0x145AA.buttonHeight = _0x145AA.customSizes[_0x145AA.currentCat - 1][1]
                    };
                    _0x145AA.currentPage = 0;
                    _0x145AA.buttonScale = 1;
                    _0x145AA.columns = 0;
                    _0x145AA.rows = 0;
                    _0x145AA.xPositions = [];
                    _0x145AA.yPositions = [];
                    if (_0x145AA.catButtons.length != 0) {
                        _0x145AA.currentButtons = _0x145AA.categories[_0x145AA.currentCat - 1]
                    };
                    if (_0x145AA.categories.length == 0) {
                        _0x145AA.currentButtons = _0x145AA.itemButtons
                    };
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    var _0xD750 = 0;
                    _0x145AA.buttonPadding = 20;
                    _0x145AA.sidesPadding = _0x145AA.vertical ? Core.game.canvas.height / 5 : Core.game.canvas.width / 5;
                    if (!_0x145AA.addSidePadding) {
                        _0x145AA.sidesPadding = _0x145AA.buttonPadding
                    };
                    if (_0x145AA.catButtons.length != 0) {
                        _0xD750 = _0x145AA.vertical ? _0x145AA.catButtons[0].width / 2 : _0x145AA.catButtons[0].height / 2
                    };
                    _0x145AA.startX = _0x145AA.vertical ? Core.game.canvas.width - _0x145AA.panelHolder.width + _0xD750 + _0x145AA.buttonPadding : _0x145AA.sidesPadding;
                    _0x145AA.startY = _0x145AA.vertical ? _0x145AA.sidesPadding + Core.game.canvas.height / 10 : Core.game.canvas.height - _0x145AA.panelHolder.height + _0xD750 + _0x145AA.buttonPadding;
                    _0x145AA.xLimit = _0x145AA.vertical ? Core.game.canvas.width - _0x145AA.buttonPadding : Core.game.canvas.width - _0x145AA.sidesPadding;
                    _0x145AA.yLimit = _0x145AA.vertical ? Core.game.canvas.height - _0x145AA.sidesPadding : Core.game.canvas.height - _0x145AA.buttonPadding;
                    _0x145AA.availableWidth = Math.floor(_0x145AA.xLimit - _0x145AA.startX);
                    _0x145AA.availableHeight = Math.floor(_0x145AA.yLimit - _0x145AA.startY);
                    if (_0x145AA.vertical) {
                        _0x145AA.findColumns(_0x145AA.buttonScale);
                        _0x145AA.findRows(_0x145AA.buttonScale);
                        if (_0x145AA.rows >= _0x145AA.currentButtons.length / _0x145AA.columns) {
                            _0x145AA.rows = Math.ceil(_0x145AA.currentButtons.length / _0x145AA.columns)
                        }
                    } else {
                        _0x145AA.findRows(_0x145AA.buttonScale);
                        _0x145AA.findColumns(_0x145AA.buttonScale);
                        if (_0x145AA.columns >= _0x145AA.currentButtons.length / _0x145AA.rows) {
                            _0x145AA.columns = Math.ceil(_0x145AA.currentButtons.length / _0x145AA.rows)
                        }
                    };
                    if (_0x145AA.rows == 1) {
                        _0x145AA.yPositions.push(_0x145AA.yLimit - _0x145AA.availableHeight / 2)
                    } else {
                        var _0xD782 = _0x145AA.availableHeight / _0x145AA.rows;
                        for (var _0x146BD = 0; _0x146BD < _0x145AA.rows; _0x146BD++) {
                            var _0xD688 = _0x145AA.startY + _0x145AA.buttonHeight * _0x145AA.buttonScale / 2 + (_0xD782 - _0x145AA.buttonHeight * _0x145AA.buttonScale) / 2 + _0xD782 * _0x146BD;
                            _0x145AA.yPositions.push(Math.floor(_0xD688))
                        }
                    };
                    if (_0x145AA.columns == 1) {
                        _0x145AA.xPositions.push(_0x145AA.xLimit - _0x145AA.availableWidth / 2)
                    } else {
                        var _0xD769 = _0x145AA.availableWidth / _0x145AA.columns;
                        for (var _0x146D6 = 0; _0x146D6 < _0x145AA.columns; _0x146D6++) {
                            var _0xD66F = _0x145AA.startX + _0x145AA.buttonWidth * _0x145AA.buttonScale / 2 + (_0xD769 - _0x145AA.buttonWidth * _0x145AA.buttonScale) / 2 + _0xD769 * _0x146D6;
                            _0x145AA.xPositions.push(Math.floor(_0xD66F))
                        }
                    }
                };
                _0x145AA.findColumns = function(_0xD79B) {
                    var _0xD5F2 = _0x145AA.buttonWidth * _0xD79B;
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    for (var _0x146EF = 0; _0x146EF < _0x145AA.currentButtons.length; _0x146EF++) {
                        var _0xD6A1 = _0x145AA.startX + _0xD5F2 / 2 + _0xD5F2 * _0x146EF + _0x145AA.buttonPadding * _0x146EF + _0x145AA.buttonPadding;
                        if (_0xD6A1 <= _0x145AA.xLimit - _0x145AA.buttonPadding - _0xD5F2 / 2) {
                            _0x145AA.columns++
                        }
                    };
                    if (_0x145AA.columns == 0) {
                        _0x145AA.buttonScale = _0x145AA.availableWidth / _0x145AA.buttonWidth;
                        _0x145AA.columns = 1
                    }
                };
                _0x145AA.findRows = function(_0xD79B) {
                    var _0xD5C0 = _0x145AA.buttonHeight * _0xD79B;
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    for (var _0x14708 = 0; _0x14708 < _0x145AA.currentButtons.length; _0x14708++) {
                        var _0xD6BA = _0x145AA.startY + _0xD5C0 / 2 + _0xD5C0 * _0x14708 + _0x145AA.buttonPadding * _0x14708 + _0x145AA.buttonPadding;
                        if (_0xD6BA <= _0x145AA.yLimit - _0x145AA.buttonPadding - _0xD5C0 / 2) {
                            _0x145AA.rows++
                        }
                    };
                    if (_0x145AA.rows == 0) {
                        _0x145AA.buttonScale = _0x145AA.availableHeight / _0x145AA.buttonHeight;
                        _0x145AA.rows = 1
                    }
                };
                _0x145AA.showButtons = function(_0xD818, _0xD7FF) {
                    _0x145AA.maxPage = _0xD818 + 1;
                    var _0xD6A1;
                    var _0xD6BA;
                    var _0xD7E6 = _0x145AA.vertical ? Core.game.canvas.height * _0xD818 : Core.game.canvas.width * _0xD818;
                    if (_0x145AA.vertical) {
                        for (var _0x14721 = 0; _0x14721 < _0x145AA.yPositions.length; _0x14721++) {
                            _0xD6BA = _0x145AA.yPositions[_0x14721] + _0xD7E6;
                            for (var _0xC9D6 = 0; _0xC9D6 < _0x145AA.xPositions.length; _0xC9D6++) {
                                _0xD6A1 = _0x145AA.xPositions[_0xC9D6];
                                if (_0x145AA.currentButtons[_0xD7FF]) {
                                    _0x145AA.currentButtons[_0xD7FF].visible = true;
                                    _0x145AA.currentButtons[_0xD7FF].position[_0xB90A[95]](_0xD6A1, _0xD6BA);
                                    _0x145AA.currentButtons[_0xD7FF].scale[_0xB90A[95]](_0x145AA.buttonScale, _0x145AA.buttonScale);
                                    _0xD7FF++
                                }
                            }
                        }
                    } else {
                        for (var _0x1473A = 0; _0x1473A < _0x145AA.xPositions.length; _0x1473A++) {
                            _0xD6A1 = _0x145AA.xPositions[_0x1473A] + _0xD7E6;
                            for (var _0x14753 = 0; _0x14753 < _0x145AA.yPositions.length; _0x14753++) {
                                _0xD6BA = _0x145AA.yPositions[_0x14753];
                                if (_0x145AA.currentButtons[_0xD7FF]) {
                                    _0x145AA.currentButtons[_0xD7FF].visible = true;
                                    _0x145AA.currentButtons[_0xD7FF].position[_0xB90A[95]](_0xD6A1, _0xD6BA);
                                    _0x145AA.currentButtons[_0xD7FF].scale[_0xB90A[95]](_0x145AA.buttonScale, _0x145AA.buttonScale);
                                    _0xD7FF++
                                }
                            }
                        }
                    };
                    if (!_0x145AA.currentButtons) {
                        return
                    };
                    if (_0xD7FF < _0x145AA.currentButtons.length) {
                        _0x145AA.showButtons(_0xD818 + 1, _0xD7FF)
                    }
                };
                _0x145AA.resizePanel = function() {
                    _0x145AA.widthChange = Core.game.canvas.width / _0x145AA.initialWidth;
                    _0x145AA.heightChange = Core.game.canvas.height / _0x145AA.initialHeight;
                    _0x145AA.scale = _0x145AA.widthChange > _0x145AA.heightChange ? _0x145AA.widthChange : _0x145AA.heightChange;
                    _0x145AA.panelHolder.scale[_0xB90A[95]](_0x145AA.scale, _0x145AA.scale);
                    if (_0x145AA.panelHolder.width / Core.game.canvas.width > _0x145AA.maxRation_X) {
                        while (_0x145AA.panelHolder.width / Core.game.canvas.width > _0x145AA.maxRation_X) {
                            _0x145AA.panelHolder.width--
                        }
                    };
                    if (_0x145AA.panelHolder.height / Core.game.canvas.height > _0x145AA.maxRation_Y) {
                        while (_0x145AA.panelHolder.height / Core.game.canvas.height > _0x145AA.maxRation_Y) {
                            _0x145AA.panelHolder.height--
                        }
                    };
                    _0x145AA.panelHolder.x = Core.game.canvas.width - _0x145AA.panelHolder.width / 2;
                    _0x145AA.panelHolder.y = Core.game.canvas.height - _0x145AA.panelHolder.height / 2;
                    if (_0x145AA.vertical) {
                        _0x1455F.AVAILABLE_SPACE = Math.floor(Core.game.canvas.width - _0x145AA.panelHolder.width);
                        _0x145AA.events.throwEvent(_0x1455F.FREE_SPACE, Util.Util.createEventData([
                            [_0x1455F.FREE_SPACE, [Math.floor(Core.game.canvas.width - _0x145AA.panelHolder.width), _0x145AA.vertical]]
                        ]))
                    } else {
                        _0x1455F.AVAILABLE_SPACE = Math.floor(Core.game.canvas.height - _0x145AA.panelHolder.height);
                        _0x145AA.events.throwEvent(_0x1455F.FREE_SPACE, Util.Util.createEventData([
                            [_0x1455F.FREE_SPACE, [Core.game.canvas.height, _0x145AA.vertical]]
                        ]))
                    }
                };
                _0x145AA.handleCatButtonsPosition = function() {
                    if (_0x145AA.catButtons.length != 0) {
                        if (_0x145AA.vertical) {
                            var _0xD895 = (_0x145AA.panelHolder.height - _0x145AA.panelHolder.height / 7) / (_0x145AA.catButtons.length + 1);
                            for (var _0x14785 = 0; _0x14785 < _0x145AA.catButtons.length; _0x14785++) {
                                var _0xD863 = _0x145AA.catButtons[_0x14785];
                                _0xD863.x = _0x145AA.panelHolder.x - _0x145AA.panelHolder.width / 2;
                                _0xD863.y = _0x145AA.panelHolder.height / 7 + _0xD895 * (_0x14785 + 1)
                            }
                        } else {
                            var _0xD87C = _0x145AA.panelHolder.width / (_0x145AA.catButtons.length + 1);
                            for (var _0x1479E = 0; _0x1479E < _0x145AA.catButtons.length; _0x1479E++) {
                                var _0x1476C = _0x145AA.catButtons[_0x1479E];
                                _0x1476C.x = _0xD87C * (_0x1479E + 1);
                                _0x1476C.y = _0x145AA.panelHolder.y - _0x145AA.panelHolder.height / 2
                            }
                        }
                    }
                };
                _0x145AA.handleCatButtonsScale = function() {
                    if (_0x145AA.catButtons.length != 0) {
                        var _0xD8F9 = _0x145AA.panelHolder.height / _0x145AA.originalHolderHeight;
                        if (Components.DevUtils.getCurrentUnitName() == _0xB90A[233]) {
                            _0xD8F9 = 0.8
                        } else {
                            if (_0xD8F9 >= 1) {
                                _0xD8F9 = 1
                            }
                        };
                        for (var _0x147B7 = 0; _0x147B7 < _0x145AA.catButtons.length; _0x147B7++) {
                            var _0xD863 = _0x145AA.catButtons[_0x147B7];
                            _0xD863.scale[_0xB90A[95]](_0xD8F9, _0xD8F9)
                        };
                        var _0xD8C7 = Phaser.Math.distancePow(_0x145AA.catButtons[0].x, _0x145AA.catButtons[0].y, _0x145AA.catButtons[1].x, _0x145AA.catButtons[1].y);
                        var _0xD8E0 = _0xD8C7 - _0x145AA.catButtons[0].height;
                        while (_0xD8E0 < _0x145AA.catButtons[0].height / 10) {
                            _0x145AA.catButtons.forEach(function(_0xCE22) {
                                _0xCE22.width--;
                                _0xCE22.height--
                            });
                            _0xD8C7 = Phaser.Math.distancePow(_0x145AA.catButtons[0].x, _0x145AA.catButtons[0].y, _0x145AA.catButtons[1].x, _0x145AA.catButtons[1].y);
                            _0xD8E0 = _0xD8C7 - _0x145AA.catButtons[0].height
                        };
                        var _0xD8AE = _0x145AA.catButtons[0].width / _0x145AA.catIntialWidth;
                        _0x145AA.catButtons.forEach(function(_0xCE22) {
                            _0xCE22.scale[_0xB90A[95]](_0xD8AE, _0xD8AE)
                        });
                        _0x145AA.events.throwEvent(_0xB90A[101]);
                        _0x145AA.gameObject.game.time.events.add(100, function() {
                            _0x145AA.events.throwEvent(_0xB90A[101])
                        }, _0xB9B9(_0x145AA))
                    }
                };
                return _0x145AA
            }
            _0xB987(_0x1455F, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x14591 = this;
                this.gameObject.game.time.events.add(100, function() {
                    _0x14591.initMc();
                    _0x14591.createCategories();
                    _0x14591.calculateItemButtonsSize();
                    _0x14591.initMcProp();
                    _0x14591.initLocalEvents();
                    _0x14591.changeAspect()
                }, this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                Core.game.input.onDown.remove(this.handleUp);
                Core.game.input.onUp.remove(this.handleDown);
                this.gameObject.game.scale.onSizeChange.remove(this.changeAspect);
                _get(_getPrototypeOf(_0x1455F.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x1455F
        }(Scene.Component);
        _0x1455F.FREE_SPACE = _0xB90A[235];
        _0x1455F.AVAILABLE_SPACE = 0;
        Components.Panel = _0x1455F
    }

    function _0xC26A(Components) {
        var _0x147E9 = function(_0x14802) {
            _0xBA1D(_0x147E9, _0x14802);

            function _0x147E9() {
                var _0x14A73;
                _0xB955(this, _0x147E9);
                _0x14A73 = _0xB9A0(this, _getPrototypeOf(_0x147E9).apply(this, arguments));
                _0x14A73.DEBUG = false;
                _0x14A73.changePosition = false;
                _0x14A73.topLimit = 0;
                _0x14A73.botLimit = 100;
                _0x14A73.rightLimit = 100;
                _0x14A73.leftLimit = 0;
                _0x14A73.keepAspectRatio = true;
                _0x14A73.fitGroup = _0xB90A[955];
                _0x14A73.shouldUpdate = false;
                _0x14A73.freeSpace = new PIXI.Rectangle();
                _0x14A73.update = function() {};
                _0x14A73.lateUpdate = function() {
                    if (_0x14A73.shouldUpdate) {
                        _0x14A73.calculateFreeSpace();
                        if (_0x14A73.gameObject.getComponent(Components.SliceComponent)) {
                            _0x14A73.gameObject.getComponent(Components.SliceComponent).rescaleTo(_0x14A73.freeSpace.width, _0x14A73.freeSpace.height);
                            _0x14A73.gameObject.scale[_0xB90A[95]](1, 1)
                        };
                        _0x14A73.shouldUpdate = false;
                        _0x14A73.events.throwEvent(_0xB90A[280])
                    };
                    _0x147E9.chachedGroupFreeSpace.clear()
                };
                _0x14A73.onRescale = function() {
                    _0x14A73.shouldUpdate = true
                };
                return _0x14A73
            }
            _0xB987(_0x147E9, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.gameObject.game.scale.onSizeChange.add(this.onRescale);
                this.events.addEventListener(_0x147E9.UPDATE_FIT, this.onRescale);
                this.initialW = Core.game.canvas.width;
                this.initialH = Core.game.canvas.height;
                this.events.addEventListener(_0xB90A[29], this.update);
                this.events.addEventListener(Scene.Unit.POST_UPDATE, this.lateUpdate);
                if (this.DEBUG) {
                    this.debugRect = this.gameObject.game.add.graphics(0, 0);
                    this.gameObject.game.world.addChild(this.debugRect)
                };
                this.originalBounds = Components.DevUtils.getBounds(this.gameObject, true, true);
                var _0x14A5A = this.gameObject.toGlobal(this.gameObject.position);
                this.orginalGlobalDiff = new PIXI.Point(this.originalBounds.centerX - _0x14A5A.x, this.originalBounds.centerY - _0x14A5A.y);
                this.topLimit /= 100.0;
                this.botLimit /= 100.0;
                this.leftLimit /= 100.0;
                this.rightLimit /= 100.0;
                this.fitGroup = this.gameObject.name;
                this.onRescale()
            }), _0xC639(_0xB90A[13], _0xB90A[956], _0xB90A[5], function _0x14866() {
                var _0x14A41 = this.changePosition;
                this.changePosition = false;
                this.calculateFreeSpace();
                var _0x1140E = new PIXI.Rectangle(this.freeSpace.x, this.freeSpace.y, this.freeSpace.width, this.freeSpace.height);
                this.changePosition = _0x14A41;
                return _0x1140E
            }), _0xC639(_0xB90A[13], _0xB90A[957], _0xB90A[5], function _0x14834() {
                trace(_0xB90A[958]);
                var _0xD6A1 = this.leftLimit * this.gameObject.game.canvas.width;
                var _0xD6BA = this.topLimit * this.gameObject.game.canvas.height;
                var _0xD5F2 = (this.rightLimit - this.leftLimit) * this.gameObject.game.canvas.width;
                var _0xD5C0 = (this.botLimit - this.topLimit) * this.gameObject.game.canvas.height;
                this.freeSpace = new PIXI.Rectangle(_0xD6A1, _0xD6BA, _0xD5F2, _0xD5C0);
                var _0xD0F7 = _0x147E9.groupMap[_0xB90A[8]](this.fitGroup);
                if (!_0xD0F7) {
                    _0xD0F7 = []
                };
                for (var _0x14898 = 0; _0x14898 < _0xD0F7.length; _0x14898++) {
                    var _0xCC47 = _0xD0F7[_0x14898];
                    var _0xDFB6 = Components.DevUtils.getBounds(_0xCC47, true, true);
                    if (this.DEBUG) {
                        this.debugRect.beginFill();
                        this.debugRect.drawRect(_0xDFB6.x, _0xDFB6.y, _0xDFB6.width, _0xDFB6.height);
                        this.debugRect.endFill()
                    };
                    var _0x148B1 = this.findClosestEdge(_0xDFB6);
                    if (_0x148B1 == _0x147D0.top) {
                        var _0x144FB = _0xDFB6.bottom;
                        if (_0x144FB > this.freeSpace.y) {
                            this.freeSpace.height -= _0xDFB6.bottom - this.freeSpace.y;
                            this.freeSpace.y = _0xDFB6.bottom
                        }
                    };
                    if (_0x148B1 == _0x147D0.rigth) {
                        var _0x148FC = _0xDFB6.left - this.freeSpace.x;
                        if (_0x148FC < this.freeSpace.width) {
                            this.freeSpace.width = _0xDFB6.left - this.freeSpace.x
                        }
                    };
                    if (_0x148B1 == _0x147D0.bottom) {
                        var _0x148E3 = _0xDFB6.top - this.freeSpace.y;
                        if (_0x148E3 < this.freeSpace.height) {
                            this.freeSpace.height = _0xDFB6.top - this.freeSpace.y
                        }
                    };
                    if (_0x148B1 == _0x147D0.left) {
                        var _0x144E2 = _0xDFB6.right;
                        if (_0x144E2 > this.freeSpace.x) {
                            this.freeSpace.width -= _0xDFB6.right - this.freeSpace.x;
                            this.freeSpace.x = _0xDFB6.right
                        }
                    }
                };
                if (this.DEBUG) {
                    this.debugRect.clear();
                    this.debugRect.beginFill(0x00FF00, 0.5);
                    this.debugRect.drawRect(this.freeSpace.x, this.freeSpace.y, this.freeSpace.width, this.freeSpace.height);
                    this.debugRect.beginFill(0xFF0000, 0.5);
                    this.debugRect.drawRect(this.freeSpace.x + this.freeSpace.width / 2 - 2, this.freeSpace.y + this.freeSpace.height / 2 - 2, 5, 5);
                    this.debugRect.endFill()
                };
                var _0xE44D = this.originalBounds;
                if (this.keepAspectRatio) {
                    var _0x148CA = Components.DevUtils.getBounds(this.gameObject, true, true);
                    var _0x118A5 = this.freeSpace.width / _0x148CA.width;
                    var _0x118BE = this.freeSpace.height / _0x148CA.height;
                    var _0xD2EB = Phaser.Math.min(_0x118A5, _0x118BE);
                    this.gameObject.scale.x *= _0xD2EB;
                    this.gameObject.scale.y *= _0xD2EB
                } else {
                    var _0x148CA = _0xE44D;
                    var _0x118A5 = this.freeSpace.width / _0x148CA.width;
                    var _0x118BE = this.freeSpace.height / _0x148CA.height;
                    this.gameObject.scale.x = _0x118A5;
                    this.gameObject.scale.y = _0x118BE
                };
                if (this.changePosition) {
                    var _0xDD2C = new PIXI.Point(this.freeSpace.x + this.freeSpace.width / 2, this.freeSpace.y + this.freeSpace.height / 2);
                    this.gameObject.x = _0xDD2C.x;
                    this.gameObject.y = _0xDD2C.y
                };
                if (this.DEBUG) {
                    var _0x148CA = Components.DevUtils.getBounds(this.gameObject, true, true);
                    this.debugRect.beginFill(0x0000ff, 0.5);
                    this.debugRect.drawRect(_0x148CA.x, _0x148CA.y, _0x148CA.width, _0x148CA.height);
                    this.debugRect.beginFill(0xff0000, 0.5);
                    this.debugRect.drawRect(_0x148CA.centerX - 2, _0x148CA.centerY - 2, 5, 5);
                    this.debugRect.endFill()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[959], _0xB90A[5], function _0x1484D(_0xDFB6) {
                var _0xD6A1 = this.leftLimit * this.gameObject.game.canvas.width;
                var _0xD6BA = this.topLimit * this.gameObject.game.canvas.height;
                var _0xD5F2 = (this.rightLimit - this.leftLimit) * this.gameObject.game.canvas.width;
                var _0xD5C0 = (this.botLimit - this.topLimit) * this.gameObject.game.canvas.height;
                var _0x14960 = _0xD6BA;
                var _0x14915 = _0xD6A1;
                var _0x1492E = _0xD6A1 + _0xD5F2;
                var _0x14947 = _0xD6BA + _0xD5C0;
                var _0x149C4 = 0;
                var _0x14979 = Core.game.canvas.height;
                var _0x14992 = 0;
                var _0x149AB = Core.game.canvas.width;
                var _0x14A28 = _0x14915 - _0x149C4;
                if (Math.abs(_0x14A28 - Core.game.canvas.height) < 3) {
                    _0x14A28 = Number.MAX_SAFE_INTEGER
                };
                var _0x14A0F = _0x149AB - _0x1492E;
                if (Math.abs(_0x14A0F - Core.game.canvas.width) < 3) {
                    _0x14A0F = Number.MAX_SAFE_INTEGER
                };
                var _0x149DD = _0x14979 - _0x14960;
                if (Math.abs(_0x149DD - Core.game.canvas.height) < 3) {
                    _0x149DD = Number.MAX_SAFE_INTEGER
                };
                var _0x149F6 = _0x14947 - _0x14992;
                if (Math.abs(_0x149F6 - Core.game.canvas.width) < 3) {
                    _0x149F6 = Number.MAX_SAFE_INTEGER
                };
                var _0xD2EB = Phaser.Math.min(_0x14A28, _0x14A0F, _0x149DD, _0x149F6);
                if (_0xD2EB == _0x14A28) {
                    return _0x147D0.top
                };
                if (_0xD2EB == _0x14A0F) {
                    return _0x147D0.rigth
                };
                if (_0xD2EB == _0x149DD) {
                    return _0x147D0.bottom
                };
                if (_0xD2EB == _0x149F6) {
                    return _0x147D0.left
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                _get(_getPrototypeOf(_0x147E9.prototype), _0xB90A[24], this).call(this);
                _0x147E9.groupMap.clear()
            })], [_0xC639(_0xB90A[13], _0xB90A[960], _0xB90A[5], function _0x1481B(_0x1487F, _0xCC47) {
                if (_0xCC47.getComponent(_0x147E9)) {
                    return
                };
                if (_0x147E9.groupMap.has(_0x1487F)) {
                    var _0xD0F7 = _0x147E9.groupMap[_0xB90A[8]](_0x1487F);
                    if (_0xD0F7.indexOf(_0xCC47) == -1) {
                        _0xD0F7.push(_0xCC47)
                    }
                } else {
                    var _0xD0F7 = [];
                    _0xD0F7.push(_0xCC47);
                    _0x147E9.groupMap[_0xB90A[95]](_0x1487F, _0xD0F7)
                }
            })]);
            return _0x147E9
        }(Scene.Component);
        _0x147E9.UPDATE_FIT = _0xB90A[961];
        _0x147E9.groupMap = new Map();
        _0x147E9.chachedGroupFreeSpace = new Map();
        Components.SizeFit = _0x147E9;
        var _0x147D0;
        (function(_0x147D0) {
            _0x147D0[_0x147D0[_0xB90A[920]] = 0] = _0xB90A[920];
            _0x147D0[_0x147D0[_0xB90A[962]] = 1] = _0xB90A[962];
            _0x147D0[_0x147D0[_0xB90A[921]] = 2] = _0xB90A[921];
            _0x147D0[_0x147D0[_0xB90A[919]] = 3] = _0xB90A[919]
        })(_0x147D0 = Components.Edge || (Components.Edge = {}))
    }

    function _0xC283(Components) {
        var _0x14A8C = function(_0x14AA5) {
            _0xBA1D(_0x14A8C, _0x14AA5);

            function _0x14A8C() {
                var _0x14AD7;
                _0xB955(this, _0x14A8C);
                _0x14AD7 = _0xB9A0(this, _getPrototypeOf(_0x14A8C).apply(this, arguments));
                _0x14AD7.leftLimit = 5;
                _0x14AD7.topLimit = 5;
                _0x14AD7.rightLimit = 5;
                _0x14AD7.bottomLimit = 5;
                _0x14AD7.sliceImage = function() {
                    if (_0x14AD7.leftLimit != 0) {
                        _0x14AD7.leftSide = new Util.Bitmap(_0x14AD7.leftLimit, _0x14AD7.gameObject.unscaledHeight - _0x14AD7.topLimit - _0x14AD7.bottomLimit);
                        _0x14AD7.leftSide.draw(_0x14AD7.gameObject.texture.baseTexture.source, -_0x14AD7.leftLimit, -_0x14AD7.topLimit)
                    };
                    if (_0x14AD7.topLimit != 0) {
                        _0x14AD7.topSide = new Util.Bitmap(_0x14AD7.gameObject.unscaledWidth - _0x14AD7.leftLimit - _0x14AD7.rightLimit, _0x14AD7.topLimit);
                        _0x14AD7.topSide.draw(_0x14AD7.gameObject.texture.baseTexture.source, -_0x14AD7.leftLimit, -_0x14AD7.topLimit)
                    };
                    if (_0x14AD7.rightLimit != 0) {
                        _0x14AD7.rightSide = new Util.Bitmap(_0x14AD7.rightLimit, _0x14AD7.gameObject.unscaledHeight - _0x14AD7.topLimit - _0x14AD7.bottomLimit);
                        _0x14AD7.rightSide.draw(_0x14AD7.gameObject.texture.baseTexture.source, -(_0x14AD7.gameObject.unscaledWidth - _0x14AD7.rightLimit), -_0x14AD7.topLimit)
                    };
                    if (_0x14AD7.bottomLimit != 0) {
                        _0x14AD7.bottomSide = new Util.Bitmap(_0x14AD7.gameObject.unscaledWidth - _0x14AD7.leftLimit - _0x14AD7.rightLimit, _0x14AD7.bottomLimit);
                        _0x14AD7.bottomSide.draw(_0x14AD7.gameObject.texture.baseTexture.source, -_0x14AD7.leftLimit, -(_0x14AD7.gameObject.unscaledHeight - _0x14AD7.bottomLimit))
                    };
                    if (_0x14AD7.topLimit != 0 && _0x14AD7.leftLimit != 0) {
                        _0x14AD7.topLeftCorner = new Util.Bitmap(_0x14AD7.leftLimit, _0x14AD7.topLimit);
                        _0x14AD7.topLeftCorner.draw(_0x14AD7.gameObject.texture.baseTexture.source)
                    };
                    if (_0x14AD7.topLimit != 0 && _0x14AD7.rightLimit != 0) {
                        _0x14AD7.topRightCorner = new Util.Bitmap(_0x14AD7.rightLimit, _0x14AD7.topLimit);
                        _0x14AD7.topRightCorner.draw(_0x14AD7.gameObject.texture.baseTexture.source, -(_0x14AD7.gameObject.unscaledWidth - _0x14AD7.rightLimit))
                    };
                    if (_0x14AD7.bottomLimit != 0 && _0x14AD7.rightLimit != 0) {
                        _0x14AD7.bottomRightCorner = new Util.Bitmap(_0x14AD7.rightLimit, _0x14AD7.bottomLimit);
                        _0x14AD7.bottomRightCorner.draw(_0x14AD7.gameObject.texture.baseTexture.source, -(_0x14AD7.gameObject.unscaledWidth - _0x14AD7.rightLimit), -(_0x14AD7.gameObject.unscaledHeight - _0x14AD7.bottomLimit))
                    };
                    if (_0x14AD7.bottomLimit != 0 && _0x14AD7.leftLimit != 0) {
                        _0x14AD7.bottomLeftCorner = new Util.Bitmap(_0x14AD7.leftLimit, _0x14AD7.bottomLimit);
                        _0x14AD7.bottomLeftCorner.draw(_0x14AD7.gameObject.texture.baseTexture.source, 0, -(_0x14AD7.gameObject.unscaledHeight - _0x14AD7.bottomLimit))
                    };
                    _0x14AD7.centerSide = new Util.Bitmap(_0x14AD7.gameObject.unscaledWidth - _0x14AD7.leftLimit - _0x14AD7.rightLimit, _0x14AD7.gameObject.unscaledHeight - _0x14AD7.topLimit - _0x14AD7.bottomLimit);
                    _0x14AD7.centerSide.draw(_0x14AD7.gameObject.texture.baseTexture.source, -_0x14AD7.leftLimit, -_0x14AD7.topLimit)
                };
                _0x14AD7.onChange = function() {};
                return _0x14AD7
            }
            _0xB987(_0x14A8C, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.sliceImage();
                this.finalTexture = new Util.Bitmap(this.gameObject.unscaledWidth, this.gameObject.unscaledHeight)
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this._width = this.gameObject.unscaledWidth;
                this._height = this.gameObject.unscaledHeight;
                this.rescaleTo(this.gameObject.unscaledWidth, this.gameObject.unscaledHeight);
                this.gameObject.loadTexture(this.finalTexture)
            }), _0xC639(_0xB90A[13], _0xB90A[963], _0xB90A[5], function _0x14ABE(_0xE92F, _0xE916) {
                if (_0xE92F <= 0 || _0xE916 <= 0) {
                    this.finalTexture.resize(_0xE92F <= 0 ? 1 : _0xE92F, _0xE916 <= 0 ? 1 : _0xE916);
                    this.finalTexture.clear();
                    return
                };
                this.finalTexture.resize(_0xE92F, _0xE916);
                this.finalTexture.clear();
                if (this.leftLimit != 0) {
                    this.finalTexture.draw(this.leftSide, 0, this.topLimit, this.leftLimit, _0xE916 - this.topLimit - this.bottomLimit)
                };
                if (this.topLimit != 0) {
                    this.finalTexture.draw(this.topSide, this.leftLimit, 0, _0xE92F - this.leftLimit - this.rightLimit, this.topLimit)
                };
                if (this.rightLimit != 0) {
                    this.finalTexture.draw(this.rightSide, _0xE92F - this.rightLimit, this.topLimit, this.rightLimit, _0xE916 - this.topLimit - this.bottomLimit)
                };
                if (this.bottomLimit != 0) {
                    this.finalTexture.draw(this.bottomSide, this.leftLimit, _0xE916 - this.bottomLimit, _0xE92F - this.leftLimit - this.rightLimit, this.bottomLimit)
                };
                if (this.topLimit != 0 && this.leftLimit != 0) {
                    this.finalTexture.draw(this.topLeftCorner, 0, 0)
                };
                if (this.topLimit != 0 && this.rightLimit != 0) {
                    this.finalTexture.draw(this.topRightCorner, _0xE92F - this.rightLimit, 0)
                };
                if (this.bottomLimit != 0 && this.rightLimit != 0) {
                    this.finalTexture.draw(this.bottomRightCorner, _0xE92F - this.rightLimit, _0xE916 - this.bottomLimit)
                };
                if (this.bottomLimit != 0 && this.leftLimit != 0) {
                    this.finalTexture.draw(this.bottomLeftCorner, 0, _0xE916 - this.bottomLimit)
                };
                this.finalTexture.draw(this.centerSide, this.leftLimit, this.topLimit, _0xE92F - this.leftLimit - this.rightLimit, _0xE916 - this.topLimit - this.bottomLimit)
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.scale.onSizeChange.remove(this.onChange);
                _get(_getPrototypeOf(_0x14A8C.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[599], _0xB90A[8], function _0xE8CB() {
                return this._width
            }, _0xB90A[95], function _0x11D87(_0xE8FD) {
                this._width = _0xE8FD;
                this.rescaleTo(_0xE8FD, this._height)
            }), _0xC639(_0xB90A[13], _0xB90A[600], _0xB90A[8], function _0xE8CB() {
                return this._height
            }, _0xB90A[95], function _0x11D87(_0xE8FD) {
                this._height = _0xE8FD;
                this.rescaleTo(this._width, _0xE8FD)
            })]);
            return _0x14A8C
        }(Scene.Component);
        Components.SliceComponent = _0x14A8C
    }

    function _0xC29C(Components) {
        var _0x14AF0 = function(_0x14B09) {
            _0xBA1D(_0x14AF0, _0x14B09);

            function _0x14AF0() {
                var _0x14B22;
                _0xB955(this, _0x14AF0);
                _0x14B22 = _0xB9A0(this, _getPrototypeOf(_0x14AF0).apply(this, arguments));
                _0x14B22.charTag = _0xB90A[27];
                _0x14B22.charOrder = _0xB90A[27];
                _0x14B22.bubblesOrder = _0xB90A[27];
                _0x14B22.arrowName = _0xB90A[27];
                _0x14B22.BG_name = _0xB90A[27];
                _0x14B22.charOrderArray = [];
                _0x14B22.bubbleOrderArray = [];
                _0x14B22.current = -1;
                _0x14B22.transitioning = false;
                _0x14B22.transitionTime = 500;
                _0x14B22.initMc = function() {
                    if (_0x14B22.arrowName != _0xB90A[27]) {
                        _0x14B22.arrow = GameObject.getObject(_0x14B22.arrowName)
                    };
                    _0x14B22.bodies = GameObject.getObjectsByTag(_0x14B22.charTag, true);
                    _0x14B22.charOrderArray = _0x14B22.charOrder.split(_0xB90A[572]);
                    _0x14B22.bubbleOrderArray = _0x14B22.bubblesOrder.split(_0xB90A[572]);
                    for (var _0x14B3B = 0; _0x14B3B < _0x14B22.charOrderArray.length; _0x14B3B++) {
                        var _0xCE22 = _0x14B22.charOrderArray[_0x14B3B];
                        _0x14B22.bodies.push(GameObject.getObject(_0x14B22.charTag + _0xB90A[61] + _0xCE22))
                    }
                };
                _0x14B22.initMcProp = function() {
                    if (_0x14B22.arrow) {
                        _0x14B22.arrow.visible = false
                    };
                    _0x14B22.bodies.forEach(function(_0xCE22) {
                        _0xCE22.alpha = 0
                    })
                };
                _0x14B22.initLocalEvents = function() {
                    GameObject.getObject(_0x14B22.BG_name).addButtonPressedCallback(_0x14B22.goNext);
                    _0x14B22.arrow.addButtonPressedCallback(_0x14B22.goNext)
                };
                _0x14B22.goNext = function() {
                    if (!_0x14B22.transitioning) {
                        _0x14B22.hideStep(_0x14B22.current);
                        if (_0x14B22.current == _0x14B22.charOrderArray.length - 1) {
                            Core.game.input.onDown.remove(_0x14B22.goNext);
                            Managers.SceneManager.instance.loadUnit(_0xB90A[233], true)
                        } else {
                            _0x14B22.current = _0x14B22.current + 1 == _0x14B22.charOrderArray.length ? 0 : _0x14B22.current + 1;
                            _0x14B22.showStep(_0x14B22.current)
                        }
                    }
                };
                _0x14B22.hideStep = function(_0xE227) {
                    _0x14B22.arrow.visible = false;
                    var _0x104EB = _0x14B22.bodies[_0xE227];
                    if (_0x104EB) {
                        _0x14B22.transitioning = true;
                        if (_0x14B22.bodies[_0xE227 + 1] && _0x14B22.bodies[_0xE227 + 1] != _0x104EB) {
                            Components.Tweens.create(_0x104EB, true).to(_0xC639(_0xB90A[45], 0), _0x14B22.transitionTime, null, true)
                        }
                    }
                };
                _0x14B22.showStep = function(_0xE227) {
                    var _0x104EB = _0x14B22.bodies[_0xE227];
                    var _0xCE3B = _0x14B22.bubbleOrderArray[_0xE227];
                    _0x14B22.transitioning = true;
                    trace(_0x14B22.bodies[_0xE227], _0xE227, _0xB90A[964]);
                    Components.Tweens.create(_0x104EB, true).to(_0xC639(_0xB90A[45], 1), _0x14B22.transitionTime, null, true, _0x14B22.transitionTime).onComplete.addOnce(function() {
                        if (_0x14B22.arrow) {
                            _0x14B22.arrow.visible = true
                        };
                        _0x14B22.transitioning = false
                    });
                    _0x14B22.events.throwEvent(Components.LanguagePanel.SHOW_PANEL, Util.Util.createEventData([
                        [Components.LanguagePanel.TEXT_KEY, _0xCE3B]
                    ]))
                };
                return _0x14B22
            }
            _0xB987(_0x14AF0, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.initMcProp();
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                _get(_getPrototypeOf(_0x14AF0.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                this.hideStep(this.current);
                this.current = this.current + 1 == this.charOrderArray.length ? 0 : this.current + 1;
                this.showStep(this.current)
            })]);
            return _0x14AF0
        }(Scene.Component);
        Components.StoryPan = _0x14AF0
    }

    function _0xC2B5(Components) {
        var _0x14B54 = function(_0x14B6D) {
            _0xBA1D(_0x14B54, _0x14B6D);

            function _0x14B54() {
                var _0x14B86;
                _0xB955(this, _0x14B54);
                _0x14B86 = _0xB9A0(this, _getPrototypeOf(_0x14B54).apply(this, arguments));
                _0x14B86.scale = true;
                _0x14B86.px = 0;
                _0x14B86.py = 0;
                _0x14B86.initUi = function() {
                    _0x14B86.gameObject.game.scale.onSizeChange.add(_0x14B86.changeAspect);
                    _0x14B86.changeAspect()
                };
                _0x14B86.changeAspect = function() {
                    var _0x118A5 = Core.Main.game.canvas.width / _0x14B86.initialWidth;
                    var _0x118BE = Core.Main.game.canvas.height / _0x14B86.initialHeight;
                    var _0xD8F9 = _0x118A5 > _0x118BE ? _0x118BE : _0x118A5;
                    if (_0x14B86.gameObject.name != _0xB90A[965]) {
                        if (_0xD8F9 < 0.7) {
                            _0xD8F9 = 0.7
                        }
                    };
                    var _0x14B9F = new PIXI.Point(_0x14B86.anchX * _0x14B86.gameObject.game.world.width, _0x14B86.anchY * _0x14B86.gameObject.game.world.height);
                    var _0xD6A1 = _0x14B9F.x - _0x14B86.px * _0xD8F9;
                    var _0xD6BA = _0x14B9F.y - _0x14B86.py * _0xD8F9;
                    _0x14B86.gameObject.position[_0xB90A[95]](_0xD6A1, _0xD6BA);
                    if (_0x14B86.scale) {
                        _0x14B86.gameObject.scale[_0xB90A[95]](_0xD8F9, _0xD8F9)
                    }
                };
                return _0x14B86
            }
            _0xB987(_0x14B54, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(_0xB90A[28], this.initUi);
                this.initialWidth = Core.Main.gameWidth;
                this.initialHeight = Core.Main.gameHeight;
                if (this.auto) {
                    this.anchX = this.gameObject.x / this.initialWidth;
                    this.anchY = this.gameObject.y / this.initialHeight
                };
                this.anch = new PIXI.Point(this.anchX, this.anchY);
                this.worldAnch = new PIXI.Point(this.anchX * this.initialWidth, this.anchY * this.initialHeight);
                this.worldPosition = this.gameObject.game.world.toGlobal(this.gameObject.position);
                this.px = this.worldAnch.x - this.worldPosition.x;
                this.py = this.worldAnch.y - this.worldPosition.y
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.game.scale.onSizeChange.remove(this.changeAspect);
                _get(_getPrototypeOf(_0x14B54.prototype), _0xB90A[24], this).call(this)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x14B54
        }(Scene.Component);
        Components.UiAnchor = _0x14B54
    }

    function _0xC2CE(Components) {
        var _0x14BB8 = function(_0x14BD1) {
            _0xBA1D(_0x14BB8, _0x14BD1);

            function _0x14BB8() {
                var _0x14BEA;
                _0xB955(this, _0x14BB8);
                _0x14BEA = _0xB9A0(this, _getPrototypeOf(_0x14BB8).apply(this, arguments));
                _0x14BEA.objectPool = [];
                _0x14BEA.destX = 321;
                _0x14BEA.destY = 35;
                _0x14BEA.destSX = 0.72;
                _0x14BEA.destSY = 0.72;
                _0x14BEA.showAnimation = function(_0xCF35) {
                    Components.DevUtils.playSound(_0xB90A[966]);
                    var _0xCD8C = _0xCF35.getData(_0xB90A[62]);
                    for (var _0x14C03 = 0; _0x14C03 < 30 && _0x14BEA.objectPool.length > 0; _0x14C03++) {
                        var _0xEF56 = _0x14BEA.objectPool.shift();
                        _0xEF56.visible = true;
                        _0xEF56.alpha = 0;
                        _0xEF56.angle = 0;
                        _0xEF56.scale[_0xB90A[95]](1, 1);
                        Components.Tweens.create(_0xEF56).to(_0xC639(_0xB90A[45], 1), 100, null, true);
                        _0xEF56.x = _0xCD8C[0];
                        _0xEF56.y = _0xCD8C[1];
                        var _0x10969 = Math.random() * 300 - 150 + _0xEF56.x;
                        var _0x10982 = Math.random() * 300 - 150 + _0xEF56.y;
                        _0xEF56.x = _0x10969;
                        _0xEF56.y = _0x10982;
                        var _0x10167 = 600 + Math.random() * 200;
                        Components.Tweens.create(_0xEF56).to(_0xC639(_0xB90A[43], _0xCD8C[2], _0xB90A[44], _0xCD8C[3]), 600, Phaser.Easing.Quadratic.In, true, _0x10167);
                        _0xEF56.x = _0xCD8C[0];
                        _0xEF56.y = _0xCD8C[1];
                        Components.Tweens.create(_0xEF56).to(_0xC639(_0xB90A[43], _0x10969, _0xB90A[44], _0x10982), _0x10167, Phaser.Easing.Circular.Out, true);
                        Components.Tweens.create(_0xEF56.scale).to(_0xC639(_0xB90A[43], _0x14BEA.destSX, _0xB90A[44], _0x14BEA.destSY), 100, null, true);
                        Components.Tweens.create(_0xEF56.scale).to(_0xC639(_0xB90A[43], -_0x14BEA.destSX), 200 + Math.random() * 200, null, true, 100, 5, true);
                        Components.Tweens.create(_0xEF56).to(_0xC639(_0xB90A[45], 0), 200, null, true, _0x10167 + 600);
                        _0x14BEA.objectPool.push(_0xEF56)
                    };
                    _0x14BEA.gameObject.game.time.events.add(600, function() {
                        _0x14BEA.events.throwEvent(Components.ScrollController.ENABLE_SCROOLS)
                    }, _0xB9B9(_0x14BEA))
                };
                return _0x14BEA
            }
            _0xB987(_0x14BB8, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                trace(this.gameObject.name, this.gameObject.parent.name, _0xB90A[967]);
                this.coin = GameObject.getObject(_0xB90A[968]);
                this.coin.alpha = 0;
                for (var _0x14C1C = 0; _0x14C1C < 200; _0x14C1C++) {
                    var _0xEF56 = new GameObject(this.gameObject.game, _0xB90A[969] + _0x14C1C);
                    _0xEF56.loadTexture(this.coin.texture);
                    this.objectPool.push(_0xEF56);
                    this.gameObject.addChild(_0xEF56);
                    _0xEF56.anchor[_0xB90A[95]](0.5, 0.5);
                    _0xEF56.visible = false
                };
                this.events.addEventListener(_0x14BB8.COIN_ANIM, this.showAnimation)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x14BB8
        }(Scene.Component);
        _0x14BB8.COIN_ANIM = _0xB90A[970];
        Components.CoinAnimation = _0x14BB8
    }

    function _0xC2E7(Components) {
        var _0x14C35 = function(_0x14C4E) {
            _0xBA1D(_0x14C35, _0x14C4E);

            function _0x14C35() {
                var _0x14C67;
                _0xB955(this, _0x14C35);
                _0x14C67 = _0xB9A0(this, _getPrototypeOf(_0x14C35).apply(this, arguments));
                _0x14C67.intMc = function() {};
                return _0x14C67
            }
            _0xB987(_0x14C35, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.intMc()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x14C35
        }(Scene.Component);
        Components.DollPotionAward = _0x14C35
    }

    function _0xC300(Components) {
        var _0x14C80 = function(_0x14C99) {
            _0xBA1D(_0x14C80, _0x14C99);

            function _0x14C80() {
                var _0x14CB2;
                _0xB955(this, _0x14C80);
                _0x14CB2 = _0xB9A0(this, _getPrototypeOf(_0x14C80).apply(this, arguments));
                _0x14CB2.overritePosition = function() {
                    var _0x14CCB = Core.Main.game.canvas.width / 2;
                    var _0x14CE4 = Core.Main.game.canvas.height - _0x14CB2.potSize.height / 2 * _0x14CB2.gameObject.scale.y;
                    if (_0x14CB2.gameObject.x != _0x14CCB || _0x14CB2.gameObject.y != _0x14CE4) {
                        _0x14CB2.gameObject.x = _0x14CCB;
                        _0x14CB2.gameObject.y = _0x14CE4
                    }
                };
                return _0x14CB2
            }
            _0xB987(_0x14C80, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.potSize = Components.DevUtils.getBounds(this.gameObject, true, true);
                this.events.addEventListener(_0xB90A[29], this.overritePosition)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x14C80
        }(Scene.Component);
        Components.PotAnchor = _0x14C80
    }

    function _0xC319(Components) {
        var _0x14CFD = function(_0x14D16) {
            _0xBA1D(_0x14CFD, _0x14D16);

            function _0x14CFD() {
                var _0x14D2F;
                _0xB955(this, _0x14CFD);
                _0x14D2F = _0xB9A0(this, _getPrototypeOf(_0x14CFD).apply(this, arguments));
                _0x14D2F.colorArray = [0xEAF205, 0xF907DE, 0xA44EF4, 0xAB52FF, 0x0062FA, 0x00B4E0, 0x00F5BA, 0x00E048, 0x26FF00, 0x00F9FA, 0xAA00FF, 0x002EFF, 0x00F9FA, 0x00E61B, 0xF1FF00, 0x00F5FF, 0x00FFAF, 0x00FA52, 0x06E600, 0x76FF00, 0xFFD700, 0xE6DF00, 0xA9FA01, 0x3BFF00, 0x00FF2A, 0xD1FF00, 0xFFEC00, 0xE63200, 0xFF0900, 0xE60235, 0xFA1E03, 0xFF03D9, 0xFF2500, 0xFA0023, 0xE600AE, 0xCA00FF, 0xC300E6, 0x8200FF, 0xFF00C5, 0x0066FF, 0x00CAFF, 0x00D9E6, 0x009AFA, 0x00FFB4, 0x00FF4F, 0x00E698, 0x00F7FA, 0x00A7FF, 0x00FA60, 0xFFEC00, 0xBCE600, 0x0088FF, 0x00FFDF, 0x00FA3E, 0xC600FF, 0xFF00EF, 0xFF0070, 0x6ee1ff, 0x53bdfb, 0x9321ba, 0x681c9d];
                _0x14D2F.initMc = function() {
                    _0x14D2F.potIdle = GameObject.getObject(_0xB90A[971]);
                    _0x14D2F.potFail = GameObject.getObject(_0xB90A[972]);
                    _0x14D2F.potWin = GameObject.getObject(_0xB90A[973]);
                    _0x14D2F.smokeAnimm = GameObject.getObject(_0xB90A[974]);
                    _0x14D2F.splashAnim = GameObject.getObject(_0xB90A[975]);
                    _0x14D2F.boilingAnim = GameObject.getObject(_0xB90A[976]);
                    _0x14D2F.failAnim = GameObject.getObject(_0xB90A[977]);
                    _0x14D2F.liquidAnim = GameObject.getObject(_0xB90A[978]);
                    _0x14D2F.liquidWin_1 = GameObject.getObject(_0xB90A[979]);
                    _0x14D2F.liquidWin_2 = GameObject.getObject(_0xB90A[980]);
                    _0x14D2F.dollsAnim = GameObject.getObjectsByTag(_0xB90A[981], true, 1, 0);
                    _0x14D2F.smokeAnimm.alpha = 0.5;
                    _0x14D2F.startSplash = _0x14D2F.splashAnim.getComponent(Components.AnimationScheduler).startEvent;
                    _0x14D2F.endSplash = _0x14D2F.splashAnim.getComponent(Components.AnimationScheduler).endEvent;
                    _0x14D2F.startFail = _0x14D2F.failAnim.getComponent(Components.AnimationScheduler).startEvent;
                    _0x14D2F.endFail = _0x14D2F.failAnim.getComponent(Components.AnimationScheduler).endEvent;
                    _0x14D2F.startWin = _0x14D2F.liquidWin_1.getComponent(Components.AnimationScheduler).startEvent;
                    _0x14D2F.endWin = _0x14D2F.liquidWin_1.getComponent(Components.AnimationScheduler).endEvent;
                    _0x14D2F.endDoll = _0x14D2F.dollsAnim[0].getComponent(Components.AnimationScheduler).endEvent
                };
                _0x14D2F.initMcProp = function() {
                    _0x14D2F.potWin.alpha = 0;
                    _0x14D2F.potWin.visible = false;
                    _0x14D2F.potFail.visible = false;
                    _0x14D2F.splashAnim.visible = false;
                    0;
                    _0x14D2F.newTint = _0x14D2F.colorArray[Math.floor(Math.random() * _0x14D2F.colorArray.length)];
                    _0x14D2F.lastColor = _0x14D2F.newTint;
                    _0x14D2F.changeTint()
                };
                _0x14D2F.initLocalEvent = function() {
                    _0x14D2F.events.addEventListener(_0x14CFD.SPLASH, _0x14D2F.handleSplash);
                    _0x14D2F.events.addEventListener(_0x14CFD.POT_FAIL, _0x14D2F.handlePotFail);
                    _0x14D2F.events.addEventListener(_0x14CFD.POT_WIN, _0x14D2F.handlePotWin);
                    _0x14D2F.events.addEventListener(_0x14D2F.endSplash, _0x14D2F.handleEndSplash);
                    _0x14D2F.events.addEventListener(_0x14D2F.endFail, _0x14D2F.handleEndFail);
                    _0x14D2F.events.addEventListener(_0x14D2F.endWin, _0x14D2F.handleEndWin);
                    _0x14D2F.events.addEventListener(_0x14D2F.endDoll, _0x14D2F.handleEndDollAnim)
                };
                _0x14D2F.handleEndWin = function() {
                    _0x14D2F.potIdle.alpha = 0;
                    _0x14D2F.potIdle.visible = true;
                    if (Components.PotionController.UNLOCK_ACTIVE != 0) {
                        _0x14D2F.dollsAnim[Components.PotionController.UNLOCK_ACTIVE - 1].alpha = 1;
                        _0x14D2F.events.throwEvent(_0x14D2F.dollsAnim[Components.PotionController.UNLOCK_ACTIVE - 1].name);
                        Components.PotionController.UNLOCK_ACTIVE = 0
                    };
                    Components.Tweens.create(_0x14D2F.potIdle).to(_0xC639(_0xB90A[45], 1), 400, null, true);
                    Components.Tweens.create(_0x14D2F.potWin).to(_0xC639(_0xB90A[45], 0), 400, null, true, 100).onComplete.addOnce(function() {
                        _0x14D2F.potWin.visible = false;
                        _0x14D2F.events.throwEvent(Components.PotionController.POTION_RESTART);
                        _0x14D2F.events.throwEvent(Components.ScrollController.ENABLE_SCROOLS)
                    })
                };
                _0x14D2F.handleEndDollAnim = function() {
                    _0x14D2F.events.throwEvent(Components.ScrollController.ENABLE_SCROOLS);
                    _0x14D2F.dollsAnim.forEach(function(_0xCE22) {
                        _0xCE22.alpha = 0
                    })
                };
                _0x14D2F.handlePotWin = function() {
                    Components.DevUtils.playSound(_0xB90A[982]);
                    _0x14D2F.adNewTint(_0x14D2F.boilingAnim);
                    _0x14D2F.adNewTint(_0x14D2F.smokeAnimm);
                    _0x14D2F.adNewTint(_0x14D2F.splashAnim);
                    _0x14D2F.adNewTint(_0x14D2F.liquidWin_1);
                    _0x14D2F.adNewTint(_0x14D2F.liquidWin_2);
                    _0x14D2F.potWin.alpha = 0;
                    _0x14D2F.potWin.visible = true;
                    Components.Tweens.create(_0x14D2F.potWin).to(_0xC639(_0xB90A[45], 1), 10, null, true);
                    Components.Tweens.create(_0x14D2F.potIdle).to(_0xC639(_0xB90A[45], 0), 10, null, true).onComplete.addOnce(function() {
                        _0x14D2F.potIdle.visible = false
                    });
                    _0x14D2F.events.throwEvent(_0x14D2F.startWin)
                };
                _0x14D2F.handleEndFail = function() {
                    _0x14D2F.gameObject.game.time.events.add(500, function() {
                        _0x14D2F.potIdle.alpha = 0;
                        _0x14D2F.potIdle.visible = true;
                        Components.Tweens.create(_0x14D2F.potIdle).to(_0xC639(_0xB90A[45], 1), 400, null, true);
                        Components.Tweens.create(_0x14D2F.potFail).to(_0xC639(_0xB90A[45], 0), 400, null, true, 100).onComplete.addOnce(function() {
                            _0x14D2F.potFail.visible = false;
                            _0x14D2F.events.throwEvent(Components.PotionController.POTION_RESTART);
                            _0x14D2F.events.throwEvent(Components.ScrollController.ENABLE_SCROOLS)
                        })
                    }, _0xB9B9(_0x14D2F))
                };
                _0x14D2F.handlePotFail = function() {
                    Components.DevUtils.playSound(_0xB90A[983]);
                    _0x14D2F.adNewTint(_0x14D2F.liquidAnim);
                    _0x14D2F.adNewTint(_0x14D2F.failAnim);
                    _0x14D2F.potFail.alpha = 0;
                    _0x14D2F.potFail.visible = true;
                    Components.Tweens.create(_0x14D2F.potFail).to(_0xC639(_0xB90A[45], 1), 10, null, true);
                    Components.Tweens.create(_0x14D2F.potIdle).to(_0xC639(_0xB90A[45], 0), 10, null, true).onComplete.addOnce(function() {
                        _0x14D2F.potIdle.visible = false
                    });
                    _0x14D2F.events.throwEvent(_0x14D2F.startFail)
                };
                _0x14D2F.handleEndSplash = function() {
                    Components.Tweens.create(_0x14D2F.smokeAnimm, true).to(_0xC639(_0xB90A[45], 0.5), 300, null, true);
                    _0x14D2F.splashAnim.visible = false;
                    _0x14D2F.events.throwEvent(_0x14CFD.END_SPLASH)
                };
                _0x14D2F.handleSplash = function() {
                    Components.DevUtils.playSound(_0xB90A[984]);
                    _0x14D2F.changeTint();
                    Components.Tweens.create(_0x14D2F.smokeAnimm, true).to(_0xC639(_0xB90A[45], 0.2), 300, null, true);
                    _0x14D2F.splashAnim.visible = true;
                    _0x14D2F.events.throwEvent(_0x14D2F.startSplash)
                };
                _0x14D2F.changeTint = function() {
                    _0x14D2F.checkTint();
                    _0x14D2F.adNewTint(_0x14D2F.boilingAnim);
                    _0x14D2F.adNewTint(_0x14D2F.smokeAnimm);
                    _0x14D2F.adNewTint(_0x14D2F.splashAnim)
                };
                _0x14D2F.checkTint = function() {
                    _0x14D2F.newTint = _0x14D2F.colorArray[Math.floor(Math.random() * _0x14D2F.colorArray.length)];
                    while (_0x14D2F.lastColor == _0x14D2F.newTint) {
                        _0x14D2F.newTint = _0x14D2F.colorArray[Math.floor(Math.random() * _0x14D2F.colorArray.length)]
                    };
                    _0x14D2F.lastColor = _0x14D2F.newTint
                };
                _0x14D2F.adNewTint = function(_0xCCC4) {
                    for (var _0x14D48 = 0; _0x14D48 < _0xCCC4.children.length; _0x14D48++) {
                        var _0xCE22 = _0xCCC4.children[_0x14D48];
                        if (_0xB93C(_0xCE22, GameObject)) {
                            _0xCE22.tint = _0x14D2F.newTint
                        }
                    }
                };
                return _0x14D2F
            }
            _0xB987(_0x14CFD, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.initMcProp();
                this.initLocalEvent()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x14CFD
        }(Scene.Component);
        _0x14CFD.SPLASH = _0xB90A[985];
        _0x14CFD.END_SPLASH = _0xB90A[986];
        _0x14CFD.POT_FAIL = _0xB90A[987];
        _0x14CFD.POT_WIN = _0xB90A[988];
        _0x14CFD.POT_COINS = _0xB90A[989];
        Components.PotController = _0x14CFD
    }

    function _0xC332(Components) {
        var _0x14D61 = function(_0x14D7A) {
            _0xBA1D(_0x14D61, _0x14D7A);

            function _0x14D61() {
                var _0x14D93;
                _0xB955(this, _0x14D61);
                _0x14D93 = _0xB9A0(this, _getPrototypeOf(_0x14D61).apply(this, arguments));
                _0x14D93.potionTag = _0xB90A[990];
                _0x14D93.hitAreaName = _0xB90A[991];
                _0x14D93.itemsProp = new Map();
                _0x14D93.mix = [];
                _0x14D93.coinsAmount = 200;
                _0x14D93.initMc = function() {
                    _0x14D93.items = GameObject.getObjectsByTag(_0x14D93.potionTag);
                    _0x14D93.hitArea = GameObject.getObject(_0x14D93.hitAreaName);
                    _0x14D93.exitButton = GameObject.getObject(_0xB90A[992])
                };
                _0x14D93.intiMcProp = function() {
                    _0x14D93.createItemsProp()
                };
                _0x14D93.initLocalEvents = function() {
                    for (var _0x14DAC = 0; _0x14DAC < _0x14D93.items.length; _0x14DAC++) {
                        var _0xCE22 = _0x14D93.items[_0x14DAC];
                        _0xCE22.input.enableDrag(true);
                        _0xCE22.events.onDragStart.add(_0x14D93.hanldeDragStart);
                        _0xCE22.events.onDragStop.add(_0x14D93.handleDragStop)
                    };
                    _0x14D93.events.addEventListener(Components.PotController.END_SPLASH, _0x14D93.handleEndSplash);
                    _0x14D93.events.addEventListener(_0x14D61.POTION_RESTART, _0x14D93.handleRestart);
                    _0x14D93.events.addEventListener(_0x14D61.POTION_DISABLE, _0x14D93.disableAll);
                    _0x14D93.events.addEventListener(_0x14D61.POTION_ENABLE, _0x14D93.enableButtons);
                    _0x14D93.exitButton.addButtonPressedCallback(function() {
                        Managers.SceneManager.instance.loadUnit(_0xB90A[105] + Components.SessionData.CURRENT_WORLD, true)
                    })
                };
                _0x14D93.hanldeDragStart = function(_0xCE3B) {
                    Components.DevUtils.playSound(_0xB90A[993]);
                    var _0x13B50 = _0xCE3B.parent;
                    _0x13B50.setChildIndex(_0xCE3B, _0x13B50.children.length - 1)
                };
                _0x14D93.enableButtons = function() {
                    for (var _0x14DC5 = 0; _0x14DC5 < _0x14D93.items.length; _0x14DC5++) {
                        var _0xCE22 = _0x14D93.items[_0x14DC5];
                        if (_0xCE22.visible) {
                            _0xCE22.enableInput()
                        }
                    }
                };
                _0x14D93.handleRestart = function() {
                    _0x14D93.mix = [];
                    _0x14D93.enableAll()
                };
                _0x14D93.enableAll = function() {
                    var _0xCF4E = 0;
                    var _0x14DF7 = function _0x14DF7(_0x14DDE) {
                        var _0xCE22 = _0x14D93.items[_0x14DDE];
                        if (!_0xCE22.visible) {
                            _0xCF4E++;
                            _0xCE22.scale[_0xB90A[95]](0, 0);
                            _0xCE22.visible = true;
                            Components.Tweens.create(_0xCE22).to(_0xC639(_0xB90A[46], 360), 400, null, true, 100 * _0xCF4E);
                            Components.Tweens.create(_0xCE22.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 400, null, true, 100 * _0xCF4E).onComplete.addOnce(function() {
                                _0xCE22.enableInput()
                            })
                        } else {
                            _0xCE22.enableInput()
                        }
                    };
                    for (var _0x14DDE = 0; _0x14DDE < _0x14D93.items.length; _0x14DDE++) {
                        _0x14DF7(_0x14DDE)
                    }
                };
                _0x14D93.handleDragStop = function(_0xCE3B) {
                    var _0xCD8C = _0x14D93.itemsProp[_0xB90A[8]](_0xCE3B.name);
                    if (_0xCE3B.overlap(_0x14D93.hitArea)) {
                        Components.DevUtils.playSound(_0xB90A[994]);
                        _0x14D93.mix.push(_0xCE3B.name);
                        _0xCE3B.disableInput();
                        var _0x14E10 = Components.DevUtils.getBounds(_0x14D93.hitArea);
                        var _0x14E29 = _0xCE3B.parent.toLocal(new PIXI.Point(_0x14E10.centerX, _0x14E10.centerY - _0x14E10.height / 2 - _0x14E10.height / 10), _0x14D93.gameObject.game.world);
                        var _0xCBFC = Phaser.Math.distance(_0xCE3B.x, _0xCE3B.y, _0x14E29.x, _0x14E29.y);
                        if (_0x14D93.mix.length == 3) {
                            _0x14D93.disableAll();
                            _0x14D93.events.throwEvent(Components.ScrollController.DISABLE_SCROLLS)
                        };
                        Components.Tweens.create(_0xCE3B).to(_0xC639(_0xB90A[46], 360), _0xCBFC, null, true);
                        Components.Tweens.create(_0xCE3B).to(_0xC639(_0xB90A[43], _0x14E29.x, _0xB90A[44], _0x14E29.y), _0xCBFC, null, true).onComplete.addOnce(function() {
                            _0x14D93.events.throwEvent(Components.PotController.SPLASH);
                            Components.Tweens.create(_0xCE3B.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), _0xCBFC, null, true).onComplete.addOnce(function() {
                                _0xCE3B.visible = false;
                                _0xCE3B.scale[_0xB90A[95]](1, 1);
                                _0xCE3B.position[_0xB90A[95]](_0xCD8C.originalPos[0], _0xCD8C.originalPos[1])
                            })
                        })
                    } else {
                        Components.Tweens.create(_0xCE3B).to(_0xC639(_0xB90A[46], 360), 200, null, true);
                        Components.Tweens.create(_0xCE3B).to(_0xC639(_0xB90A[43], _0xCD8C.originalPos[0], _0xB90A[44], _0xCD8C.originalPos[1]), 200, null, true).onComplete.addOnce(function() {
                            _0xCE3B.angle = 0;
                            _0xCE3B.parent.setChildIndex(_0xCE3B, _0xCD8C.index)
                        })
                    }
                };
                _0x14D93.handleEndSplash = function() {
                    _0x14D93.handleOutCome()
                };
                _0x14D93.handleOutCome = function() {
                    var _0xE709 = false;
                    if (_0x14D93.mix.length == 3) {
                        for (var _0x14E42 = 0; _0x14E42 < _0x14D61.prizeArray.length; _0x14E42++) {
                            var _0xCE22 = _0x14D61.prizeArray[_0x14E42];
                            var _0xDA3E = 0;
                            for (var _0xC9D6 = 0; _0xC9D6 < _0xCE22.recipe.length; _0xC9D6++) {
                                var _0x14E74 = _0xCE22.recipe[_0xC9D6];
                                if (_0x14D93.mix.indexOf(_0x14E74) != -1) {
                                    _0xDA3E++
                                }
                            };
                            if (_0xDA3E == 3) {
                                if (!_0xCE22.unlocked && !_0xCE22.coins || _0xCE22.done && !_0xCE22.coins) {
                                    trace(_0xB90A[995]);
                                    _0xE709 = true;
                                    _0xCE22.coins = true;
                                    _0x14D93.events.throwEvent(Components.PotController.POT_WIN);
                                    _0x14D93.events.throwEvent(Components.PotController.POT_COINS);
                                    _0x14D93.gameObject.game.time.events.add(500, function() {
                                        var _0x14E10 = Components.DevUtils.getBounds(_0x14D93.hitArea);
                                        var _0x14E8D = GameObject.getObject(_0xB90A[996]);
                                        var _0xFB27 = GameObject.getObject(_0xB90A[997]).parent.toLocal(new PIXI.Point(_0x14E8D.x, _0x14E8D.y), _0x14D93.gameObject.game.world);
                                        var _0x14E29 = GameObject.getObject(_0xB90A[997]).parent.toLocal(new PIXI.Point(_0x14E10.centerX, _0x14E10.centerY - _0x14E10.height / 2 - _0x14E10.height / 10), _0x14D93.gameObject.game.world);
                                        _0x14D93.events.throwEvent(Components.CoinAnimation.COIN_ANIM, Util.Util.createEventData([
                                            [_0xB90A[62],
                                                [_0x14E29.x, _0x14E29.y - 100, Core.Main.game.canvas.width + _0xFB27.x * Core.Main.game.canvas.width / Core.Main.gameWidth, GameObject.getObject(_0xB90A[998]).y]
                                            ]
                                        ]));
                                        trace(_0xFB27)
                                    }, _0xB9B9(_0x14D93));
                                    _0x14D93.events.throwEvent(Components.SessionData.ADD_COINS, Util.Util.createEventData([
                                        [Components.SessionData.AMOUNT, _0x14D93.coinsAmount]
                                    ]))
                                };
                                if (_0xCE22.unlocked && !_0xCE22.done) {
                                    trace(_0xB90A[128]);
                                    _0xE709 = true;
                                    _0x14D61.UNLOCK_ACTIVE = _0x14E42 + 1;
                                    _0xCE22.done = true;
                                    _0x14D93.events.throwEvent(Components.PotController.POT_WIN);
                                    _0x14D93.events.throwEvent(Components.UnlockAnim.REPLACE_TEXTURE);
                                    for (var _0x14E5B = 0; _0x14E5B < _0xCE22.prize.length; _0x14E5B++) {
                                        var _0xD63D = _0xCE22.prize[_0x14E5B];
                                        Components.SessionData.UNLOCKED_ITEMS.push(_0xD63D);
                                        trace(_0xD63D)
                                    };
                                    Components.Storage.saveData(_0xB90A[111], Components.SessionData.UNLOCKED_ITEMS, true)
                                };
                                break
                            }
                        };
                        if (!_0xE709) {
                            _0x14D93.events.throwEvent(Components.PotController.POT_FAIL)
                        };
                        _0x14D93.mix = []
                    }
                };
                _0x14D93.disableAll = function() {
                    for (var _0x14EA6 = 0; _0x14EA6 < _0x14D93.items.length; _0x14EA6++) {
                        var _0xCE22 = _0x14D93.items[_0x14EA6];
                        _0xCE22.disableInput()
                    }
                };
                _0x14D93.createItemsProp = function() {
                    for (var _0x14EBF = 0; _0x14EBF < _0x14D93.items.length; _0x14EBF++) {
                        var _0xCE22 = _0x14D93.items[_0x14EBF];
                        var _0x14ED8 = {
                            originalPos: [_0xCE22.x, _0xCE22.y],
                            type: _0xCE22.tags[1],
                            block: false,
                            used: false,
                            index: _0xCE22.parent.getChildIndex(_0xCE22)
                        };
                        _0x14D93.itemsProp[_0xB90A[95]](_0xCE22.name, _0x14ED8)
                    }
                };
                return _0x14D93
            }
            _0xB987(_0x14D61, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.intiMcProp();
                this.initLocalEvents();
                Components.DevUtils.playSound(_0xB90A[999], true);
                this.events.addEventListener(_0xB90A[1000], function() {
                    Components.DevUtils.stopSound(_0xB90A[999])
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (Components.DevUtils.getUnitStartTimes(Components.DevUtils.getCurrentUnitName()) == 1) {
                    this.events.throwEvent(Components.TutorialPotion.SHOW_TUTORIAL)
                }
            })]);
            return _0x14D61
        }(Scene.Component);
        _0x14D61.POTION_RESTART = _0xB90A[1001];
        _0x14D61.POTION_DISABLE = _0xB90A[1002];
        _0x14D61.POTION_ENABLE = _0xB90A[1003];
        _0x14D61.UNLOCK_ACTIVE = 0;
        _0x14D61.prizeArray = [_0xC639(_0xB90A[1004], [_0xB90A[1005], _0xB90A[1006], _0xB90A[1007]], _0xB90A[1008], false, _0xB90A[555], false, _0xB90A[384], false, _0xB90A[510], [_0xB90A[1009], _0xB90A[1010], _0xB90A[1011], _0xB90A[1012]]), _0xC639(_0xB90A[1004], [_0xB90A[1013], _0xB90A[1014], _0xB90A[1015]], _0xB90A[1008], false, _0xB90A[555], false, _0xB90A[384], false, _0xB90A[510], [_0xB90A[1016], _0xB90A[1017], _0xB90A[1018]]), _0xC639(_0xB90A[1004], [_0xB90A[1019], _0xB90A[1020], _0xB90A[1021]], _0xB90A[1008], false, _0xB90A[555], false, _0xB90A[384], false, _0xB90A[510], [_0xB90A[1022], _0xB90A[1023], _0xB90A[1024]]), _0xC639(_0xB90A[1004], [_0xB90A[1025], _0xB90A[1026], _0xB90A[1027]], _0xB90A[1008], false, _0xB90A[555], false, _0xB90A[384], false, _0xB90A[510], [_0xB90A[1028], _0xB90A[1029], _0xB90A[1030], _0xB90A[1031], _0xB90A[1032]])];
        Components.PotionController = _0x14D61
    }

    function _0xC34B(Components) {
        var _0x14EF1 = function(_0x14F0A) {
            _0xBA1D(_0x14EF1, _0x14F0A);

            function _0x14EF1() {
                var _0x14F23;
                _0xB955(this, _0x14EF1);
                _0x14F23 = _0xB9A0(this, _getPrototypeOf(_0x14EF1).apply(this, arguments));
                _0x14F23.lockTag = _0xB90A[1033];
                _0x14F23.buttonTag = _0xB90A[1034];
                _0x14F23.numberTags = _0xB90A[1035];
                _0x14F23.scrollUnlockTag = _0xB90A[804];
                _0x14F23.scrollAnimTag = _0xB90A[1036];
                _0x14F23.buttonsPositions = [];
                _0x14F23.initMc = function() {
                    _0x14F23.scrollButtons = GameObject.getObjectsByTag(_0x14F23.buttonTag, true);
                    _0x14F23.lockMc = GameObject.getObjectsByTag(_0x14F23.lockTag, true);
                    _0x14F23.numbers = GameObject.getObjectsByTag(_0x14F23.numberTags, true);
                    _0x14F23.scrollUnlock = GameObject.getObjectsByTag(_0x14F23.scrollUnlockTag, true);
                    _0x14F23.scrollAnim = GameObject.getObjectsByTag(_0x14F23.scrollAnimTag, true);
                    _0x14F23.threeStarGames = Components.SessionData.PAPYRUS_COUNTER
                };
                _0x14F23.initLocalEvents = function() {
                    _0x14F23.events.addEventListener(_0x14EF1.DISABLE_SCROLLS, _0x14F23.disableAll);
                    _0x14F23.events.addEventListener(_0x14EF1.ENABLE_SCROOLS, _0x14F23.enableAll);
                    for (var _0x14F3C = 0; _0x14F3C < _0x14F23.scrollButtons.length; _0x14F3C++) {
                        var _0xCE22 = _0x14F23.scrollButtons[_0x14F3C];
                        _0x14F23.buttonsPositions.push(_0xCE22.position.clone());
                        _0xCE22.addButtonPressedCallback(_0x14F23.handleScrollClick)
                    }
                };
                _0x14F23.handleScrollClick = function(_0xCE3B) {
                    Components.DevUtils.playSound(_0xB90A[1037]);
                    _0x14F23.disableAll();
                    _0x14F23.events.throwEvent(Components.PotionController.POTION_DISABLE);
                    _0x14F23.currentTag = Number(_0xCE3B.tags[1]) - 1;
                    _0x14F23.currenScroll = _0xCE3B;
                    _0x14F23.start = _0x14F23.scrollAnim[_0x14F23.currentTag].getComponent(Components.AnimationScheduler).startEvent;
                    _0x14F23.end = _0x14F23.scrollAnim[_0x14F23.currentTag].getComponent(Components.AnimationScheduler).endEvent;
                    _0xCE3B.alpha = 1;
                    _0x14F23.scrollUnlock[_0x14F23.currentTag].visible = false;
                    var _0x14F55 = _0xCE3B.parent.toLocal(new PIXI.Point(Core.Main.game.canvas.width / 2, Core.Main.game.canvas.height / 2), _0x14F23.gameObject.game.world);
                    Components.Tweens.create(_0xCE3B).to(_0xC639(_0xB90A[46], 360), 200, null, true);
                    Components.Tweens.create(_0xCE3B).to(_0xC639(_0xB90A[43], _0x14F55.x, _0xB90A[44], _0x14F55.y), 200, null, true).onComplete.addOnce(function() {
                        _0xCE3B.visible = false;
                        _0xCE3B.position.x = _0x14F23.buttonsPositions[_0x14F23.currentTag].x;
                        _0xCE3B.position.y = _0x14F23.buttonsPositions[_0x14F23.currentTag].y;
                        _0x14F23.events.addEventListener(_0x14F23.end, _0x14F23.hanleEndAnim);
                        _0x14F23.scrollAnim[_0x14F23.currentTag].visible = true;
                        _0x14F23.events.throwEvent(_0x14F23.start)
                    })
                };
                _0x14F23.hanleEndAnim = function() {
                    Components.DevUtils.playSound(_0xB90A[1038]);
                    _0x14F23.events.throwEvent(Components.PotionController.POTION_ENABLE);
                    var _0x14F55 = _0x14F23.currenScroll.parent.toLocal(new PIXI.Point(Core.Main.game.canvas.width / 2, Core.Main.game.canvas.height / 2), _0x14F23.gameObject.game.world);
                    _0x14F23.currenScroll.x = _0x14F55.x;
                    _0x14F23.currenScroll.y = _0x14F55.y;
                    _0x14F23.currenScroll.visible = true;
                    _0x14F23.events.removeEventListener(_0x14F23.end, _0x14F23.hanleEndAnim);
                    for (var _0x14F6E = 0; _0x14F6E < _0x14F23.scrollAnim.length; _0x14F6E++) {
                        var _0xCE22 = _0x14F23.scrollAnim[_0x14F6E];
                        _0xCE22.visible = false
                    };
                    Components.Tweens.create(_0x14F23.currenScroll).to(_0xC639(_0xB90A[46], 360), 200, null, true);
                    Components.Tweens.create(_0x14F23.currenScroll).to(_0xC639(_0xB90A[43], _0x14F23.buttonsPositions[_0x14F23.currentTag].x, _0xB90A[44], _0x14F23.buttonsPositions[_0x14F23.currentTag].y), 400, null, true).onComplete.addOnce(function() {
                        _0x14F23.enableAll()
                    })
                };
                _0x14F23.enableAll = function() {
                    _0x14F23.checkScroll()
                };
                _0x14F23.disableAll = function() {
                    for (var _0x14F87 = 0; _0x14F87 < _0x14F23.scrollButtons.length; _0x14F87++) {
                        var _0xCE22 = _0x14F23.scrollButtons[_0x14F87];
                        _0xCE22.disableInput()
                    }
                };
                _0x14F23.initMcProp = function() {
                    _0x14F23.hideUnlock();
                    _0x14F23.checkScroll();
                    _0x14F23.checkNumbers()
                };
                _0x14F23.hideUnlock = function() {
                    for (var _0x14FB9 = 0; _0x14FB9 < _0x14F23.scrollUnlock.length; _0x14FB9++) {
                        var _0xCE22 = _0x14F23.scrollUnlock[_0x14FB9];
                        _0xCE22.visible = false
                    };
                    for (var _0x14FD2 = 0; _0x14FD2 < _0x14F23.scrollAnim.length; _0x14FD2++) {
                        var _0x14FA0 = _0x14F23.scrollAnim[_0x14FD2];
                        _0x14FA0.visible = false
                    }
                };
                _0x14F23.checkNumbers = function() {
                    for (var _0x14FEB = 0; _0x14FEB < _0x14F23.numbers.length; _0x14FEB++) {
                        var _0xCE22 = _0x14F23.numbers[_0x14FEB];
                        if (Number(_0xCE22.tags[1]) < _0x14F23.threeStarGames) {
                            if (Number(_0xCE22.tags[1]) % 2 == 0 && Number(_0xCE22.tags[2]) != 0) {
                                _0xCE22.visible = true
                            } else {
                                _0xCE22.visible = false
                            }
                        } else {
                            if (Number(_0xCE22.tags[1]) == _0x14F23.threeStarGames) {
                                _0xCE22.visible = true
                            } else {
                                if (Number(_0xCE22.tags[1]) >= _0x14F23.threeStarGames && Number(_0xCE22.tags[2]) == 0) {
                                    _0xCE22.visible = true
                                } else {
                                    _0xCE22.visible = false
                                }
                            }
                        }
                    }
                };
                _0x14F23.checkScroll = function() {
                    for (var _0x15004 = 0; _0x15004 < _0x14F23.scrollButtons.length; _0x15004++) {
                        var _0xCE3B = _0x14F23.scrollButtons[_0x15004];
                        var _0x11B61 = _0x14F23.lockMc[_0x15004];
                        var _0x1501D = _0x14F23.scrollUnlock[_0x15004];
                        if (Number(_0xCE3B.tags[1]) * 2 <= _0x14F23.threeStarGames) {
                            Components.PotionController.prizeArray[_0x15004].unlocked = true;
                            _0x11B61.visible = false;
                            _0xCE3B.enableInput();
                            if (!_0x14EF1.unlocksPlayed[_0x15004]) {
                                _0x1501D.visible = true;
                                _0x14EF1.unlocksPlayed[_0x15004] = true;
                                _0xCE3B.alpha = 0;
                                _0x14F23.events.throwEvent(_0x1501D.name)
                            }
                        } else {
                            _0xCE3B.visible = false;
                            _0xCE3B.disableInput()
                        }
                    }
                };
                return _0x14F23
            }
            _0xB987(_0x14EF1, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.initMcProp();
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x14EF1
        }(Scene.Component);
        _0x14EF1.DISABLE_SCROLLS = _0xB90A[1039];
        _0x14EF1.ENABLE_SCROOLS = _0xB90A[1040];
        _0x14EF1.unlocksPlayed = [];
        Components.ScrollController = _0x14EF1
    }

    function _0xC364(Components) {
        var _0x15036 = function(_0x1504F) {
            _0xBA1D(_0x15036, _0x1504F);

            function _0x15036() {
                var _0x15081;
                _0xB955(this, _0x15036);
                _0x15081 = _0xB9A0(this, _getPrototypeOf(_0x15036).apply(this, arguments));
                _0x15081.initLocalEvents = function() {
                    _0x15081.events.addEventListener(_0x15036.SHOW_TUTORIAL, _0x15081.handleShowTutorial);
                    _0x15081.events.addEventListener(_0x15036.END_TUTORIAL, _0x15081.handleEndTutorial)
                };
                _0x15081.handleShowTutorial = function() {
                    _0x15081.darkLayer.alpha = 0;
                    _0x15081.darkLayer.enableInput();
                    _0x15081.darkLayer.visible = true;
                    _0x15081.holder.alpha = 0;
                    _0x15081.holder.visible = true;
                    Components.Tweens.create(_0x15081.darkLayer).to(_0xC639(_0xB90A[45], 0.4), 400, null, true).onComplete.addOnce(function() {
                        Components.Tweens.create(_0x15081.holder).to(_0xC639(_0xB90A[45], 1), 200, null, true).onComplete.addOnce(function() {
                            _0x15081.events.throwEvent(_0xB90A[1041])
                        })
                    })
                };
                _0x15081.handleEndTutorial = function() {
                    Components.Tweens.create(_0x15081.holder).to(_0xC639(_0xB90A[45], 0), 200, null, true).onComplete.addOnce(function() {
                        Components.Tweens.create(_0x15081.darkLayer).to(_0xC639(_0xB90A[45], 0), 200, null, true).onComplete.addOnce(function() {
                            _0x15081.darkLayer.disableInput();
                            _0x15081.darkLayer.visible = false;
                            _0x15081.holder.visible = false;
                            _0x15081.gameObject.visible = false
                        })
                    })
                };
                _0x15081.initMc = function() {
                    _0x15081.darkLayer = GameObject.getObject(_0xB90A[1042]);
                    _0x15081.holder = GameObject.getObject(_0xB90A[1043])
                };
                _0x15081.initMcProp = function() {
                    _0x15081.darkLayer.visible = false;
                    _0x15081.darkLayer.disableInput();
                    _0x15081.holder.visible = false
                };
                return _0x15081
            }
            _0xB987(_0x15036, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x15068 = this;
                this.initMc();
                this.initMcProp();
                this.initLocalEvents();
                this.events.addEventListener(_0xB90A[28], function() {
                    if (Components.SessionData.UNLOCKED_LEVELS.indexOf(_0xB90A[1044]) == -1) {
                        Components.SessionData.UNLOCKED_LEVELS.push(_0xB90A[1044])
                    } else {
                        _0x15068.events.throwEvent(_0x15036.END_TUTORIAL)
                    }
                })
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x15036
        }(Scene.Component);
        _0x15036.SHOW_TUTORIAL = _0xB90A[1045];
        _0x15036.END_TUTORIAL = _0xB90A[1046];
        Components.TutorialPotion = _0x15036
    }

    function _0xC37D(Components) {
        var _0x1509A = function(_0x150B3) {
            _0xBA1D(_0x1509A, _0x150B3);

            function _0x1509A() {
                var _0x150CC;
                _0xB955(this, _0x1509A);
                _0x150CC = _0xB9A0(this, _getPrototypeOf(_0x1509A).apply(this, arguments));
                _0x150CC.handleReplace = function() {
                    if (Components.PotionController.prizeArray[Number(_0x150CC.gameObject.tags[1]) - 1].done) {
                        Util.Globals.addToGlobals(_0x150CC.gameObject.name, true);
                        var _0x150E5 = Util.Bitmap.create(10, 10);
                        _0x150CC.gameObject.loadTexture(_0x150E5)
                    }
                };
                return _0x150CC
            }
            _0xB987(_0x1509A, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0x1509A.REPLACE_TEXTURE, this.handleReplace);
                if (Util.Globals.getFromGlobals(this.gameObject.name)) {
                    this.handleReplace()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x1509A
        }(Scene.Component);
        _0x1509A.REPLACE_TEXTURE = _0xB90A[1047];
        Components.UnlockAnim = _0x1509A
    }

    function _0xC396(Components) {
        var _0x150FE = function(_0x15117) {
            _0xBA1D(_0x150FE, _0x15117);

            function _0x150FE() {
                var _0x15162;
                _0xB955(this, _0x150FE);
                _0x15162 = _0xB9A0(this, _getPrototypeOf(_0x150FE).apply(this, arguments));
                _0x15162.piecesArray = [];
                _0x15162.dropZoneArray = [];
                _0x15162.originalPiecesArray = [];
                _0x15162.originalDropZoneArray = [];
                _0x15162.piecesTag = _0xB90A[27];
                _0x15162.dropZoneTag = _0xB90A[27];
                _0x15162.piecesContainer = _0xB90A[27];
                _0x15162.finalImage = _0xB90A[27];
                _0x15162.randomiseArray = [];
                _0x15162.originalPiecePos = new Map();
                _0x15162.destroyed = false;
                _0x15162.handleTimer = function() {
                    if (_0x15162.destroyed) {
                        return
                    };

                    _0x15162.totalTime = Components.GameTimer.instance.getTimeLeft(Components.TimerType.minigame);
                    _0x15162.seconds = Math.floor(_0x15162.totalTime % 60).toString();
                    _0x15162.minutes = Math.floor(_0x15162.totalTime / 60).toString();
                    if (_0x15162.minutes.length == 1) {
                        _0x15162.timeText = _0xB90A[114] + _0x15162.minutes + _0xB90A[115] + _0x15162.seconds;
                        if (_0x15162.seconds.length == 1) {
                            _0x15162.timeText = _0x15162.minutes + _0xB90A[115] + _0xB90A[114] + _0x15162.seconds
                        }
                    };
                    if (_0x15162.seconds.length == 1) {
                        _0x15162.timeText = _0x15162.minutes + _0xB90A[115] + _0xB90A[114] + _0x15162.seconds
                    };
                    if (_0x15162.minutes.length != 1 && _0x15162.seconds.length != 1) {
                        _0x15162.timeText = _0x15162.minutes + _0xB90A[115] + _0x15162.seconds
                    };
                    _0x15162.events.throwEvent(_0xB90A[116], Util.Util.createEventData([
                        [Components.TextLabel.TEXT, _0x15162.timeText]
                    ]))
                };
                _0x15162.initObjects = function() {
                    _0x15162.piecesArray = GameObject.getObjectsByTag(_0x15162.piecesTag, true);
                    _0x15162.dropZoneArray = GameObject.getObjectsByTag(_0x15162.dropZoneTag, true);
                    _0x15162.piecesContainerGO = GameObject.getObject(_0x15162.piecesContainer);
                    _0x15162.finalImageGO = GameObject.getObject(_0x15162.finalImage);
                    _0x15162.originalDropZoneArray = _0x15162.dropZoneArray.slice();
                    _0x15162.originalPiecesArray = _0x15162.piecesArray.slice()
                };
                _0x15162.initObjectsProperties = function() {
                    _0x15162.initOriginalPos();
                    for (var _0x1517B = 0; _0x1517B < _0x15162.dropZoneArray.length; _0x1517B++) {
                        var _0x1242B = _0x15162.dropZoneArray[_0x1517B];
                        _0x1242B.alpha = 0.3
                    };
                    _0x15162.finalImageGO.alpha = 0;
                    _0x15162.leftButton.disableInput();
                    _0x15162.rightButton.disableInput()
                };
                _0x15162.rotatePieces = function() {
                    for (var _0x15194 = 0; _0x15194 < _0x15162.piecesArray.length; _0x15194++) {
                        var _0x151C6 = _0x15162.piecesArray[_0x15194];
                        _0x151C6.scale[_0xB90A[95]](0.7, 0.7);
                        var _0x151AD = Math.floor(Math.random() * 4);
                        _0x151C6.angle = _0x151AD * 90
                    }
                };
                _0x15162.initObjectsEvents = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x15162.piecesArray.length; _0xC6E8++) {
                        var _0x1242B = _0x15162.piecesArray[_0xC6E8];
                        _0x1242B.input.enableDrag(true);
                        _0x1242B.events.onInputDown.add(_0x15162.dragPiece);
                        _0x1242B.events.onDragStop.add(_0x15162.dragPieceStop)
                    };
                    _0x15162.rightButton.addButtonPressedCallback(_0x15162.handleRotate);
                    _0x15162.leftButton.addButtonPressedCallback(_0x15162.handleRotate)
                };
                _0x15162.handleRotate = function(_0xCE3B) {
                    _0x15162.rightButton.disableInput();
                    _0x15162.leftButton.disableInput();
                    var _0x151DF = _0xCE3B == _0x15162.rightButton ? 90 : -90;
                    if (_0x15162.piece && _0x15162.drop) {
                        Components.Tweens.create(_0x15162.piece).to(_0xC639(_0xB90A[46], _0x15162.piece.angle + _0x151DF), 200, null, true).onComplete.addOnce(function() {
                            if (_0x15162.piece.angle != 0) {
                                _0x15162.rightButton.enableInput();
                                _0x15162.leftButton.enableInput()
                            } else {
                                _0x15162.handleDrop(_0x15162.piece, _0x15162.drop)
                            }
                        })
                    } else {
                        if (_0x15162.piece) {
                            Components.Tweens.create(_0x15162.piece.position).to(_0xC639(_0xB90A[43], _0x15162.startPoint.x, _0xB90A[44], _0x15162.startPoint.y), 200, null, true)
                        }
                    }
                };
                _0x15162.randomizePos = function() {
                    _0x15162.piecesArray = GameObject.getObjectsByTag(_0x15162.piecesTag, true);
                    var _0xFFA5 = [];
                    for (var _0x151F8 = 0; _0x151F8 < _0x15162.piecesArray.length; _0x151F8++) {
                        var _0x1242B = _0x15162.piecesArray[_0x151F8];
                        _0xFFA5.push(_0xC639(_0xB90A[43], _0x1242B.x, _0xB90A[44], _0x1242B.y))
                    };
                    Phaser.ArrayUtils.shuffle(_0x15162.piecesArray);
                    for (var _0x15211 = 0; _0x15211 < _0x15162.piecesArray.length; _0x15211++) {
                        var _0x15243 = _0x15162.piecesArray[_0x15211];
                        _0x15243.position[_0xB90A[95]](_0xFFA5[_0x15211].x, _0xFFA5[_0x15211].y)
                    };
                    for (var _0xC9D6 = 0; _0xC9D6 < _0x15162.randomiseArray.length; _0xC9D6++) {};
                    for (var _0x1522A = 0; _0x1522A < _0x15162.piecesArray.length; _0x1522A++) {
                        var _0xCE22 = _0x15162.piecesArray[_0x1522A];
                        var _0x1525C = GameObject.getObject(_0x15162.dropZoneTag + _0xB90A[61] + _0xCE22.tags[1]);
                        _0x1525C.name = _0x1525C.tags[0] + _0xB90A[61] + (_0x1522A + 1);
                        _0xCE22.name = _0xCE22.tags[0] + _0xB90A[61] + (_0x1522A + 1);
                        _0x15162.originalPiecePos[_0xB90A[95]](_0xCE22, _0xC639(_0xB90A[43], _0xCE22.x, _0xB90A[44], _0xCE22.y))
                    }
                };
                _0x15162.dragPiece = function(_0x1528E) {
                    Components.DevUtils.playSound(_0xB90A[1048]);
                    _0x1528E.scale.x = 1;
                    _0x1528E.scale.y = 1;
                    _0x1528E.parent.setChildIndex(_0x1528E, _0x1528E.parent.children.length - 1);
                    if (_0x15162.piece == null) {
                        _0x15162.startPoint = new Phaser.Point(_0x1528E.position.x, _0x1528E.position.y)
                    };
                    for (var _0x15275 = 0; _0x15275 < _0x15162.piecesArray.length; _0x15275++) {
                        var _0x152A7 = _0x15162.piecesArray[_0x15275];
                        if (_0x152A7 != _0x1528E) {
                            _0x152A7.disableInput()
                        }
                    }
                };
                _0x15162.dragPieceStop = function(_0x1528E) {
                    _0x15162.piece = null;
                    _0x15162.drop = null;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x15162.dropZoneArray.length; _0xC6E8++) {
                        var _0x1525C = _0x15162.dropZoneArray[_0xC6E8];
                        if (_0x1528E.tags[1] == _0x1525C.tags[1]) {
                            if (_0x1528E.overlap(_0x1525C) && Components.DevUtils.getBounds(_0x1525C).contains(_0x15162.gameObject.game.input.x, _0x15162.gameObject.game.input.y)) {
                                if (_0x1528E.angle == 0) {
                                    Components.DevUtils.playSound(_0xB90A[1049]);
                                    _0x15162.handleDrop(_0x1528E, _0x1525C)
                                } else {
                                    Components.DevUtils.playSound(_0xB90A[1049]);
                                    _0x15162.piece = _0x1528E;
                                    _0x15162.drop = _0x1525C;
                                    _0x1528E.scale.x = 1;
                                    _0x1528E.scale.y = 1;
                                    Components.Tweens.create(_0x1528E).to(_0xC639(_0xB90A[43], _0x1525C.x, _0xB90A[44], _0x1525C.y), 200, null, true);
                                    _0x15162.leftButton.enableInput();
                                    _0x15162.rightButton.enableInput()
                                }
                            } else {
                                Components.DevUtils.playSound(_0xB90A[1050]);
                                for (var _0x152C0 = 0; _0x152C0 < _0x15162.piecesArray.length; _0x152C0++) {
                                    var _0x152A7 = _0x15162.piecesArray[_0x152C0];
                                    _0x152A7.enableInput()
                                };
                                _0x1528E.scale.x = 0.7;
                                _0x1528E.scale.y = 0.7;
                                Components.Tweens.create(_0x1528E.position).to(_0xC639(_0xB90A[43], _0x15162.startPoint.x, _0xB90A[44], _0x15162.startPoint.y), 200, null, true);
                                Components.DevUtils.disableInputFor(_0x1528E, 1000)
                            };
                            break
                        } else {
                            if (_0x1528E.overlap(_0x1525C) && Components.DevUtils.getBounds(_0x1525C).contains(_0x15162.gameObject.game.input.x, _0x15162.gameObject.game.input.y)) {}
                        }
                    }
                };
                _0x15162.handleDrop = function(_0x1242B, _0x152F2) {
                    Components.Tweens.create(_0x152F2).to(_0xC639(_0xB90A[45], 1), 100, null, true);
                    Components.Tweens.create(_0x1242B).to(_0xC639(_0xB90A[45], 0), 100, null, true);
                    Components.Tweens.create(_0x1242B).to(_0xC639(_0xB90A[43], _0x152F2.x, _0xB90A[44], _0x152F2.y), 200, null, true);
                    _0x1242B.scale[_0xB90A[95]](1, 1);
                    _0x15162.piece = null;
                    _0x1242B.disableInput();
                    _0x15162.piecesArray.splice(_0x15162.piecesArray.indexOf(_0x1242B), 1);
                    for (var _0x152D9 = 0; _0x152D9 < _0x15162.piecesArray.length; _0x152D9++) {
                        var _0x152A7 = _0x15162.piecesArray[_0x152D9];
                        _0x152A7.enableInput()
                    };
                    if (_0x15162.piecesArray.length == 0) {
                        Components.Tweens.create(_0x15162.finalImageGO).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                        _0x15162.events.throwEvent(_0xB90A[1051]);
                        var _0xCBFC = Components.GameTimer.instance.getTimeLeft(Components.TimerType.minigame);
                        Components.GameTimer.instance.pauseTimer(Components.TimerType.minigame);
                        if (_0xCBFC > 9) {
                            _0x15162.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                [Components.SessionData.STAR, Components.SessionData.THREE_STAR]
                            ]))
                        } else {
                            if (_0xCBFC > 3) {
                                _0x15162.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                    [Components.SessionData.STAR, Components.SessionData.TWO_STAR]
                                ]))
                            } else {
                                _0x15162.events.throwEvent(Components.SessionData.MINIGAME_FINISHED, Util.Util.createEventData([
                                    [Components.SessionData.STAR, Components.SessionData.ONE_STAR]
                                ]))
                            }
                        }
                    }
                };
                _0x15162.initOriginalPos = function() {};
                _0x15162.onComplete = function() {};
                return _0x15162
            }
            _0xB987(_0x150FE, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                var _0x15149 = this;
                this.events.addEventListener(_0xB90A[31], this.randomizePos);
                this.events.addEventListener(_0xB90A[28], function() {
                    _0x15149.initObjects();
                    _0x15149.initObjectsProperties();
                    _0x15149.initObjectsEvents();
                    _0x15149.rotatePieces()
                })
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x15130 = this;
                this.originalPiecePos;
                this.events.addEventListener(_0xB90A[121], function() {
                    Components.GameTimer.instance.addOnUpdate(Components.TimerType.minigame, _0x15130.handleTimer)
                });
                if (Components.DevUtils.getCurrentUnitName() == _0xB90A[1052]) {
                    Components.GameTimer.instance.addOnUpdate(Components.TimerType.minigame, this.handleTimer)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[726], _0xB90A[5], function _0x10E00() {
                this.piecesArray = this.originalPiecesArray.slice();
                this.dropZoneArray = this.originalDropZoneArray.slice();
                this.piece = null;
                this.drop = null;
                for (var _0x1530B = 0; _0x1530B < this.piecesArray.length; _0x1530B++) {
                    var _0x1242B = this.piecesArray[_0x1530B];
                    var _0x135D8 = this.dropZoneArray[_0x1530B];
                    _0x1242B.alpha = 1;
                    _0x1242B.visible = true;
                    _0x1242B.scale[_0xB90A[95]](0.7, 0.7);
                    _0x135D8.alpha = 0.3;
                    _0x1242B.enableInput();
                    this.finalImageGO.alpha = 0;
                    var _0xC85F = this.originalPiecePos[_0xB90A[8]](_0x1242B);
                    _0x1242B.position[_0xB90A[95]](_0xC85F.x, _0xC85F.y)
                };
                this.randomizePos();
                this.rotatePieces()
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (Components.SessionData.UNLOCKED_LEVELS.length > 0) {
                    Components.GameTimer.instance.addOnUpdate(Components.TimerType.minigame, this.handleTimer)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                Components.GameTimer.instance.removeOnComplete(Components.TimerType.minigame, this.onComplete);
                Components.GameTimer.instance.removeOnUpdate(Components.TimerType.minigame, this.handleTimer);
                _get(_getPrototypeOf(_0x150FE.prototype), _0xB90A[24], this).call(this);
                this.destroyed = true
            })]);
            return _0x150FE
        }(Scene.Component);
        Components.PuzzleComponent = _0x150FE
    }

    function _0xC3AF(Components) {
        var _0x15324 = function(_0x1533D) {
            _0xBA1D(_0x15324, _0x1533D);

            function _0x15324() {
                var _0x1536F;
                _0xB955(this, _0x15324);
                _0x1536F = _0xB9A0(this, _getPrototypeOf(_0x15324).apply(this, arguments));
                _0x1536F.puzzleContainerTag = _0xB90A[27];
                _0x1536F.nextButton = _0xB90A[27];
                _0x1536F.replayButton = _0xB90A[27];
                _0x1536F.once = true;
                _0x1536F.initObjects = function() {
                    _0x1536F.replayButtonGO = GameObject.getObject(_0x1536F.replayButton);
                    _0x1536F.nextButtonGO = GameObject.getObject(_0x1536F.nextButton);
                    _0x1536F.exitGameButton.addButtonPressedCallback(function() {
                        if (Components.SessionData.lostLives < 5) {
                            _0x1536F.events.throwEvent(Components.SessionData.LOSE_LIFE)
                        } else {
                            return
                        }
                    });
                    _0x1536F.replayButtonGO.addButtonPressedCallback(function() {
                        _0x1536F.events.throwEvent(Components.SessionData.REPLAY_MINIGAME);
                        Components.GameTimer.instance.resetTimeAt(Components.TimerType.minigame, 150, true)
                    });
                    _0x1536F.randomPuzzleArray = GameObject.getObjectsByTag(_0x1536F.puzzleContainerTag, true, 1, 0);
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x1536F.randomPuzzleArray.length; _0xC6E8++) {
                        var _0x15388 = _0x1536F.randomPuzzleArray[_0xC6E8];
                        trace(_0x15388.name);
                        _0x15388.visible = false
                    };
                    _0x1536F.events.addEventListener(Components.SessionData.NO_LIVES, function() {
                        _0x1536F.replayButtonGO.visible = false
                    })
                };
                _0x1536F.initObjectsProperties = function() {
                    _0x1536F.choosePuzzle()
                };
                _0x1536F.playSecondPuzzle = function() {
                    Components.GameTimer.instance.resetTimeAt(Components.TimerType.minigame, 150, true);
                    _0x1536F.once = true;
                    trace(_0x1536F.randomPuzzleArray.length, _0x1536F.currentRandom);
                    Components.Tweens.create(_0x1536F.randomPuzzleArray[_0x1536F.currentRandom]).to(_0xC639(_0xB90A[45], 0), 200, null, true).onComplete.addOnce(function() {
                        _0x1536F.randomPuzzleArray[_0x1536F.currentRandom].visible = false;
                        _0x1536F.choosePuzzle();
                        trace(_0x1536F.randomPuzzleArray.length, _0x1536F.currentRandom, _0xB90A[1053])
                    })
                };
                _0x1536F.choosePuzzle = function() {
                    _0x1536F.currentRandom = Math.floor(Math.random() * _0x1536F.randomPuzzleArray.length);
                    Components.Tweens.create(_0x1536F.randomPuzzleArray[_0x1536F.currentRandom]).to(_0xC639(_0xB90A[45], 1), 200, null, true);
                    _0x1536F.randomPuzzleArray[_0x1536F.currentRandom].visible = true;
                    _0x1536F.randomPuzzleArray[_0x1536F.currentRandom].getComponent(Components.PuzzleComponent).reset()
                };
                _0x1536F.animDone = function() {
                    _0x1536F.gameObject.game.time.events.add(1000, function() {
                        Components.GameTimer.instance.resetTimeAt(Components.TimerType.minigame, 150, true);
                        Components.GameTimer.instance.addOnComplete(Components.TimerType.minigame, _0x1536F.onComplete)
                    }, _0xB9B9(_0x1536F))
                };
                _0x1536F.disableReplay = function() {
                    Components.Tweens.create(_0x1536F.replayButtonGO).to(_0xC639(_0xB90A[45], 0), 400, null, true);
                    Components.Tweens.create(_0x1536F.replayButtonGO.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 400, null, true);
                    _0x1536F.replayButtonGO.disableInput()
                };
                _0x1536F.onComplete = function() {
                    _0x1536F.once = false
                    if (_0x1536F.once) {
                        _0x1536F.events.throwEvent(Components.SessionData.SHOW_EXTRA_TIME_POPUP);
                        _0x1536F.once = false
                    } else {
                        Components.DevUtils.playSound(_0xB90A[266]);
                        _0x1536F.events.throwEvent(Components.SessionData.LOSE_LIFE);
                        _0x1536F.events.throwEvent(Components.SessionData.SHOW_TRY_AGAIN_POPUP)
                    };
                    trace(_0xB90A[1054])
                };
                return _0x1536F
            }
            _0xB987(_0x15324, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                var _0x15356 = this;
                this.events.addEventListener(_0xB90A[28], function() {
                    _0x15356.initObjects();
                    _0x15356.initObjectsProperties();
                    if (Components.SessionData.UNLOCKED_LEVELS.length > 1) {
                        _0x15356.events.throwEvent(_0xB90A[120])
                    }
                })
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(_0xB90A[254], this.playSecondPuzzle)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {
                if (Components.SessionData.UNLOCKED_LEVELS.length > 0) {
                    Components.GameTimer.instance.resetTimeAt(Components.TimerType.minigame, 150, true);
                    Components.GameTimer.instance.addOnComplete(Components.TimerType.minigame, this.onComplete)
                } else {
                    this.events.addEventListener(_0xB90A[121], this.animDone, true)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                Components.GameTimer.instance.removeOnComplete(Components.TimerType.minigame, this.onComplete);
                _get(_getPrototypeOf(_0x15324.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x15324
        }(Scene.Component);
        Components.RandomPuzzle = _0x15324
    }

    function _0xC3C8(Components) {
        var _0x153A1 = function(_0x153BA) {
            _0xBA1D(_0x153A1, _0x153BA);

            function _0x153A1() {
                var _0x153EC;
                _0xB955(this, _0x153A1);
                _0x153EC = _0xB9A0(this, _getPrototypeOf(_0x153A1).apply(this, arguments));
                _0x153EC.adPosition = _0xB90A[27];
                _0x153EC.isButton = false;
                return _0x153EC
            }
            _0xB987(_0x153A1, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                trace(this.gameObject, _0xB90A[1055]);
                if (!this.isButton) {
                    this.callBack(null)
                };
                if (this.adPosition.indexOf(_0xB90A[168]) == -1) {}
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {}), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743() {
                Managers.MonetizationManager.instance.showAd(this.adPosition, true);
                RTRAnalyticsEvent(_0xB90A[507], _0xB90A[168], this.adPosition)
            }), _0xC639(_0xB90A[13], _0xB90A[1056], _0xB90A[5], function _0x153D3(_0xCF35) {
                Managers.MonetizationManager.instance.showAd(this.adPosition, false)
            })]);
            return _0x153A1
        }(Scene.Component);
        Components.AdComponent = _0x153A1
    }

    function _0xC3E1(Components) {
        var _0x15405 = function(_0x1541E) {
            _0xBA1D(_0x15405, _0x1541E);

            function _0x15405() {
                var _0x15437;
                _0xB955(this, _0x15405);
                _0x15437 = _0xB9A0(this, _getPrototypeOf(_0x15405).apply(this, arguments));
                _0x15437._over = false;
                _0x15437._clicked = false;
                _0x15437.scale = true;
                _0x15437.tint = true;
                _0x15437.clickSound = _0xB90A[1048];
                _0x15437.disableCursor = true;
                _0x15437.initialScaleX = 1;
                _0x15437.initialScaleY = 1;
                _0x15437.customEvent = _0xB90A[27];
                _0x15437.eventData = _0xB90A[27];
                _0x15437.scaleReset = false;
                _0x15437.eventsArr = [];
                _0x15437.lastT = 0;
                _0x15437.scroll = false;
                _0x15437.onMouseDown = function(_0xC7FB) {
                    if (_0x15437.tint) {
                        _0x15437.gameObject.tint = 0xd9d9d9
                    };
                    _0x15437._clicked = true;
                    _0x15437._over = true;
                    _0x15437.lastT = _0x15437.gameObject.game.time.time;
                    _0x15437.startX = _0x15437.gameObject.game.input.activePointer.x;
                    _0x15437.startY = _0x15437.gameObject.game.input.activePointer.y
                };
                _0x15437.onMouseUp = function(_0xC7FB) {
                    if (_0x15437.scroll) {
                        var _0xD8C7 = Phaser.Math.distancePow(_0x15437.startX, _0x15437.startY, _0x15437.gameObject.game.input.activePointer.x, _0x15437.gameObject.game.input.activePointer.y);
                        if (_0xD8C7 && _0xD8C7 > 10) {
                            _0x15437._clicked = false;
                            _0x15437._over = false;
                            if (_0x15437.tint) {
                                _0x15437.gameObject.tint = 0xffffff
                            };
                            return
                        }
                    };
                    if (_0x15437._clicked && _0x15437._over) {
                        _0x15437.gameObject.onButtonPressed(_0xC7FB);
                        if (_0x15437.clickSound && _0x15437.clickSound != _0xB90A[27]) {
                            Components.DevUtils.playSound(_0x15437.clickSound)
                        };
                        if (_0x15437.customEvent != _0xB90A[27]) {
                            if (_0x15437.eventData != _0xB90A[27]) {
                                var _0xD0F7 = [];
                                for (var _0xC6E8 = 0; _0xC6E8 < _0x15437.eventData.split(_0xB90A[572]).length; _0xC6E8 += 2) {
                                    var _0xCE22 = _0x15437.eventData.split(_0xB90A[572])[_0xC6E8];
                                    _0xD0F7.push([_0xCE22, _0x15437.eventData.split(_0xB90A[572])[_0xC6E8 + 1]])
                                };
                                var _0xCD8C = Util.Util.createEventData(_0xD0F7);
                                _0x15437.eventsArr.forEach(function(_0x15450) {
                                    _0x15437.events.throwEvent(_0x15450, _0xCD8C)
                                })
                            } else {
                                _0x15437.eventsArr.forEach(function(_0x15450) {
                                    _0x15437.events.throwEvent(_0x15450)
                                })
                            }
                        };
                        if (_0x15437.oneTime) {
                            _0x15437.gameObject.disableInput()
                        }
                    };
                    _0x15437.events.removeEventListener(_0xB90A[29], _0x15437.isInGame);
                    if (_0x15437.tint) {
                        _0x15437.gameObject.tint = 0xffffff
                    };
                    _0x15437._clicked = false
                };
                _0x15437.onMouseOver = function(_0xC7FB) {
                    if (_0x15437.scale && _0x15437.gameObject.game.device.desktop && !_0x15437._over) {
                        _0x15437.initialScaleX = _0x15437.gameObject.scale.x;
                        _0x15437.initialScaleY = _0x15437.gameObject.scale.y;
                        _0x15437.gameObject.scale.x += 0.05;
                        _0x15437.gameObject.scale.y += 0.05
                    };
                    _0x15437._over = true;
                    if (Components.MouseCursorComponent.activeCursor && _0x15437.disableCursor) {
                        Components.MouseCursorComponent.activeCursor.getComponent(Components.MouseCursorComponent).hide()
                    };
                    _0x15437.events.addEventListener(_0xB90A[29], _0x15437.isInGame)
                };
                _0x15437.onMouseOut = function(_0xC7FB, _0x15469) {
                    if (Components.MouseCursorComponent.activeCursor && _0x15437.disableCursor) {
                        Components.MouseCursorComponent.activeCursor.getComponent(Components.MouseCursorComponent).show()
                    };
                    if (_0x15437._over) {
                        if (_0x15437.scale && _0x15437.gameObject.game.device.desktop) {
                            _0x15437.gameObject.scale.x = _0x15437.initialScaleX;
                            _0x15437.gameObject.scale.y = _0x15437.initialScaleY
                        }
                    };
                    _0x15437.events.removeEventListener(_0xB90A[29], _0x15437.isInGame);
                    _0x15437._over = false
                };
                _0x15437.isInGame = function() {
                    if (_0x15437.gameObject.input.enabled && !_0x15437.gameObject.game.input.activePointer.withinGame) {
                        _0x15437.gameObject.input._pointerOutHandler(_0x15437.gameObject.game.input.activePointer, false)
                    }
                };
                return _0x15437
            }
            _0xB987(_0x15405, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.gameObject.inputEvents.addInputDown(this.onMouseDown);
                this.gameObject.inputEvents.addInputUp(this.onMouseUp);
                this.gameObject.inputEvents.addInputOver(this.onMouseOver);
                this.gameObject.inputEvents.addInputOut(this.onMouseOut);
                if (this.customEvent) {
                    this.eventsArr = this.customEvent.split(_0xB90A[572])
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.gameObject.events.onInputDown.removeAll();
                this.gameObject.events.onInputUp.removeAll();
                this.gameObject.events.onInputOver.removeAll();
                this.gameObject.events.onInputOut.removeAll();
                _get(_getPrototypeOf(_0x15405.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x15405
        }(Scene.Component);
        Components.ButtonComponent = _0x15405
    }

    function _0xC3FA(Components) {
        var _0x15482 = function(_0x1549B) {
            _0xBA1D(_0x15482, _0x1549B);

            function _0x15482() {
                var _0x154B4;
                _0xB955(this, _0x15482);
                _0x154B4 = _0xB9A0(this, _getPrototypeOf(_0x15482).apply(this, arguments));
                _0x154B4.isInit = false;
                _0x154B4.onFullScreen = function() {
                    _0x154B4.isInit = true
                };
                _0x154B4.onFullScreenChange = function() {
                    if (!_0x154B4.isInit) {
                        _0x154B4.gameObject.game.scale.setMinMax(0, 0, Core.Main.gameWidth, Core.Main.gameHeight)
                    };
                    _0x154B4.isInit = false
                };
                return _0x154B4
            }
            _0xB987(_0x15482, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (GameData.rawData.publisher.optional.fullscreen && GameData.rawData.publisher.optional.fullscreen.hide == 1) {
                    this.gameObject.visible = false;
                    this.gameObject.disableInput();
                    return
                };
                this.gameObject.game.scale.onFullScreenInit.add(this.onFullScreen, this);
                this.gameObject.game.scale.onFullScreenChange.add(this.onFullScreenChange, this);
                this.gameObject.game.scale.fullScreenTarget = document.body
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743() {
                var _0x154CD = this;
                if (this.gameObject.game.scale.isFullScreen) {
                    this.gameObject.game.scale.stopFullScreen()
                } else {
                    this.gameObject.game.scale.startFullScreen(true)
                };
                this.gameObject.game.time.events.add(100, function() {
                    _0x154CD.events.throwEvent(_0xB90A[273])
                }, this)
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                Core.game.scale.onFullScreenInit.remove(this.onFullScreen, this);
                Core.game.scale.onFullScreenChange.remove(this.onFullScreenChange, this);
                _get(_getPrototypeOf(_0x15482.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x15482
        }(Scene.Component);
        Components.FullScreenComponent = _0x15482
    }

    function _0xC413(Components) {
        var _0x154E6 = function(_0x154FF) {
            _0xBA1D(_0x154E6, _0x154FF);

            function _0x154E6() {
                var _0x15612;
                _0xB955(this, _0x154E6);
                _0x15612 = _0xB9A0(this, _getPrototypeOf(_0x154E6).apply(this, arguments));
                _0x15612.glitzSound = _0xB90A[1057];
                _0x15612.spark1Name = _0xB90A[1058];
                _0x15612.spark2Name = _0xB90A[1059];
                _0x15612.startEvent = _0xB90A[724];
                _0x15612.rings = 3;
                _0x15612.sparkLines = 20;
                _0x15612.initRadius = 200;
                _0x15612.spawnSpeed = 0.03;
                _0x15612.lifetime = 0.3;
                _0x15612.maxCenterSparks = 4;
                _0x15612.spark2SpawRate = 0.3;
                _0x15612.randomizePositions = true;
                _0x15612.alternateDirection = false;
                _0x15612.randomSparks = 20;
                _0x15612.randomSparkSpawnDuration = 1;
                _0x15612.activeTweens = [];
                _0x15612.onEndGlitz = function(_0xCF35) {
                    _0x15612.end()
                };
                _0x15612.onEvent = function(_0xCF35) {
                    if (_0xCF35 && _0xCF35.getData(_0xB90A[689])) {
                        return
                    };
                    if (_0x15612.glitzSound) {
                        Components.DevUtils.playSound(_0x15612.glitzSound)
                    };
                    _0x15612.end();
                    _0x15612.generate(Math.round(_0x15612.sparkLines / 2))
                };
                _0x15612.end = function() {
                    _0x15612.gameObject.game.time.events.remove(_0x15612._lastTimer);
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x15612._sparks.length; _0xC6E8++) {
                        var _0x11553 = _0x15612._sparks[_0xC6E8];
                        _0x15612.container.removeChild(_0x11553);
                        _0x154E6.sparksPool.push(_0x11553)
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x15612.activeTweens.length; _0xC6E8++) {
                        var _0xCA21 = _0x15612.activeTweens[_0xC6E8];
                        _0xCA21.stop()
                    };
                    _0x15612.activeTweens.length = 0;
                    _0x15612._sparks = []
                };
                return _0x15612
            }
            _0xB987(_0x154E6, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.container = this.gameObject;
                if (this.spark1Name == _0xB90A[27]) {
                    this.spark1Name = _0xB90A[1058]
                };
                if (this.spark2Name == _0xB90A[27]) {
                    this.spark2Name = _0xB90A[1059]
                };
                this._sparks = new Array();
                this._spark1 = GameObject.getTransitionObject(this.spark1Name);
                this._spark2 = GameObject.getTransitionObject(this.spark2Name);
                this.rc = Util.Bitmap.create(this._spark1.width, this._spark1.height);
                this.rc2 = Util.Bitmap.create(this._spark2.width, this._spark2.height);
                this.rc.draw(this._spark1, this._spark1.width * this._spark1.anchor.x, this._spark1.height * this._spark1.anchor.y);
                this.rc2.draw(this._spark2, this._spark2.width * this._spark2.anchor.x, this._spark2.height * this._spark2.anchor.y);
                if (this.startEvent != _0xB90A[27]) {
                    this.events.addEventListener(this.startEvent, this.onEvent)
                };
                if (_0x154E6.sparksPool.length == 0) {
                    _0x154E6.sparksPool = this.createNewObjects(this.rings * this.sparkLines + this.randomSparks)
                };
                this.events.addEventListener(_0xB90A[1060], this.onEndGlitz);
                if (this.lifetime < 16) {
                    this.lifetime *= 1000
                };
                if (this.spawnSpeed < 16) {
                    this.spawnSpeed *= 1000
                };
                if (this.randomSparkSpawnDuration < 16) {
                    this.randomSparkSpawnDuration *= 1000
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1061], _0xB90A[5], function _0x1557C(_0x13911) {
                var _0xCF4E = 0;
                var _0x155E0 = 0;
                for (var _0xC9D6 = 0; _0xC9D6 < this.rings * 2; _0xC9D6++) {
                    _0xCF4E = 0;
                    if (_0xC9D6 < this.rings) {
                        if (this.alternateDirection && _0xC9D6 % 2 == 1) {
                            for (var _0xC6E8 = 1; _0xC6E8 < _0x13911 + 1; _0xC6E8++) {
                                this._sparks.push(this.createGo(-60 + 180 - 180 / (_0x13911 - 1) * (_0xC6E8 - 1), this.initRadius * (1 / this.rings + _0xC9D6 / this.rings), 0.5 + 0.5 * (1 / this.rings + _0xC9D6 / this.rings)));
                                var _0x155F9 = this.gameObject.game.add.tween(this._sparks[_0x13911 * _0xC9D6 + _0xC6E8 - 1]).to(_0xC639(_0xB90A[45], 0.8), Math.min(0.2, this.lifetime / 2) * 1000, null, true, _0xCF4E);
                                this.activeTweens.push(_0x155F9);
                                var _0x155F9 = this.gameObject.game.add.tween(this._sparks[_0x13911 * _0xC9D6 + _0xC6E8 - 1]).to(_0xC639(_0xB90A[45], 0), 200, null, true);
                                this.activeTweens.push(_0x155F9);
                                _0xCF4E += this.spawnSpeed
                            }
                        } else {
                            for (var _0xC6E8 = 1; _0xC6E8 < _0x13911 + 1; _0xC6E8++) {
                                this._sparks.push(this.createGo(-60 + 180 / (_0x13911 - 1) * (_0xC6E8 - 1), this.initRadius * (1 / this.rings + _0xC9D6 / this.rings), 0.5 + 0.5 * (1 / this.rings + _0xC9D6 / this.rings)));
                                var _0x155F9 = this.gameObject.game.add.tween(this._sparks[_0x13911 * _0xC9D6 + _0xC6E8 - 1]).to(_0xC639(_0xB90A[45], 0.8), Math.min(0.2, this.lifetime / 2) * 1000, null, true, _0xCF4E);
                                this.activeTweens.push(_0x155F9);
                                var _0x155F9 = this.gameObject.game.add.tween(this._sparks[_0x13911 * _0xC9D6 + _0xC6E8 - 1]).to(_0xC639(_0xB90A[45], 0), 200, null, true, this.lifetime + _0xCF4E);
                                this.activeTweens.push(_0x155F9);
                                _0xCF4E += this.spawnSpeed
                            }
                        }
                    } else {
                        if (this.alternateDirection && _0xC9D6 % 2 == 1) {
                            for (var _0xC6E8 = 1; _0xC6E8 < _0x13911 + 1; _0xC6E8++) {
                                this._sparks.push(this.createGo(-60 + 360 - 180 / (_0x13911 - 1) * (_0xC6E8 - 1), this.initRadius * (1 / this.rings + _0xC9D6 / this.rings % 1), 0.5 + 0.5 * (1 / this.rings + _0xC9D6 / this.rings % 1)));
                                var _0x155F9 = this.gameObject.game.add.tween(this._sparks[_0x13911 * _0xC9D6 + _0xC6E8 - 1]).to(_0xC639(_0xB90A[45], 0.8), Math.min(0.2, this.lifetime / 2) * 1000, null, true, _0xCF4E);
                                this.activeTweens.push(_0x155F9);
                                var _0x155F9 = this.gameObject.game.add.tween(this._sparks[_0x13911 * _0xC9D6 + _0xC6E8 - 1]).to(_0xC639(_0xB90A[45], 0), 200, null, true, this.lifetime + _0xCF4E);
                                this.activeTweens.push(_0x155F9);
                                _0xCF4E += this.spawnSpeed
                            }
                        } else {
                            for (var _0xC6E8 = 1; _0xC6E8 < _0x13911 + 1; _0xC6E8++) {
                                this._sparks.push(this.createGo(-60 + 180 + 180 / (_0x13911 - 1) * (_0xC6E8 - 1), this.initRadius * (1 / this.rings + _0xC9D6 / this.rings % 1), 0.5 + 0.5 * (1 / this.rings + _0xC9D6 / this.rings % 1)));
                                var _0x155F9 = this.gameObject.game.add.tween(this._sparks[_0x13911 * _0xC9D6 + _0xC6E8 - 1]).to(_0xC639(_0xB90A[45], 0.8), Math.min(0.2, this.lifetime / 2) * 1000, null, true, _0xCF4E);
                                this.activeTweens.push(_0x155F9);
                                var _0x155F9 = this.gameObject.game.add.tween(this._sparks[_0x13911 * _0xC9D6 + _0xC6E8 - 1]).to(_0xC639(_0xB90A[45], 0), 200, null, true, this.lifetime + _0xCF4E);
                                this.activeTweens.push(_0x155F9);
                                _0xCF4E += this.spawnSpeed
                            }
                        }
                    }
                };
                for (var _0xC6E8 = 1; _0xC6E8 < Math.round(Math.random() * this.maxCenterSparks); _0xC6E8++) {
                    this._sparks.push(this.createGo(Math.random() * 360, Math.random() * (this.initRadius * (1 / this.rings * 0.3)), 0.3 + Math.random() * 0.1));
                    _0xCF4E = Math.random() * _0x13911 * this.spawnSpeed;
                    var _0x155F9 = this.gameObject.game.add.tween(this._sparks[this._sparks.length - 1]).to(_0xC639(_0xB90A[1062], 0, _0xB90A[45], 0.8), 200, null, true, _0xCF4E);
                    this.activeTweens.push(_0x155F9);
                    var _0x155F9 = this.gameObject.game.add.tween(this._sparks[this._sparks.length - 1]).to(_0xC639(_0xB90A[1062], 0, _0xB90A[45], 0), 200, null, true, this.lifetime + _0xCF4E);
                    this.activeTweens.push(_0x155F9)
                };
                for (var _0xC6E8 = 0; _0xC6E8 < this.randomSparks; _0xC6E8++) {
                    _0xCF4E = Math.random() * (this.randomSparkSpawnDuration - this.lifetime);
                    this._sparks.push(this.createGoRandom());
                    var _0x155F9 = this.gameObject.game.add.tween(this._sparks[this._sparks.length - 1]).to(_0xC639(_0xB90A[1062], 0, _0xB90A[45], 0.8), Math.min(0.2, this.lifetime / 2) * 1000, null, true, _0xCF4E);
                    this.activeTweens.push(_0x155F9);
                    var _0x155F9 = this.gameObject.game.add.tween(this._sparks[this._sparks.length - 1]).to(_0xC639(_0xB90A[1062], 0, _0xB90A[45], 0), 200, null, true, this.lifetime + _0xCF4E);
                    this.activeTweens.push(_0x155F9)
                };
                this._lastTimer = this.gameObject.game.time.events.add(Math.max(this.lifetime * 2 + (_0x13911 + this.randomSparks) * this.spawnSpeed, this.randomSparkSpawnDuration), this.end, this)
            }), _0xC639(_0xB90A[13], _0xB90A[1063], _0xB90A[5], function _0x15518(_0x15595, _0x13E57, _0x155C7) {
                var _0xCC47 = null;
                if (_0x154E6.sparksPool.length != 0) {
                    _0xCC47 = _0x154E6.sparksPool.shift()
                } else {
                    _0xCC47 = this.createNewObject()
                };
                this.container.addChild(_0xCC47);
                _0xCC47.anchor.x = this._spark1.anchor.x;
                _0xCC47.anchor.y = this._spark1.anchor.y;
                _0xCC47.scale.x = _0xCC47.scale.y = _0x155C7;
                _0xCC47.alpha = 0;
                if (this.randomizePositions) {
                    var _0x155AE = Math.min(360 / this.sparkLines, 8);
                    _0x155AE /= 2;
                    _0x15595 = _0x15595 - _0x155AE + Math.random() * (_0x155AE * 2);
                    _0xCC47.position.x = _0x13E57 * Math.cos(_0x15595 * Math.PI / 180);
                    _0xCC47.position.y = _0x13E57 * Math.sin(_0x15595 * Math.PI / 180)
                } else {
                    _0xCC47.position.x = _0x13E57 * Math.cos(_0x15595 * Math.PI / 180);
                    _0xCC47.position.y = _0x13E57 * Math.sin(_0x15595 * Math.PI / 180)
                };
                if (Math.random() > this.spark2SpawRate) {
                    _0xCC47.loadTexture(this.rc)
                } else {
                    _0xCC47.loadTexture(this.rc2)
                };
                return _0xCC47
            }), _0xC639(_0xB90A[13], _0xB90A[1064], _0xB90A[5], function _0x15531() {
                var _0xCC47 = null;
                if (_0x154E6.sparksPool.length != 0) {
                    _0xCC47 = _0x154E6.sparksPool.shift()
                } else {
                    _0xCC47 = this.createNewObject()
                };
                if (Components.DevUtils.getCurrentUnitName() == _0xB90A[1065] && Math.random() > 0.5) {
                    _0xCC47.tint = 0xfbb5cc
                } else {
                    _0xCC47.tint = 0xffffff
                };
                this.container.addChild(_0xCC47);
                _0xCC47.anchor.x = this._spark1.anchor.x;
                _0xCC47.anchor.y = this._spark1.anchor.y;
                _0xCC47.scale.x = _0xCC47.scale.y = 0.4 + Math.random() * 0.6;
                _0xCC47.alpha = 0;
                _0xCC47.position.x = -this.initRadius + Math.random() * this.initRadius * 2;
                _0xCC47.position.y = -this.initRadius + Math.random() * this.initRadius * 2;
                if (Math.random() > this.spark2SpawRate) {
                    _0xCC47.loadTexture(this.rc)
                } else {
                    _0xCC47.loadTexture(this.rc2)
                };
                return _0xCC47
            }), _0xC639(_0xB90A[13], _0xB90A[1066], _0xB90A[5], function _0x1554A() {
                var _0xCC47 = new GameObject(Core.game, _0xB90A[1067] + _0x154E6.totalSparks);
                _0x154E6.totalSparks++;
                _0xCC47.shouldBeDestroyed = false;
                return _0xCC47
            }), _0xC639(_0xB90A[13], _0xB90A[1068], _0xB90A[5], function _0x15563(_0xFB72) {
                var _0x112FB = [];
                for (var _0xC6E8 = 0; _0xC6E8 < _0xFB72; _0xC6E8++) {
                    _0x112FB.push(new GameObject(Core.game, _0xB90A[1067] + _0x154E6.totalSparks));
                    _0x154E6.totalSparks++;
                    _0x112FB[_0xC6E8].shouldBeDestroyed = false
                };
                return _0x112FB
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                for (var _0xC6E8 = 0; _0xC6E8 < this._sparks.length; _0xC6E8++) {
                    var _0x11553 = this._sparks[_0xC6E8];
                    this.container.removeChild(_0x11553);
                    _0x154E6.sparksPool.push(_0x11553)
                };
                this.rc.destroy();
                this.rc2.destroy();
                this._sparks = [];
                _get(_getPrototypeOf(_0x154E6.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x154E6
        }(Scene.Component);
        _0x154E6.sparksPool = [];
        _0x154E6.totalSparks = 0;
        Components.GlitzSwirl = _0x154E6
    }

    function _0xC42C(Components) {
        var _0x1562B = function(_0x15644) {
            _0xBA1D(_0x1562B, _0x15644);

            function _0x1562B() {
                _0xB955(this, _0x1562B);
                return _0xB9A0(this, _getPrototypeOf(_0x1562B).apply(this, arguments))
            }
            _0xB987(_0x1562B, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {}), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x1562B
        }(Scene.Component);
        Components.GlobalDummyComponent = _0x1562B
    }

    function _0xC445(Components) {
        var _0x1565D = function(_0x1568F) {
            _0xBA1D(_0x1565D, _0x1568F);

            function _0x1565D() {
                var _0x15883;
                _0xB955(this, _0x1565D);
                _0x15883 = _0xB9A0(this, _getPrototypeOf(_0x1565D).apply(this, arguments));
                _0x15883.strength = 3;
                _0x15883.blur = 15;
                _0x15883.color = _0xB90A[1069];
                _0x15883.offset = 0;
                _0x15883.group = _0xB90A[27];
                _0x15883.colorGroup = _0xB90A[27];
                _0x15883.hoverGlow = true;
                _0x15883.isAutoUpdating = false;
                _0x15883.isVisible = false;
                _0x15883.onEventStopBlink = function() {
                    _0x15883.stopBlink()
                };
                _0x15883.onEventBlink = function() {
                    var _0x117C4 = Number(_0x15883.blinkEvent.split(_0xB90A[572])[1]);
                    if (_0x117C4 || _0x117C4 == 0) {
                        _0x15883.blink(_0x117C4)
                    } else {
                        _0x15883.blink(3)
                    }
                };
                _0x15883._staticGlow = false;
                _0x15883.onMouseOver = function() {
                    if (!_0x15883._staticGlow && _0x15883.hoverGlow) {
                        _0x15883.addGlow();
                        _0x15883.isVisible = true
                    }
                };
                _0x15883.onMouseOut = function() {
                    if (!_0x15883._staticGlow && _0x15883.hoverGlow) {
                        _0x15883.removeGlow();
                        _0x15883.isVisible = false
                    };
                    _0x15883.updateShadow()
                };
                _0x15883.onUpdate = function() {
                    _0x15883.updateShadow()
                };
                return _0x15883
            }
            _0xB987(_0x1565D, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                var _0x1589C = this;
                this.events.addEventListener(Scene.Unit.UNIT_CREATED, function() {
                    _0x1589C.cacheShadow();
                    _0x1589C.autoUpdate()
                });
                if (this.colorGroup && _0x1565D.colorGroups.has(this.colorGroup)) {
                    this.color = _0x1565D.colorGroups[_0xB90A[8]](this.colorGroup)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.gameObject.inputEvents.addInputOver(this.onMouseOver, false);
                this.gameObject.inputEvents.addInputOut(this.onMouseOut);
                if (this.hoverGlow) {
                    this.hoverGlow = this.gameObject.game.device.desktop
                };
                if (this.blinkEvent) {
                    this.events.addEventListener(this.blinkEvent.split(_0xB90A[572])[0], this.onEventBlink)
                };
                if (this.stopBlinkEvent) {
                    this.events.addEventListener(this.stopBlinkEvent, this.onEventStopBlink)
                };
                if (this.group && this.group != _0xB90A[27]) {
                    if (_0x1565D.glowGroups.has(this.group)) {
                        _0x1565D.glowGroups[_0xB90A[8]](this.group).push(this)
                    } else {
                        _0x1565D.glowGroups[_0xB90A[95]](this.group, [this])
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1070], _0xB90A[5], function _0x156C1() {
                var _0x157D4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this.isVisible = true;
                if (_0x157D4) {
                    this.applyToGroup(this.addGlow)
                };
                this.updateShadow()
            }), _0xC639(_0xB90A[13], _0xB90A[944], _0xB90A[5], function _0x13CAE() {
                var _0x157D4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this.isVisible = false;
                this.gameObject.parent.removeChild(this.shadow);
                if (_0x157D4) {
                    this.applyToGroup(this.removeGlow)
                };
                this.updateShadow()
            }), _0xC639(_0xB90A[13], _0xB90A[1071], _0xB90A[5], function _0x156DA(_0x157ED) {
                var _0xD98F = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var _0x1581F = _0x1565D.glowGroups[_0xB90A[8]](this.group);
                if (!_0x1581F) {
                    return
                };
                for (var _0xC6E8 = 0; _0xC6E8 < _0x1581F.length; _0xC6E8++) {
                    var _0x15806 = _0x1581F[_0xC6E8];
                    if (_0x15806 == this) {
                        continue
                    };
                    if (_0x157ED == this.addGlow) {
                        _0x15806.addGlow(false)
                    } else {
                        if (_0x157ED == this.removeGlow) {
                            _0x15806.removeGlow(false)
                        } else {
                            if (_0x157ED == this.blink) {
                                _0x15806.blink(_0xD98F, false)
                            } else {
                                _0x15806.stopBlink(false)
                            }
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1072], _0xB90A[5], function _0x15789() {
                var _0x157D4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this._staticGlow = true;
                this.isVisible = true;
                this.stopBlink();
                this.addGlow(_0x157D4)
            }), _0xC639(_0xB90A[13], _0xB90A[1073], _0xB90A[5], function _0x15770() {
                var _0x157D4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                this._staticGlow = false;
                this.isVisible = false;
                this.removeGlow(_0x157D4)
            }), _0xC639(_0xB90A[13], _0xB90A[1074], _0xB90A[5], function _0x1570C(_0xD98F) {
                var _0x157D4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                if (_0x157D4) {
                    this.applyToGroup(this.blink, _0xD98F)
                };
                this._blink(_0xD98F)
            }), _0xC639(_0xB90A[13], _0xB90A[1075], _0xB90A[5], function _0x15676(_0xD98F) {
                this.staticGlow(false);
                this.shadow.alpha = 0;
                this.tween = Components.Tweens.create(this.shadow).to(_0xC639(_0xB90A[45], 1), 300, null, true, 0, _0xD98F, true);
                this.tween.onComplete.add(this.removeStaticGlow, this)
            }), _0xC639(_0xB90A[13], _0xB90A[1076], _0xB90A[5], function _0x157A2() {
                var _0x157D4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                if (_0x157D4) {
                    this.applyToGroup(this._stopBlink)
                };
                this._stopBlink()
            }), _0xC639(_0xB90A[13], _0xB90A[1077], _0xB90A[5], function _0x156A8() {
                if (this.tween) {
                    this.tween.stop(true)
                };
                this.tween = null
            }), _0xC639(_0xB90A[13], _0xB90A[1078], _0xB90A[5], function _0x156F3() {
                if (!this.isAutoUpdating) {
                    this.events.addEventListener(_0xB90A[29], this.onUpdate)
                };
                this.isAutoUpdating = true
            }), _0xC639(_0xB90A[13], _0xB90A[1079], _0xB90A[5], function _0x15757() {
                this.events.removeEventListener(_0xB90A[29], this.onUpdate);
                this.isAutoUpdating = false
            }), _0xC639(_0xB90A[13], _0xB90A[1080], _0xB90A[5], function _0x157BB() {
                if (!this._staticGlow) {
                    this.shadow.alpha = this.gameObject.alpha
                };
                this.shadow.visible = this.isVisible
            }), _0xC639(_0xB90A[13], _0xB90A[693], _0xB90A[5], function _0x107A7(_0x106DF) {
                this.color = _0x106DF;
                this.cacheShadow()
            }), _0xC639(_0xB90A[13], _0xB90A[1081], _0xB90A[5], function _0x15725() {
                this.blur = 10;
                var _0xD3CC = this.gameObject.getComponent(Components.ButtonComponent);
                var _0x1586A = this.gameObject.rotation;
                var _0x118A5 = this.gameObject.scale.x;
                var _0x118BE = this.gameObject.scale.y;
                var _0x130F6 = this.gameObject.alpha;
                this.gameObject.scale[_0xB90A[95]](1, 1);
                this.gameObject.rotation = 0;
                this.gameObject.alpha = 1;
                this.goData = Util.Bitmap.create(this.gameObject.width, this.gameObject.height);
                var _0xD223 = Util.Bitmap.create(this.gameObject.width, this.gameObject.height);
                this.goData.draw(this.gameObject, this.gameObject.anchor.x * this.gameObject.width, this.gameObject.anchor.y * this.gameObject.height);
                _0xD223.draw(this.gameObject, this.gameObject.anchor.x * this.gameObject.width, this.gameObject.anchor.y * this.gameObject.height);
                var _0x15838;
                this.offset = 0;
                var _0x15851 = this.blur * 1;
                for (var _0xC6E8 = 0; _0xC6E8 < this.strength; _0xC6E8++) {
                    if (_0x15838) {
                        this.bmd1 = Util.Bitmap.create(_0x15838.width + _0x15851, _0x15838.height + _0x15851);
                        this.bmd1.shadow(this.color, this.blur, 0.000000000000000000001, 0.000000000000000000001);
                        this.bmd1.draw(_0x15838, _0x15851 / 2, _0x15851 / 2);
                        _0x15838.destroy()
                    } else {
                        this.bmd1 = Util.Bitmap.create(this.gameObject.width + _0x15851, this.gameObject.height + _0x15851);
                        this.bmd1.shadow(this.color, this.blur, 0.000000000000000000001, 0.000000000000000000001);
                        this.bmd1.draw(this.goData, _0x15851 / 2, _0x15851 / 2);
                        this.goData.destroy()
                    };
                    _0x15838 = this.bmd1;
                    this.offset += _0x15851
                };
                this.bmd1.blendDestinationOut();
                this.bmd1.draw(_0xD223, this.offset / 2, this.offset / 2);
                this.bmd1.blendSourceOver();
                _0xD223.destroy();
                var _0xCC47 = new GameObject(this.gameObject.game, _0xB90A[1082] + this.gameObject.name);
                this.shadow = _0xCC47;
                _0xCC47.loadTexture(this.bmd1);
                this.shadow.anchor.x = (this.gameObject.anchor.x * this.gameObject.width + this.offset / 2) / this.bmd1.width;
                this.shadow.anchor.y = (this.gameObject.anchor.y * this.gameObject.height + this.offset / 2) / this.bmd1.height;
                this.gameObject.rotation = _0x1586A;
                this.gameObject.scale[_0xB90A[95]](_0x118A5, _0x118BE);
                this.gameObject.alpha = _0x130F6;
                this.gameObject.addChild(this.shadow);
                this.shadow.position[_0xB90A[95]](0, 0);
                this.shadow.visible = false
            }), _0xC639(_0xB90A[13], _0xB90A[1083], _0xB90A[5], function _0x1573E() {
                this.shadow.destroy();
                this.shadow = null
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                if (_0x1565D.glowGroups.size != 0) {
                    Util.Util.destroyMap(_0x1565D.glowGroups);
                    _0x1565D.glowGroups.clear()
                };
                this.bmd1.destroy();
                this.bmd1 = null;
                this.goData = null;
                _get(_getPrototypeOf(_0x1565D.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x1565D
        }(Scene.Component);
        _0x1565D.colorGroups = new Map([
            [_0xB90A[1084], _0xB90A[1085]],
            [_0xB90A[1086], _0xB90A[1087]],
            [_0xB90A[1088], _0xB90A[1089]],
            [_0xB90A[1090], _0xB90A[1091]],
            [_0xB90A[1092], _0xB90A[1093]],
            [_0xB90A[1094], _0xB90A[1095]],
            [_0xB90A[1096], _0xB90A[1097]],
            [_0xB90A[1098], _0xB90A[1099]],
            [_0xB90A[1100], _0xB90A[1101]],
            [_0xB90A[1102], _0xB90A[1103]],
            [_0xB90A[1104], _0xB90A[1105]],
            [_0xB90A[1106], _0xB90A[1107]],
            [_0xB90A[1108], _0xB90A[1109]],
            [_0xB90A[1110], _0xB90A[1111]],
            [_0xB90A[1112], _0xB90A[1113]],
            [_0xB90A[1114], _0xB90A[1115]],
            [_0xB90A[1116], _0xB90A[1117]],
            [_0xB90A[1118], _0xB90A[1119]],
            [_0xB90A[1120], _0xB90A[1121]],
            [_0xB90A[1122], _0xB90A[1123]],
            [_0xB90A[1124], _0xB90A[1125]],
            [_0xB90A[1126], _0xB90A[1127]],
            [_0xB90A[1128], _0xB90A[1129]]
        ]);
        _0x1565D.glowGroups = new Map();
        Components.GlowComponent = _0x1565D
    }

    function _0xC45E(Components) {
        var _0x158B5 = function(_0x158CE) {
            _0xBA1D(_0x158B5, _0x158CE);

            function _0x158B5() {
                var _0x158E7;
                _0xB955(this, _0x158B5);
                _0x158E7 = _0xB9A0(this, _getPrototypeOf(_0x158B5).apply(this, arguments));
                _0x158E7.unit = _0xB90A[233];
                _0x158E7.showTransition = true;
                _0x158E7.onEvent = function() {
                    if (_0x158E7.delay > 0) {
                        _0x158E7.gameObject.game.time.events.add(_0x158E7.delay, function() {
                            Managers.SceneManager.instance.loadUnit(_0x158E7.unit, _0x158E7.showTransition)
                        }, _0xB9B9(_0x158E7))
                    } else {
                        Managers.SceneManager.instance.loadUnit(_0x158E7.unit, _0x158E7.showTransition)
                    }
                };
                return _0x158E7
            }
            _0xB987(_0x158B5, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                if (this.event) {
                    this.events.addEventListener(this.event, this.onEvent)
                };
                if (this.showEndOnce && !_0x158B5.endShown.has(this.gameObject.name)) {
                    _0x158B5.endShown[_0xB90A[95]](this.gameObject.name, 1);
                    this.unit = _0xB90A[1130]
                };
                if (Components.DevUtils.getCurrentUnitName() == _0xB90A[1131] && !Components.SessionData.FIRST_TIME_LOGIN) {
                    this.unit = _0xB90A[1132]
                }
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743() {
                var _0x15900 = this;
                if (this.event == _0xB90A[27] || !this.event) {
                    if (this.delay > 0) {
                        this.gameObject.game.time.events.add(this.delay, function() {
                            Managers.SceneManager.instance.loadUnit(_0x15900.unit, _0x15900.showTransition)
                        }, this)
                    } else {
                        Managers.SceneManager.instance.loadUnit(this.unit, this.showTransition)
                    }
                }
            })]);
            return _0x158B5
        }(Scene.Component);
        _0x158B5.endShown = new Map();
        Components.LoadUnitComponent = _0x158B5
    }

    function _0xC477(Components) {
        var _0x15919 = function(_0x15932) {
            _0xBA1D(_0x15919, _0x15932);

            function _0x15919() {
                var _0x1594B;
                _0xB955(this, _0x15919);
                _0x1594B = _0xB9A0(this, _getPrototypeOf(_0x15919).apply(this, arguments));
                _0x1594B.onMouseDown = function(_0xC7FB) {
                    _0x1594B.gameObject.inputEvents.sendInputDown()
                };
                _0x1594B.onMouseUp = function(_0xC7FB) {
                    _0x1594B.gameObject.inputEvents.sendInputUp()
                };
                _0x1594B.onMouseOver = function(_0xC7FB) {
                    _0x1594B.gameObject.inputEvents.sendInputOver()
                };
                _0x1594B.onMouseOut = function(_0xC7FB, _0x15469) {
                    _0x1594B.gameObject.inputEvents.sendInputOut()
                };
                return _0x1594B
            }
            _0xB987(_0x15919, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.gameObject.inputEnabled = true;
                this.gameObject.events.onInputDown.add(this.onMouseDown, this);
                this.gameObject.events.onInputUp.add(this.onMouseUp, this);
                this.gameObject.events.onInputOver.add(this.onMouseOver, this);
                this.gameObject.events.onInputOut.add(this.onMouseOut, this)
            })]);
            return _0x15919
        }(Scene.Component);
        Components.MouseInputComponent = _0x15919
    }

    function _0xC490(Components) {
        var _0x15964 = function(_0x1597D) {
            _0xBA1D(_0x15964, _0x1597D);

            function _0x15964() {
                var _0x15996;
                _0xB955(this, _0x15964);
                _0x15996 = _0xB9A0(this, _getPrototypeOf(_0x15964).apply(this, arguments));
                _0x15996.music_name = _0xB90A[1133];
                return _0x15996
            }
            _0xB987(_0x15964, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                Managers.SoundManager.playMusic(this.music_name, 0.7, true)
            }), _0xC639(_0xB90A[13], _0xB90A[66], _0xB90A[5], function _0xCDF0() {})]);
            return _0x15964
        }(Scene.Component);
        Components.MusicComponent = _0x15964
    }

    function _0xC4A9(Components) {
        var _0x159AF = function(_0x159C8) {
            _0xBA1D(_0x159AF, _0x159C8);

            function _0x159AF() {
                var _0x15A5E;
                _0xB955(this, _0x159AF);
                _0x15A5E = _0xB9A0(this, _getPrototypeOf(_0x159AF).apply(this, arguments));
                _0x15A5E.zone = _0xB90A[27];
                _0x15A5E.openMethod = Managers.NetworkManager.OPEN_WINDOW;
                _0x15A5E.disabled = false;
                _0x15A5E.utm = true;
                return _0x15A5E
            }
            _0xB987(_0x159AF, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.originalZone = this.zone;
                this.getData();
                if (this.zone.indexOf(_0xB90A[771]) != -1) {
                    this.zone = this.originalZone
                };
                if (this.gameObject.name.indexOf(_0xB90A[1134]) != -1) {
                    this.gameObject.name = _0xB90A[1135];
                    this.gameObject.tags[0] = _0xB90A[1135]
                };
                if (this.gameObject.tags[0] != Util.GameData.CAMPAIGN_NAME && _0x159AF.facebook_link.has(this.gameObject.tags[0])) {
                    this.gameObject.disableInput();
                    this.gameObject.visible = false;
                    return
                };
                if (this.utm != false) {
                    this.utm = true
                };
                if (this.data) {
                    this.parseData()
                };
                if (this.zone == _0xB90A[1136] && !this.url) {
                    this.url = _0x159AF.facebook_link[_0xB90A[8]](Util.GameData.CAMPAIGN_NAME);
                    this.utm = false
                } else {
                    if (this.zone == _0xB90A[1137] && !this.url) {
                        this.url = _0x159AF.youtube_link[_0xB90A[8]](Util.GameData.CAMPAIGN_NAME);
                        this.utm = false
                    } else {
                        if (_0x159AF.site_link.has(this.zone) && !this.url) {
                            this.url = _0x159AF.site_link[_0xB90A[8]](this.zone)
                        }
                    }
                };
                if (this.url == null) {
                    this.url = _0xB90A[1138] + GameData.SITE_LINK
                };
                if (this.zone == _0xB90A[27]) {
                    this.zone = Components.DevUtils.getCurrentUnitUtm()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743() {
                if (!this.disabled) {
                    var _0xCD8C = Util.Util.createEventData([
                        [_0xB90A[1139], this.url],
                        [_0xB90A[1140], this.zone]
                    ]);
                    if (this.utm == true) {
                        this.events.throwEvent(this.openMethod, _0xCD8C)
                    } else {
                        this.events.throwEvent(this.openMethod, Util.Util.createEventData([
                            [_0xB90A[1139], this.url]
                        ]))
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1141], _0xB90A[5], function _0x15A13() {
                if (this.data.utm == _0xB90A[142]) {
                    this.utm == true
                } else {
                    this.utm = false
                };
                if (this.data.show == _0xB90A[142]) {
                    this.parent ? this.parent.visible = true : this.gameObject.visible = true;
                    this.parent ? this.parent.enableInput() : this.gameObject.enableInput()
                } else {
                    this.parent ? this.parent.visible = false : this.gameObject.visible = false;
                    this.parent ? this.parent.ignoreChildInput = true : this.gameObject.input.enabled = false
                };
                this.url = this.data.url;
                if (this.url == _0xB90A[27]) {
                    this.disabled = true;
                    this.gameObject.disableInput()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[524], _0xB90A[5], function _0xF57D() {
                var _0x15A2C = this.zone;
                if (this.zone.indexOf(_0xB90A[771]) != -1) {
                    this.zone = _0xB90A[771]
                };
                var _0xD0F7 = GameData.zones[_0xB90A[8]](this.zone);
                if (this.zone.indexOf(_0xB90A[771]) != -1) {
                    this.zone = _0x15A2C
                };
                if (_0xD0F7) {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                        var _0xCE22 = _0xD0F7[_0xC6E8];
                        if (_0xCE22.unit != _0xB90A[27]) {
                            var _0x101B2 = _0xCE22.unit.split(_0xB90A[572]);
                            var _0x15A45 = Components.DevUtils.getCurrentUnitName();
                            if (_0x101B2.indexOf(_0x15A45) != -1) {
                                this.data = _0xCE22;
                                break
                            }
                        } else {
                            if (!this.data) {
                                this.data = _0xCE22
                            }
                        }
                    }
                };
                if (this.zone == _0xB90A[1142]) {
                    this.zone = _0xB90A[1143]
                };
                if (this.zone == _0xB90A[1144]) {
                    this.zone = _0xB90A[27];
                    if (this.data) {
                        this.parent = this.gameObject.parent
                    }
                };
                if (this.data) {
                    this.handleSrc();
                    this.handlePosition()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1145], _0xB90A[5], function _0x159E1() {
                if (this.data.xpos || this.data.ypos) {
                    this.gameObject.anchor[_0xB90A[95]](0, 0);
                    if (this.data.xpos) {
                        this.gameObject.x = Number(this.data.xpos)
                    };
                    if (this.data.ypos) {
                        this.gameObject.y = Number(this.data.ypos)
                    };
                    this.gameObject.anchor[_0xB90A[95]](0.5, 0.5);
                    this.gameObject.x += this.gameObject.width * 0.5;
                    this.gameObject.y += this.gameObject.height * 0.5
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1146], _0xB90A[5], function _0x159FA() {
                if (this.data.image) {
                    this.gameObject.loadTexture(this.data.image)
                }
            })]);
            return _0x159AF
        }(Scene.Component);
        _0x159AF.site_link = new Map([
            [_0xB90A[1147], _0xB90A[1148]],
            [_0xB90A[1149], _0xB90A[1150]],
            [_0xB90A[1151], _0xB90A[1152]],
            [_0xB90A[1153], _0xB90A[1154]],
            [_0xB90A[1155], _0xB90A[1156]],
            [_0xB90A[1157], _0xB90A[1158]],
            [_0xB90A[1159], _0xB90A[1160]],
            [_0xB90A[1161], _0xB90A[1162]]
        ]);
        _0x159AF.youtube_link = new Map([
            [_0xB90A[1163], _0xB90A[1164]],
            [_0xB90A[1165], _0xB90A[1166]]
        ]);
        _0x159AF.facebook_link = new Map([
            [_0xB90A[1163], _0xB90A[1167]],
            [_0xB90A[1165], _0xB90A[1168]],
            [_0xB90A[1135], _0xB90A[1169]]
        ]);
        Components.OpenSiteComponent = _0x159AF
    }

    function _0xC4C2(Components) {
        var _0x15A77 = function(_0x15A90) {
            _0xBA1D(_0x15A77, _0x15A90);

            function _0x15A77() {
                _0xB955(this, _0x15A77);
                return _0xB9A0(this, _getPrototypeOf(_0x15A77).apply(this, arguments))
            }
            _0xB987(_0x15A77, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                var _0x15AA9 = this;
                this.container.scale[_0xB90A[95]](0, 0);
                this._isShowing = false;
                if (this.container) {
                    this.container.disableInput();
                    for (var _0xC6E8 = 0; _0xC6E8 < this.container.children.length; _0xC6E8++) {
                        var _0xF163 = this.container.children[_0xC6E8]
                    }
                };
                this.events.addEventListener(Components.CreditsController.SHOW_CREDITS, function() {
                    _0x15AA9.onButtonPressed(null)
                })
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743(_0xC652) {
                var _0x15AC2 = this;
                if (this._isShowing) {
                    if (this.container) {
                        this.gameObject.game.add.tween(this.container.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), 400, null, true);
                        if (this.rotationAnimation) {
                            this.gameObject.game.add.tween(this.gameObject).to(_0xC639(_0xB90A[46], 360), 300, null, true)
                        };
                        Components.DevUtils.disableInputFor(this.gameObject, 300);
                        if (this.container) {
                            this.container.disableInput()
                        }
                    }
                } else {
                    if (this.container) {
                        this.gameObject.game.add.tween(this.container.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), 400, null, true).onComplete.addOnce(function() {
                            if (_0x15AC2.container) {
                                _0x15AC2.container.enableInput()
                            }
                        }, this);
                        if (this.rotationAnimation) {
                            this.gameObject.game.add.tween(this.gameObject).to(_0xC639(_0xB90A[46], 360), 400, null, true)
                        }
                    };
                    if (this.gameObject) {
                        Components.DevUtils.disableInputFor(this.gameObject, 300)
                    }
                };
                this._isShowing = !this._isShowing
            })]);
            return _0x15A77
        }(Scene.Component);
        Components.OptionsComponent = _0x15A77
    }

    function _0xC4DB(Components) {
        var _0x15ADB = function(_0x15AF4) {
            _0xBA1D(_0x15ADB, _0x15AF4);

            function _0x15ADB() {
                _0xB955(this, _0x15ADB);
                return _0xB9A0(this, _getPrototypeOf(_0x15ADB).apply(this, arguments))
            }
            _0xB987(_0x15ADB, [_0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.on = this.gameObject.children[0].getTexture();
                this.gameObject.children[0].destroy();
                this.off = this.gameObject.getTexture();
                this.checkButton()
            }), _0xC639(_0xB90A[13], _0xB90A[660], _0xB90A[5], function _0x10743(_0xC652) {
                if (this.gameObject.name.indexOf(_0xB90A[1170]) != -1) {
                    _0x15ADB.soundOn = !_0x15ADB.soundOn;
                    this.events.throwEvent(Managers.SoundManager.TOGGLE_SOUND)
                } else {
                    if (this.gameObject.name.indexOf(_0xB90A[771]) != -1) {
                        _0x15ADB.musicOn = !_0x15ADB.musicOn;
                        this.events.throwEvent(Managers.SoundManager.TOGGLE_MUSIC)
                    }
                };
                this.checkButton()
            }), _0xC639(_0xB90A[13], _0xB90A[1171], _0xB90A[5], function _0x15B0D() {
                if (this.gameObject.name.indexOf(_0xB90A[1170]) != -1) {
                    if (_0x15ADB.soundOn) {
                        this.gameObject.loadTexture(this.on)
                    } else {
                        this.gameObject.loadTexture(this.off)
                    }
                } else {
                    if (this.gameObject.name.indexOf(_0xB90A[771]) != -1) {
                        if (_0x15ADB.musicOn) {
                            this.gameObject.loadTexture(this.on)
                        } else {
                            this.gameObject.loadTexture(this.off)
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                this.on = null;
                this.off = null;
                _get(_getPrototypeOf(_0x15ADB.prototype), _0xB90A[24], this).call(this)
            })]);
            return _0x15ADB
        }(Scene.Component);
        _0x15ADB.soundOn = true;
        _0x15ADB.musicOn = true;
        Components.ToggleComponent = _0x15ADB
    }

    function _0xC4F4(Components) {
        var _0x15B26 = function(_0x15B3F) {
            _0xBA1D(_0x15B26, _0x15B3F);

            function _0x15B26() {
                var _0x15C39;
                _0xB955(this, _0x15B26);
                _0x15C39 = _0xB9A0(this, _getPrototypeOf(_0x15B26).apply(this, arguments));
                _0x15C39.animationMidStartDelay = 0;
                _0x15C39.animationDuration = 0;
                _0x15C39.mid = 0;
                _0x15C39.duration = 0;
                _0x15C39.transitionsObj = [];
                _0x15C39.objects = [];
                _0x15C39.textures = [];
                _0x15C39.totalObjects = 20;
                _0x15C39.activeObjects = [];
                _0x15C39.arrays = [];
                _0x15C39.height = 0;
                _0x15C39.initFillTransition = function() {
                    _0x15C39.gameObject.alpha = 0;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x15C39.totalObjects; _0xC6E8++) {
                        var _0xCE22 = GameObject.getTransitionObject(_0x15C39.fillTag + _0xB90A[61] + _0xC6E8);
                        if (_0xCE22) {
                            _0x15C39.transitionsObj.push(_0xCE22);
                            _0x15C39.textures.push(_0xCE22.texture);
                            _0xCE22.position[_0xB90A[95]](-500, -500);
                            _0xCE22.visible = false
                        }
                    };
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x15C39.totalObjects; _0xC6E8++) {
                        var _0xCE22 = new GameObject(_0x15C39.gameObject.game, _0xB90A[1172] + _0xC6E8);
                        _0x15C39.objects.push(_0xCE22)
                    };
                    _0x15C39.rect = new Phaser.Rectangle(0, 0, 1, 1)
                };
                _0x15C39.initNormalTrans = function() {
                    if (!_0x15C39.isAnimation) {
                        if (_0x15C39.vertical) {
                            if (_0x15C39.leftOrUp) {
                                _0x15C39.leftOrUp.y -= _0x15C39.leftOrUp.height
                            };
                            _0x15C39.rightOrDown.y += _0x15C39.rightOrDown.height
                        } else {
                            if (_0x15C39.leftOrUp) {
                                _0x15C39.leftOrUp.x -= _0x15C39.leftOrUp.width
                            };
                            _0x15C39.rightOrDown.x += _0x15C39.rightOrDown.width
                        }
                    };
                    if (_0x15C39.animationMidStartDelay != 0) {
                        _0x15C39.mid += _0x15C39.animationMidStartDelay
                    };
                    if (_0x15C39.animationDuration != 0) {
                        _0x15C39.duration += _0x15C39.animationDuration
                    }
                };
                _0x15C39.onTransitionStart = function(_0xCF35) {
                    if (_0x15C39.fill) {
                        _0x15C39.handleFillStart()
                    } else {
                        _0x15C39.handleNormalStart()
                    }
                };
                _0x15C39.handleFillStart = function() {
                    _0x15C39.spawnObjects(_0x15C39.totalObjects);
                    _0x15C39.gameObject.game.time.events.add(1000, function() {
                        _0x15C39.gameObject.game.add.tween(_0x15C39.gameObject).to(_0xC639(_0xB90A[45], 1), 1000, Phaser.Easing.Back.Out, true)
                    }, _0xB9B9(_0x15C39));
                    _0x15C39.gameObject.game.time.events.add(1500, function() {
                        _0x15C39.events.throwEvent(Managers.SceneManager.TRANSITION_CLOSE_ANIM_DONE)
                    }, _0xB9B9(_0x15C39));
                    _0x15C39.events.addEventListener(Managers.SceneManager.TRANSITION_OPEN_ANIM_START, _0x15C39.onTransitionMid)
                };
                _0x15C39.spawnObjects = function(_0xD98F) {
                    var _0xFB72 = _0x15C39.gameObject.game.rnd.integerInRange(2, 4);
                    var _0x15C52 = [];
                    while (_0xFB72 > 0) {
                        _0xFB72--;
                        var _0xC652 = _0x15C39.getObject();
                        var _0x15C6B = _0x15C39.gameObject.game.rnd.integerInRange(0, Core.Main.game.canvas.width);
                        var _0x15C84 = _0x15C39.gameObject.game.rnd.integerInRange(0, Core.Main.game.canvas.height);
                        var _0xDA3E = 0;
                        while (!_0x15C39.isGood(_0x15C6B, _0x15C84) && _0xDA3E < 100) {
                            var _0x15C6B = _0x15C39.gameObject.game.rnd.integerInRange(0, Core.Main.game.canvas.width);
                            var _0x15C84 = _0x15C39.gameObject.game.rnd.integerInRange(0, Core.Main.game.canvas.height);
                            _0xDA3E++
                        };
                        if (_0xDA3E < 100) {
                            _0x15C39.gameObject.parent.parent.addChild(_0xC652);
                            _0xC652.x = _0x15C6B;
                            _0xC652.y = _0x15C84;
                            _0x15C39.activeObjects.push(_0xC652);
                            _0x15C52.push(_0xC652)
                        } else {
                            trace(_0xB90A[1173]);
                            _0x15C39.objects.push(_0xC652)
                        }
                    };
                    if (_0x15C52.length != 0) {
                        _0x15C39.arrays.push(_0x15C52);
                        _0x15C39.animateArrayUp(_0x15C52)
                    };
                    if (_0xD98F > 0) {
                        _0x15C39.gameObject.game.time.events.add(50, _0x15C39.spawnObjects, _0xB9B9(_0x15C39), _0xD98F - 1)
                    }
                };
                _0x15C39.handleNormalStart = function() {
                    _0x15C39.events.addEventListener(Managers.SceneManager.TRANSITION_OPEN_ANIM_START, _0x15C39.onTransitionMid);
                    if (!_0x15C39.isAnimation) {
                        var _0x12683 = null;
                        if (_0x15C39.leftOrUp) {
                            _0x12683 = _0x15C39.gameObject.game.add.tween(_0x15C39.leftOrUp.position)
                        };
                        if (_0x15C39.vertical) {
                            if (_0x15C39.leftOrUp) {
                                _0x12683.to(_0xC639(_0xB90A[44], _0x15C39.leftOrUp.position.y + _0x15C39.leftOrUp.height), 600);
                                _0x12683.start()
                            };
                            var _0x1269C = _0x15C39.gameObject.game.add.tween(_0x15C39.rightOrDown.position);
                            _0x1269C.to(_0xC639(_0xB90A[44], _0x15C39.rightOrDown.position.y - _0x15C39.rightOrDown.height), 600);
                            _0x1269C.onComplete.addOnce(function() {
                                _0x15C39.events.throwEvent(Managers.SceneManager.TRANSITION_CLOSE_ANIM_DONE)
                            });
                            _0x1269C.start()
                        } else {
                            if (_0x15C39.leftOrUp) {
                                _0x12683.to(_0xC639(_0xB90A[43], _0x15C39.leftOrUp.position.x + _0x15C39.leftOrUp.width), 600);
                                _0x12683.start()
                            };
                            var _0x1269C = _0x15C39.gameObject.game.add.tween(_0x15C39.rightOrDown.position);
                            _0x1269C.to(_0xC639(_0xB90A[43], _0x15C39.rightOrDown.position.x - _0x15C39.rightOrDown.width), 600);
                            _0x1269C.onComplete.addOnce(function() {
                                _0x15C39.events.throwEvent(Managers.SceneManager.TRANSITION_CLOSE_ANIM_DONE)
                            });
                            _0x1269C.start()
                        }
                    } else {
                        _0x15C39.gameObject.game.time.events.add(_0x15C39.mid, function() {
                            _0x15C39.events.throwEvent(Managers.SceneManager.TRANSITION_CLOSE_ANIM_DONE)
                        }, _0xB9B9(_0x15C39))
                    }
                };
                _0x15C39.onTransitionMid = function(_0xCF35) {
                    if (_0x15C39.fill) {
                        _0x15C39.handleFillMidTransition()
                    } else {
                        _0x15C39.handleNormalMidTransition()
                    }
                };
                _0x15C39.handleFillMidTransition = function() {
                    _0x15C39.gameObject.game.add.tween(_0x15C39.gameObject).to(_0xC639(_0xB90A[45], 0), 1000, Phaser.Easing.Back.In, true);
                    _0x15C39.gameObject.game.time.events.add(1000, function() {
                        _0x15C39.despawnObjects(_0x15C39.arrays.length - 1)
                    }, _0xB9B9(_0x15C39));
                    _0x15C39.events.removeEventListener(Managers.SceneManager.TRANSITION_OPEN_ANIM_START, _0x15C39.onTransitionMid)
                };
                _0x15C39.handleNormalMidTransition = function() {
                    if (!_0x15C39.isAnimation) {
                        if (_0x15C39.vertical) {
                            if (_0x15C39.leftOrUp) {
                                var _0x12683 = Core.game.add.tween(_0x15C39.leftOrUp.position);
                                _0x12683.to(_0xC639(_0xB90A[44], _0x15C39.leftOrUp.position.y - _0x15C39.leftOrUp.height), 600, Phaser.Easing.Linear.None, false, 200);
                                _0x12683.start()
                            };
                            var _0x1269C = _0x15C39.gameObject.game.add.tween(_0x15C39.rightOrDown.position);
                            _0x1269C.to(_0xC639(_0xB90A[44], _0x15C39.rightOrDown.position.y + _0x15C39.rightOrDown.height), 600, Phaser.Easing.Linear.None, false, 200);
                            _0x1269C.onComplete.addOnce(function() {
                                _0x15C39.onAnimationsFinished()
                            });
                            _0x1269C.start()
                        } else {
                            if (_0x15C39.leftOrUp) {
                                var _0x12683 = Core.game.add.tween(_0x15C39.leftOrUp.position);
                                _0x12683.to(_0xC639(_0xB90A[43], _0x15C39.leftOrUp.position.x - _0x15C39.leftOrUp.width), 600, Phaser.Easing.Linear.None, false, 200);
                                _0x12683.start()
                            };
                            var _0x1269C = _0x15C39.gameObject.game.add.tween(_0x15C39.rightOrDown.position);
                            _0x1269C.to(_0xC639(_0xB90A[43], _0x15C39.rightOrDown.position.x + _0x15C39.rightOrDown.width), 600, Phaser.Easing.Linear.None, false, 200);
                            _0x1269C.onComplete.addOnce(function() {
                                _0x15C39.onAnimationsFinished()
                            });
                            _0x1269C.start()
                        }
                    } else {
                        _0x15C39.gameObject.game.time.events.add(_0x15C39.duration - _0x15C39.mid, function() {
                            _0x15C39.onAnimationsFinished()
                        }, _0xB9B9(_0x15C39))
                    };
                    _0x15C39.events.removeEventListener(Managers.SceneManager.TRANSITION_OPEN_ANIM_START, _0x15C39.onTransitionMid)
                };
                _0x15C39.onAnimationsFinished = function() {
                    if (_0x15C39.fill) {
                        _0x15C39.activeObjects.length = 0
                    };
                    _0x15C39.events.throwEvent(Managers.SceneManager.TRANSITION_DONE)
                };
                return _0x15C39
            }
            _0xB987(_0x15B26, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {
                this.events.addEventListener(Scene.Unit.UNIT_CREATED, function() {})
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.events.addEventListener(Managers.SceneManager.TRANSITION_CLOSE_ANIM_START, this.onTransitionStart);
                if (this.fill) {
                    this.initFillTransition()
                } else {
                    this.initNormalTrans()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1174], _0xB90A[5], function _0x15B8A(_0x111CF) {
                var _0x15BEE = this;
                if (_0x111CF != -1) {
                    this.animateArrayDown(this.arrays[_0x111CF]);
                    this.arrays[_0x111CF].length = 0;
                    this.gameObject.game.time.events.add(50, this.despawnObjects, this, _0x111CF - 1)
                } else {
                    this.arrays.length = 0;
                    this.gameObject.game.time.events.add(500, function() {
                        _0x15BEE.onAnimationsFinished()
                    }, this)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1175], _0xB90A[5], function _0x15B71(_0xD0F7) {
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xC652 = _0xD0F7[_0xC6E8];
                    var _0xCC92 = this.gameObject.game.rnd.integerInRange(400, 700);
                    Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[45], 1), 50, null, true);
                    Components.Tweens.create(_0xC652.scale).to(_0xC639(_0xB90A[43], 1, _0xB90A[44], 1), _0xCC92, Phaser.Easing.Back.Out, true)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1176], _0xB90A[5], function _0x15B58(_0xD0F7) {
                for (var _0xC6E8 = 0; _0xC6E8 < _0xD0F7.length; _0xC6E8++) {
                    var _0xC652 = _0xD0F7[_0xC6E8];
                    var _0xCC92 = this.gameObject.game.rnd.integerInRange(400, 700);
                    Components.Tweens.create(_0xC652).to(_0xC639(_0xB90A[45], 0), 50, null, true, _0xCC92 - 50);
                    Components.Tweens.create(_0xC652.scale).to(_0xC639(_0xB90A[43], 0, _0xB90A[44], 0), _0xCC92, Phaser.Easing.Back.In, true);
                    this.objects.push(_0xC652)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1177], _0xB90A[5], function _0x15BA3() {
                var _0xC652 = null;
                if (this.objects.length > 0) {
                    _0xC652 = this.objects.shift()
                } else {
                    _0xC652 = new GameObject(this.gameObject.game, _0xB90A[1172] + this.totalObjects);
                    this.totalObjects++
                };
                _0xC652.loadTexture(this.rngTexture());
                _0xC652.anchor[_0xB90A[95]](0.5, 0.5);
                _0xC652.alpha = 0;
                _0xC652.scale[_0xB90A[95]](0, 0);
                if (!_0xC652.input) {
                    _0xC652.inputEnabled = true
                };
                return _0xC652
            }), _0xC639(_0xB90A[13], _0xB90A[1178], _0xB90A[5], function _0x15BBC(_0xD6A1, _0xD6BA) {
                var _0x15C07 = this;
                var _0x15C20 = true;
                this.activeObjects.forEach(function(_0xC652) {
                    var _0xD016 = _0xC652.alpha;
                    var _0x13B69 = _0xC652.scale.x;
                    var _0x13B82 = _0xC652.scale.y;
                    _0xC652.input.pixelPerfectAlpha = 0;
                    _0xC652.scale[_0xB90A[95]](1, 1);
                    _0xC652.alpha = 1;
                    var _0x1140E = true;
                    _0x15C07.rect.x = _0xC652.x - _0xC652.width * _0xC652.anchor.x;
                    _0x15C07.rect.y = _0xC652.y - _0xC652.height * _0xC652.anchor.y;
                    _0x15C07.rect.width = _0xC652.width;
                    _0x15C07.rect.height = _0xC652.height;
                    if (_0x15C07.rect.contains(_0xD6A1, _0xD6BA)) {
                        _0x1140E = false
                    };
                    _0xC652.scale[_0xB90A[95]](_0x13B69, _0x13B82);
                    _0xC652.alpha = _0xD016;
                    _0x15C20 = _0x15C20 && _0x1140E
                });
                return _0x15C20
            }), _0xC639(_0xB90A[13], _0xB90A[1179], _0xB90A[5], function _0x15BD5() {
                return this.textures[this.gameObject.game.rnd.integerInRange(0, this.textures.length - 1)]
            })]);
            return _0x15B26
        }(Scene.Component);
        Components.TransitionComponent = _0x15B26
    }

    function _0xC50D(Components) {
        var _0x15C9D = function(_0x15CB6) {
            _0xBA1D(_0x15C9D, _0x15CB6);

            function _0x15C9D() {
                var _0x15CE8;
                _0xB955(this, _0x15C9D);
                _0x15CE8 = _0xB9A0(this, _getPrototypeOf(_0x15C9D).apply(this, arguments));
                _0x15CE8.keepOriginal = true;
                _0x15CE8.containerName = _0xB90A[1180];
                _0x15CE8.dropZoneName = _0xB90A[1181];
                _0x15CE8.extraEndEvent = _0xB90A[27];
                _0x15CE8._dropZone = [];
                _0x15CE8.isChild = false;
                _0x15CE8.isFirst = false;
                _0x15CE8.original = false;
                _0x15CE8.initMc = function() {
                    if (_0x15CE8.containerName) {
                        _0x15CE8.dropContainer = GameObject.getObject(_0x15CE8.containerName)
                    };
                    _0x15CE8.initDropZones()
                };
                _0x15CE8.initDropZones = function() {
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x15CE8.dropZoneName.split(_0xB90A[572]).length; _0xC6E8++) {
                        var _0xCE22 = _0x15CE8.dropZoneName.split(_0xB90A[572])[_0xC6E8];
                        if (GameObject.getObject(_0xCE22)) {
                            _0x15CE8._dropZone.push(GameObject.getObject(_0xCE22));
                            _0x15CE8._dropZone[_0xC6E8].inputEnabled = true;
                            _0x15CE8._dropZone[_0xC6E8].input.pixelPerfectAlpha = 0.0001
                        }
                    };
                    if (_0x15CE8._dropZone[0] && _0x15CE8.dropContainer) {
                        _0x15CE8.initLocalEvents()
                    } else {
                        if (!_0x15CE8._dropZone[0]) {
                            trace(_0xB90A[1182], _0xB90A[589])
                        };
                        if (!_0x15CE8.dropContainer) {
                            trace(_0xB90A[1183], _0xB90A[589])
                        }
                    }
                };
                _0x15CE8.initLocalEvents = function() {
                    _0x15CE8.gameObject.inputEnabled = true;
                    _0x15CE8.gameObject.input.enabled = true;
                    _0x15CE8.gameObject.input.enableDrag(false, false);
                    _0x15CE8.gameObject.events.onDragStop.add(_0x15CE8.onDragStop);
                    _0x15CE8.gameObject.events.onDragStart.add(_0x15CE8.onDragStart);
                    _0x15CE8.initContainer = _0x15CE8.gameObject.parent;
                    _0x15CE8.events.addEventListener(Scene.Unit.PRE_DESTROY, _0x15CE8.disable, true);
                    _0x15CE8.events.addEventListener(Managers.SceneManager.LOAD_UNIT, _0x15CE8.disable);
                    _0x15CE8.events.addEventListener(_0x15C9D.RESET_ALL_STICKERS, _0x15CE8.handleRemoveAll);
                    _0x15CE8.events.addEventListener(_0x15C9D.DISABLE_STICKERS, function() {
                        _0x15CE8.gameObject.input.enabled = false
                    });
                    _0x15CE8.events.addEventListener(_0x15C9D.ENABLE_STICKERS, function() {
                        _0x15CE8.gameObject.input.enabled = true
                    })
                };
                _0x15CE8.handleRemoveAll = function() {
                    if (!_0x15CE8.isFirst) {
                        _0x15CE8.gameObject.destroy();
                        _0x15CE8.gameObject = null
                    }
                };
                _0x15CE8.onDragStart = function() {
                    Components.DevUtils.playSound(_0xB90A[609]);
                    if (_0x15CE8.dropContainer) {
                        _0x15CE8.gameObject.game.stage.addChild(_0x15CE8.gameObject)
                    };
                    _0x15CE8.startPoint = new Phaser.Point(_0x15CE8.gameObject.position.x, _0x15CE8.gameObject.position.y);
                    if (_0x15CE8.keepOriginal) {
                        var _0x15D01 = _0x15CE8.duplicateObject()
                    };
                    _0x15CE8.initIndex = _0x15CE8.gameObject.parent.getChildIndex(_0x15CE8.gameObject);
                    _0x15CE8.gameObject.parent.setChildIndex(_0x15CE8.gameObject, _0x15CE8.gameObject.parent.children.length - 1)
                };
                _0x15CE8.onDragStop = function() {
                    var _0x135D8;
                    if (_0x135D8 = _0x15CE8.ceheckDropZone()) {
                        Components.DevUtils.playSound(_0xB90A[609]);
                        _0x15CE8.isFirst = false;
                        _0x15CE8.keepOriginal = false;
                        _0x15CE8.events.throwEvent(_0xB90A[1184], Util.Util.createEventData([
                            [_0xB90A[6], _0x15CE8.gameObject],
                            [_0xB90A[1140], _0x135D8]
                        ]));
                        if (_0x15CE8.dropContainer) {
                            _0x15CE8.dropContainer.addChild(_0x15CE8.gameObject)
                        }
                    } else {
                        _0x15CE8.gameObject.input.enabled = false;
                        _0x15CE8.gameObject.game.add.tween(_0x15CE8.gameObject.position).to(_0xC639(_0xB90A[43], _0x15CE8.startPoint.x, _0xB90A[44], _0x15CE8.startPoint.y), 200, null, true).onComplete.addOnce(function() {
                            if (_0x15CE8.keepOriginal) {
                                _0x15CE8.gameObject.destroy()
                            } else {
                                _0x15CE8.gameObject.input.enabled = true;
                                if (_0x15CE8.dropContainer) {
                                    _0x15CE8.dropContainer.addChild(_0x15CE8.gameObject)
                                }
                            }
                        })
                    }
                };
                _0x15CE8.disable = function() {
                    _0x15CE8.gameObject.disableInput();
                    _0x15CE8.gameObject.input.draggable = false
                };
                return _0x15CE8
            }
            _0xB987(_0x15C9D, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.keepOriginal = true;
                this.initMc()
            }), _0xC639(_0xB90A[13], _0xB90A[1185], _0xB90A[5], function _0x15CCF() {
                for (var _0xC6E8 = 0; _0xC6E8 < this._dropZone.length; _0xC6E8++) {
                    var _0x135D8 = this._dropZone[_0xC6E8];
                    if (_0x135D8.input.checkPixel(null, null, this.gameObject.game.input.activePointer)) {
                        return _0x135D8
                    }
                };
                return null
            }), _0xC639(_0xB90A[13], _0xB90A[848], _0xB90A[5], function _0x11FF8() {
                var _0xDCFA = this.gameObject.name.split(_0xB90A[61])[0] + _0xB90A[61] + _0x15C9D.stickersCount;
                _0x15C9D.stickersCount++;
                var _0xCC47 = new GameObject(this.gameObject.game, _0xDCFA);
                _0xCC47.loadTexture(this.gameObject.texture);
                this.initContainer.addChild(_0xCC47);
                _0xCC47.anchor.x = this.gameObject.anchor.x;
                _0xCC47.anchor.y = this.gameObject.anchor.y;
                _0xCC47.position.x = this.gameObject.position.x;
                _0xCC47.position.y = this.gameObject.position.y;
                _0xCC47.scale.x = this.gameObject.scale.x;
                _0xCC47.scale.y = this.gameObject.scale.y;
                _0xCC47.angle = this.gameObject.angle;
                _0xCC47.alpha = this.gameObject.alpha;
                var _0x10E32 = new _0x15C9D();
                _0x10E32.isChild = true;
                _0xCC47.addComponent(_0x10E32);
                _0x10E32.init();
                _0x10E32.keepOriginal = this.keepOriginal;
                _0x10E32.original = false;
                _0x10E32.isFirst = true;
                var _0x15806 = this.gameObject.getComponent(Components.GlowComponent);
                if (_0x15806) {
                    _0x15806.autoUpdate();
                    var _0x15D1A = new Components.GlowComponent();
                    _0x15D1A.color = _0x15806.color;
                    _0xCC47.addComponent(new Components.MouseInputComponent());
                    _0xCC47.addComponent(_0x15D1A);
                    _0x15D1A.init();
                    _0x15D1A.autoUpdate()
                };
                return _0xCC47
            })]);
            return _0x15C9D
        }(Scene.Component);
        _0x15C9D.RESET_ALL_STICKERS = _0xB90A[1186];
        _0x15C9D.DISABLE_STICKERS = _0xB90A[1187];
        _0x15C9D.ENABLE_STICKERS = _0xB90A[1188];
        _0x15C9D.stickersCount = 0;
        Components.DragComponent = _0x15C9D
    }

    function _0xC526(Components) {
        var _0x15D33 = function(_0x15D4C) {
            _0xBA1D(_0x15D33, _0x15D4C);

            function _0x15D33() {
                var _0x15D7E;
                _0xB955(this, _0x15D33);
                _0x15D7E = _0xB9A0(this, _getPrototypeOf(_0x15D33).apply(this, arguments));
                _0x15D7E._loadedOnce = false;
                _0x15D7E._goodButtons = [];
                _0x15D7E.scaleAmount = 0.05;
                _0x15D7E.rotationAmount = 36;
                _0x15D7E.initLocalEvents = function() {
                    _0x15D7E.events.addEventListener(_0xB90A[1184], _0x15D7E.onFocusChanged);
                    _0x15D7E.scaleUp.inputEvents.addButtonPressed(_0x15D7E.handleScaleUp);
                    _0x15D7E.scaleDown.inputEvents.addButtonPressed(_0x15D7E.handleScaleDown);
                    _0x15D7E.remove.inputEvents.addButtonPressed(_0x15D7E.handleRemove);
                    _0x15D7E.rotateRight.inputEvents.addButtonPressed(_0x15D7E.handleRotateRight);
                    _0x15D7E.rotateLeft.inputEvents.addButtonPressed(_0x15D7E.handleRotateLeft);
                    _0x15D7E.gameObject.game.input.onDown.add(_0x15D7E.onClickOut);
                    _0x15D7E.gameObject.game.input.onUp.add(_0x15D7E.onClickActive);
                    _0x15D7E.events.addEventListener(Components.DragComponent.RESET_ALL_STICKERS, _0x15D7E.handleRemoveAll)
                };
                _0x15D7E.initMc = function() {
                    _0x15D7E._rotationMap = new Map();
                    _0x15D7E._scaleMap = new Map();
                    _0x15D7E._goodButtons.push(_0x15D7E.scaleDown);
                    _0x15D7E._goodButtons.push(_0x15D7E.scaleUp);
                    _0x15D7E._goodButtons.push(_0x15D7E.rotateLeft);
                    _0x15D7E._goodButtons.push(_0x15D7E.rotateRight);
                    _0x15D7E._goodButtons.push(_0x15D7E.remove)
                };
                _0x15D7E.clicked = false;
                _0x15D7E.handleRemoveAll = function() {
                    _0x15D7E._active = null;
                    _0x15D7E._lastActive = null;
                    _0x15D7E._goodButtons.length = 5
                };
                _0x15D7E.onClickOut = function() {
                    var _0x11201 = false;
                    for (var _0xC6E8 = 0; _0xC6E8 < _0x15D7E._goodButtons.length; _0xC6E8++) {
                        var _0xD3CC = _0x15D7E._goodButtons[_0xC6E8];
                        if (_0xD3CC.getBounds().contains(_0x15D7E.gameObject.game.input.position.x, _0x15D7E.gameObject.game.input.position.y)) {
                            _0x11201 = true;
                            if (_0xD3CC == _0x15D7E._active) {
                                _0x15D7E.clicked = true;
                                _0x15D7E._lastActive = _0x15D7E._active;
                                _0x15D7E.activePoz = _0xC639(_0xB90A[43], _0x15D7E._active.position.x, _0xB90A[44], _0x15D7E._active.position.y);
                                _0x11201 = false
                            };
                            break
                        }
                    };
                    if (!_0x11201) {
                        _0x15D7E._active = null;
                        _0x15D7E.reposition()
                    } else {
                        if (_0x15D7E._active) {}
                    }
                };
                _0x15D7E.onClickActive = function() {
                    if (_0x15D7E.clicked && _0x15D7E._lastActive && _0x15D7E._lastActive.getBounds().contains(_0x15D7E.gameObject.game.input.position.x, _0x15D7E.gameObject.game.input.position.y)) {
                        if (Math.abs(_0x15D7E._lastActive.position.x - _0x15D7E.activePoz.x) + Math.abs(_0x15D7E._lastActive.position.y - _0x15D7E.activePoz.y) < 30) {
                            _0x15D7E._active = _0x15D7E._lastActive;
                            _0x15D7E._lastActive = null;
                            _0x15D7E.reposition()
                        }
                    }
                };
                _0x15D7E.onFocusChanged = function(_0xCF35) {
                    var _0xC652 = _0xCF35.getData(_0xB90A[6]);
                    _0x15D7E._active = _0xC652;
                    _0x15D7E.reposition();
                    _0x15D7E._goodButtons.splice(5, 10);
                    _0x15D7E._goodButtons.push(_0x15D7E._active)
                };
                _0x15D7E.handleScaleUp = function() {
                    if (_0x15D7E._active) {
                        var _0x15D97 = _0x15D7E._scaleMap[_0xB90A[8]](_0x15D7E._active.name);
                        _0x15D97 = _0x15D97 ? _0x15D97 : 0;
                        _0x15D97 = _0x15D97 < 5 ? _0x15D97 + 1 : 5;
                        _0x15D7E._scaleMap[_0xB90A[95]](_0x15D7E._active.name, _0x15D97);
                        _0x15D7E._active.scale.x = 1 + _0x15D97 * _0x15D7E.scaleAmount;
                        _0x15D7E._active.scale.y = 1 + _0x15D97 * _0x15D7E.scaleAmount;
                        _0x15D7E.reposition()
                    }
                };
                _0x15D7E.handleScaleDown = function() {
                    if (_0x15D7E._active) {
                        var _0x15D97 = _0x15D7E._scaleMap[_0xB90A[8]](_0x15D7E._active.name);
                        _0x15D97 = _0x15D97 ? _0x15D97 : 0;
                        _0x15D97 = _0x15D97 > -5 ? _0x15D97 - 1 : -5;
                        _0x15D7E._scaleMap[_0xB90A[95]](_0x15D7E._active.name, _0x15D97);
                        _0x15D7E._active.scale.x = 1 + _0x15D97 * _0x15D7E.scaleAmount;
                        _0x15D7E._active.scale.y = 1 + _0x15D97 * _0x15D7E.scaleAmount;
                        _0x15D7E.reposition()
                    }
                };
                _0x15D7E.handleRemove = function() {
                    if (_0x15D7E._active) {
                        _0x15D7E._active.destroy();
                        _0x15D7E._active = null;
                        _0x15D7E._lastActive = null;
                        _0x15D7E._goodButtons.splice(5, 10);
                        _0x15D7E.reposition()
                    }
                };
                _0x15D7E.handleRotateRight = function() {
                    if (_0x15D7E._active) {
                        var _0x15DB0 = _0x15D7E._rotationMap[_0xB90A[8]](_0x15D7E._active.name);
                        _0x15DB0 = _0x15DB0 ? _0x15DB0 : 0;
                        _0x15DB0 = _0x15DB0 < 5 ? _0x15DB0 + 1 : 5;
                        _0x15D7E._rotationMap[_0xB90A[95]](_0x15D7E._active.name, _0x15DB0);
                        _0x15D7E._active.angle = _0x15DB0 * _0x15D7E.rotationAmount;
                        _0x15D7E.reposition()
                    }
                };
                _0x15D7E.handleRotateLeft = function() {
                    if (_0x15D7E._active) {
                        var _0x15DB0 = _0x15D7E._rotationMap[_0xB90A[8]](_0x15D7E._active.name);
                        _0x15DB0 = _0x15DB0 ? _0x15DB0 : 0;
                        _0x15DB0 = _0x15DB0 > -5 ? _0x15DB0 - 1 : -5;
                        _0x15D7E._rotationMap[_0xB90A[95]](_0x15D7E._active.name, _0x15DB0);
                        _0x15D7E._active.angle = _0x15DB0 * _0x15D7E.rotationAmount;
                        _0x15D7E.reposition()
                    }
                };
                return _0x15D7E
            }
            _0xB987(_0x15D33, [_0xC639(_0xB90A[13], _0xB90A[30], _0xB90A[5], function _0xCB66() {}), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                this.initMc();
                this.initLocalEvents()
            }), _0xC639(_0xB90A[13], _0xB90A[1189], _0xB90A[5], function _0x15D65() {
                if (this._active) {
                    if ((this._active.angle > 70 && this._active.angle < 130 || this._active.angle < -70 && this._active.angle > -130) && this._active.width > this._active.height + 40) {
                        this.buttonContainer.position.y = this._active.width * 0.6 + this._active.position.y;
                        this.buttonContainer.position.y = this.buttonContainer.position.y > 300 ? this._active.position.y - this._active.width * 0.6 : this.buttonContainer.position.y
                    } else {
                        this.buttonContainer.position.y = this._active.height + this._active.position.y;
                        this.buttonContainer.position.y = this.buttonContainer.position.y > 300 ? this._active.position.y - this._active.height : this.buttonContainer.position.y;
                        this.buttonContainer.position.y = this.buttonContainer.position.y < 300 ? this._active.position.y + this._active.height : this.buttonContainer.position.y
                    };
                    this.buttonContainer.position.x = this._active.position.x
                } else {
                    this.buttonContainer.position.x = 1500
                }
            })]);
            return _0x15D33
        }(Scene.Component);
        Components.FunctionalityBar = _0x15D33
    }

    function _0xC53F(Components) {
        var _0x15DC9 = function() {
            function _0x15DC9() {
                _0xB955(this, _0x15DC9)
            }
            _0xB987(_0x15DC9, null, [_0xC639(_0xB90A[13], _0xB90A[1190], _0xB90A[5], function _0x15F0E(_0x160B7) {
                var _0x1609E = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                Managers.SoundManager.playSound(_0x160B7, 0.7, _0x1609E)
            }), _0xC639(_0xB90A[13], _0xB90A[1191], _0xB90A[5], function _0x15F72(_0x160B7) {
                Managers.EventManager.throwEvent(_0xB90A[1192], Util.Util.createEventData([
                    [_0xB90A[1170], _0x160B7]
                ]));
                Managers.SoundManager.stopSound(_0x160B7)
            }), _0xC639(_0xB90A[13], _0xB90A[1193], _0xB90A[5], function _0x15E46() {
                return Scene.Unit.activeUnit
            }), _0xC639(_0xB90A[13], _0xB90A[1194], _0xB90A[5], function _0x15E5F() {
                return Scene.Unit.activeUnit.name
            }), _0xC639(_0xB90A[13], _0xB90A[1195], _0xB90A[5], function _0x15E78() {
                return Scene.Unit.activeUnit.utmName
            }), _0xC639(_0xB90A[13], _0xB90A[1196], _0xB90A[5], function _0x15F27(_0xDCFA) {
                Scene.Unit.activeUnit.name = _0xDCFA
            }), _0xC639(_0xB90A[13], _0xB90A[1197], _0xB90A[5], function _0x15F40(_0x160D0) {
                Scene.Unit.activeUnit.utmName = _0x160D0
            }), _0xC639(_0xB90A[13], _0xB90A[940], _0xB90A[5], function _0x13B37(_0x16008, _0xE92F, _0xE916) {
                var _0x16102 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
                var _0x1611B = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                var _0xCD8C = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
                return Components.TakeSnapshot.takeSnapshot(_0x16008, _0xE92F, _0xE916, _0x16102, _0x1611B, _0xCD8C)
            }), _0xC639(_0xB90A[13], _0xB90A[1198], _0xB90A[5], function _0x15EAA(_0x135D8) {
                return Managers.Localization.getTranslation(_0x135D8)
            }), _0xC639(_0xB90A[13], _0xB90A[1199], _0xB90A[5], function _0x15E91() {
                return Managers.Localization.gameLanguage
            }), _0xC639(_0xB90A[13], _0xB90A[1200], _0xB90A[5], function _0x15DFB(_0x11922) {
                Managers.Localization.instance.setLanguage(_0x11922)
            }), _0xC639(_0xB90A[13], _0xB90A[1201], _0xB90A[5], function _0x15EF5(_0xDCFA) {
                var _0xDA3E = Scene.Unit.getStartCount(_0xDCFA);
                if (_0xDA3E || _0xDA3E == 0) {
                    return _0xDA3E
                };
                return 0
            }), _0xC639(_0xB90A[13], _0xB90A[1202], _0xB90A[5], function _0x15EDC() {
                return Scene.Unit.unitNames
            }), _0xC639(_0xB90A[13], _0xB90A[1203], _0xB90A[5], function _0x15EC3(_0xDCFA) {
                var _0xDA3E = Scene.Unit.getEndCount(_0xDCFA);
                if (_0xDA3E || _0xDA3E == 0) {
                    return _0xDA3E
                };
                return 0
            }), _0xC639(_0xB90A[13], _0xB90A[1204], _0xB90A[5], function _0x15E14(_0xC7FB, _0xCC92) {
                _0xC7FB.disableInput();
                if (_0xCC92 < 10) {
                    _0xCC92 *= 1000
                };
                Core.game.time.events.add(_0xCC92, function() {
                    _0xC7FB.enableInput()
                }, this)
            }), _0xC639(_0xB90A[13], _0xB90A[1205], _0xB90A[5], function _0x15F8B(_0xC7FB) {
                var _0x1140E = new Phaser.Graphics(Core.game);
                var _0x1099B = Util.Bitmap.create(_0xC7FB.width, _0xC7FB.height);
                _0x1099B.draw(_0xC7FB.texture.baseTexture.source, 0, 0);
                var _0xCD8C = _0x1099B.context.getImageData(0, 0, _0x1099B.width, _0x1099B.height);
                for (var _0xC6E8 = 3; _0xC6E8 < _0xCD8C.data.length; _0xC6E8 += 4) {
                    var _0x130F6 = _0xCD8C.data[_0xC6E8];
                    if (_0x130F6 > 0) {
                        _0x1140E.beginFill(0xff0000, _0x130F6);
                        _0x1140E.fillAlpha = _0x130F6;
                        var _0xD6A1 = Math.floor(Math.floor(_0xC6E8 / 4) % _0xCD8C.width);
                        var _0xD6BA = Math.floor(Math.floor(_0xC6E8 / 4) / _0xCD8C.width);
                        _0x1140E.drawRect(_0xD6A1, _0xD6BA, 1, 1);
                        _0x1140E.endFill()
                    }
                };
                _0xC7FB.loadTexture(_0x1140E.generateTexture());
                return _0x1140E
            }), _0xC639(_0xB90A[13], _0xB90A[1206], _0xB90A[5], function _0x15E2D(_0x16008) {
                var _0x15FD6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var _0x15FBD = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var _0x10BF3 = {
                    top: Number.MAX_SAFE_INTEGER,
                    left: Number.MAX_SAFE_INTEGER,
                    bot: Number.MIN_SAFE_INTEGER,
                    right: Number.MIN_SAFE_INTEGER
                };
                if (!_0x16008) return;
                var _0x12F34 = _0x16008.updateTransform;
                this.setTransformForParentsRec(_0x16008.parent, _0x15DC9.updateTransform);
                _0x15DC9.boundsRec(_0x16008, _0x10BF3, _0x15FD6, _0x15FBD);
                this.setTransformForParentsRec(_0x16008.parent, _0x12F34);
                var _0xCA3A = new Phaser.Rectangle(_0x10BF3.left, _0x10BF3.top, _0x10BF3.right - _0x10BF3.left, _0x10BF3.bot - _0x10BF3.top);
                return _0xCA3A
            }), _0xC639(_0xB90A[13], _0xB90A[1207], _0xB90A[5], function _0x15F59(_0xC652, _0x160E9) {
                _0xC652.updateTransform = _0x160E9;
                _0xC652.updateTransform.bind(_0xC652);
                if (_0xC652.parent != null && _0xC652.updateTransform) {
                    this.setTransformForParentsRec(_0xC652.parent, _0x160E9)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1208], _0xB90A[5], function _0x15DE2(_0x16008, _0x15FEF) {
                var _0x15FD6 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var _0x15FBD = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                var _0x16021 = _0x16008;
                if (!_0x16008.visible && !_0x15FD6) {
                    return
                };
                if (_0x16008.alpha == 0 && !_0x15FBD) {
                    return
                };
                if (_0x16008.getComponent && _0x16008.getComponent(Components.GlitzSwirl)) {
                    return
                };
                var _0xD223 = _0x16021.updateTransform;
                _0x16021.updateTransform = _0x15DC9.updateTransform;
                _0x16021.updateTransform.bind(_0x16021);
                _0x16021.updateTransform();
                if (_0x16021.texture && !(_0x16021.texture.baseTexture.width == 32 && _0x16021.texture.baseTexture.height == 32)) {
                    var _0xD5F2 = _0x16021.texture.baseTexture.source.width * _0x16021.worldScale.x;
                    var _0xD5C0 = _0x16021.texture.baseTexture.source.height * _0x16021.worldScale.y;
                    var _0x16053 = _0x16021.worldPosition.x - _0x16021.anchor.x * _0xD5F2;
                    var _0x16085 = _0x16021.worldPosition.y - _0x16021.anchor.y * _0xD5C0;
                    var _0x1606C = _0x16053 + _0xD5F2;
                    var _0x1603A = _0x16085 + _0xD5C0;
                    if (_0x15FEF.left > _0x16053) {
                        _0x15FEF.left = _0x16053
                    };
                    if (_0x15FEF.top > _0x16085) {
                        _0x15FEF.top = _0x16085
                    };
                    if (_0x15FEF.right < _0x1606C) {
                        _0x15FEF.right = _0x1606C
                    };
                    if (_0x15FEF.bot < _0x1603A) {
                        _0x15FEF.bot = _0x1603A
                    }
                };
                for (var _0x15FA4 = 0; _0x15FA4 < _0x16008.children.length; _0x15FA4++) {
                    var _0xF163 = _0x16008.children[_0x15FA4];
                    this.boundsRec(_0xF163, _0x15FEF, _0x15FD6, _0x15FBD)
                };
                _0x16021.updateTransform = _0xD223;
                _0x16021.updateTransform.bind(_0x16021)
            }), _0xC639(_0xB90A[13], _0xB90A[17], _0xB90A[5], function _0xC98B() {
                var _0x16134 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                if (!_0x16134 && !this.parent && !this.game) {
                    return
                };
                var _0xC85F = this.parent;
                if (_0x16134) {
                    _0xC85F = _0x16134
                } else {
                    if (!this.parent) {
                        _0xC85F = this.game.world
                    }
                };
                var _0x1614D = _0xC85F.worldTransform;
                var _0x16166 = this.worldTransform;
                var _0xD016, _0xCE3B, _0x104EB, _0x12A20, _0x1318C, _0x131A5;
                if (this.rotation % PIXI.PI_2) {
                    if (this.rotation !== this.rotationCache) {
                        this.rotationCache = this.rotation;
                        this._sr = Math.sin(this.rotation);
                        this._cr = Math.cos(this.rotation)
                    };
                    _0xD016 = this._cr * this.scale.x;
                    _0xCE3B = this._sr * this.scale.x;
                    _0x104EB = -this._sr * this.scale.y;
                    _0x12A20 = this._cr * this.scale.y;
                    _0x1318C = this.position.x;
                    _0x131A5 = this.position.y;
                    if (this.pivot.x || this.pivot.y) {
                        _0x1318C -= this.pivot.x * _0xD016 + this.pivot.y * _0x104EB;
                        _0x131A5 -= this.pivot.x * _0xCE3B + this.pivot.y * _0x12A20
                    };
                    _0x16166.a = _0xD016 * _0x1614D.a + _0xCE3B * _0x1614D.c;
                    _0x16166.b = _0xD016 * _0x1614D.b + _0xCE3B * _0x1614D.d;
                    _0x16166.c = _0x104EB * _0x1614D.a + _0x12A20 * _0x1614D.c;
                    _0x16166.d = _0x104EB * _0x1614D.b + _0x12A20 * _0x1614D.d;
                    _0x16166.tx = _0x1318C * _0x1614D.a + _0x131A5 * _0x1614D.c + _0x1614D.tx;
                    _0x16166.ty = _0x1318C * _0x1614D.b + _0x131A5 * _0x1614D.d + _0x1614D.ty
                } else {
                    _0xD016 = this.scale.x;
                    _0x12A20 = this.scale.y;
                    _0x1318C = this.position.x - this.pivot.x * _0xD016;
                    _0x131A5 = this.position.y - this.pivot.y * _0x12A20;
                    _0x16166.a = _0xD016 * _0x1614D.a;
                    _0x16166.b = _0xD016 * _0x1614D.b;
                    _0x16166.c = _0x12A20 * _0x1614D.c;
                    _0x16166.d = _0x12A20 * _0x1614D.d;
                    _0x16166.tx = _0x1318C * _0x1614D.a + _0x131A5 * _0x1614D.c + _0x1614D.tx;
                    _0x16166.ty = _0x1318C * _0x1614D.b + _0x131A5 * _0x1614D.d + _0x1614D.ty
                };
                this.worldAlpha = this.alpha * _0xC85F.worldAlpha;
                this.worldPosition[_0xB90A[95]](_0x16166.tx, _0x16166.ty);
                this.worldScale[_0xB90A[95]](Math.sqrt(_0x16166.a * _0x16166.a + _0x16166.b * _0x16166.b), Math.sqrt(_0x16166.c * _0x16166.c + _0x16166.d * _0x16166.d));
                this.worldRotation = Math.atan2(-_0x16166.c, _0x16166.d);
                this._currentBounds = null;
                if (this.transformCallback) {
                    this.transformCallback.call(this.transformCallbackContext, _0x16166, _0x1614D)
                }
            })]);
            return _0x15DC9
        }();
        Components.DevUtils = _0x15DC9
    }

    function _0xC558(Components) {
        var _0x1617F = function() {
            function _0x1617F() {
                _0xB955(this, _0x1617F)
            }
            _0xB987(_0x1617F, null, [_0xC639(_0xB90A[13], _0xB90A[1209], _0xB90A[5], function _0x161B1() {
                var _0x1622E = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                var _0x16247 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                _0x1617F.drawFullAlpha = _0x1622E;
                _0x1617F.drawInvisible = _0x16247
            }), _0xC639(_0xB90A[13], _0xB90A[940], _0xB90A[5], function _0x13B37(_0x16008, _0xE92F, _0xE916, _0x16102, _0x1611B) {
                var _0xCD8C = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
                var _0xCA3A = _0xCD8C == null ? Util.Bitmap.create(_0xE92F, _0xE916) : _0xCD8C;
                _0xCD8C.resize(_0xE92F, _0xE916);
                _0x16008.game.stage.updateTransform();
                Components.DevUtils.getBounds(_0x16008);
                this.drawRec(_0x16008, _0xCA3A, _0x16102, _0x1611B);
                return _0xCA3A
            }), _0xC639(_0xB90A[13], _0xB90A[1210], _0xB90A[5], function _0x16198(_0x16008, _0x13655, _0xDB6A, _0xDB83) {
                if (!_0x16008.visible && !_0x1617F.drawInvisible) {
                    return
                };
                if (_0x16008.alpha == 0 && !_0x1617F.drawFullAlpha) {
                    return
                };
                var _0x16215 = _0x16008.alpha;
                var _0xF1C7 = _0x16008.updateTransform;
                _0x16008.updateTransform = Components.DevUtils.updateTransform;
                _0x16008.updateTransform.bind(_0x16008);
                _0x16008.updateTransform();
                var _0xC71A = _0x16008.texture.baseTexture.source;
                var _0xD6A1 = _0x16008.worldPosition.x - _0xDB6A;
                var _0xD6BA = _0x16008.worldPosition.y - _0xDB83;
                var _0x118A5 = _0x16008.worldScale.x;
                var _0x118BE = _0x16008.worldScale.y;
                var _0x161E3 = _0x16008.anchor.x;
                var _0x161FC = _0x16008.anchor.y;
                var _0xD016 = _0x1617F.drawFullAlpha ? 1 : _0x16008.worldAlpha;
                var _0xFD02 = _0x16008.worldRotation;
                _0x13655.copy(_0xC71A, 0, 0, _0xC71A.width, _0xC71A.height, _0xD6A1, _0xD6BA, null, null, _0xFD02, _0x161E3, _0x161FC, _0x118A5, _0x118BE, _0xD016, null, false);
                for (var _0x161CA = 0; _0x161CA < _0x16008.children.length; _0x161CA++) {
                    var _0xF163 = _0x16008.children[_0x161CA];
                    this.drawRec(_0xF163, _0x13655, _0xDB6A, _0xDB83)
                };
                _0x16008.updateTransform = _0xF1C7;
                _0x16008.updateTransform.bind(_0x16008);
                _0x16008.alpha = _0x16215
            })]);
            return _0x1617F
        }();
        Components.TakeSnapshot = _0x1617F
    }

    function _0xC571(Components) {
        var _0x16260 = function() {
            function _0x16260() {
                _0xB955(this, _0x16260)
            }
            _0xB987(_0x16260, null, [_0xC639(_0xB90A[13], _0xB90A[1211], _0xB90A[5], function _0x16279(_0xC7FB) {
                var _0x162AB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var _0x10B12 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                if (!_0x16260.isInit) {
                    _0x16260.init()
                };
                var _0xD0F7 = _0x16260.activeTweens[_0xB90A[8]](_0xC7FB);
                var _0x16292 = Core.game.add.tween(_0xC7FB);
                if (_0xD0F7) {
                    if (_0x162AB) {
                        _0xD0F7.forEach(function(_0xCA21) {
                            _0xCA21.stop(_0x10B12)
                        });
                        _0xD0F7.length = 0
                    };
                    _0xD0F7.push(_0x16292)
                } else {
                    _0x16260.activeTweens[_0xB90A[95]](_0xC7FB, [_0x16292])
                };
                return _0x16292
            }), _0xC639(_0xB90A[13], _0xB90A[14], _0xB90A[5], function _0xC927() {
                _0x16260.events = new EventManager();
                _0x16260.events.addEventListener(Managers.SceneManager.TRANSITION_CLOSE_ANIM_DONE, _0x16260.clear);
                _0x16260.isInit = true
            })]);
            return _0x16260
        }();
        _0x16260.activeTweens = new Map();
        _0x16260.isInit = false;
        _0x16260.clear = function() {
            Util.Util.destroyMap(_0x16260.activeTweens)
        };
        Components.Tweens = _0x16260
    }

    function _0xC58A(PhaserInput) {
        var _0x162DD;
        (function(_0x162DD) {
            _0x162DD[_0x162DD[_0xB90A[542]] = 0] = _0xB90A[542];
            _0x162DD[_0x162DD[_0xB90A[1212]] = 1] = _0xB90A[1212];
            _0x162DD[_0x162DD[_0xB90A[1213]] = 2] = _0xB90A[1213]
        })(_0x162DD = PhaserInput.InputType || (PhaserInput.InputType = {}));
        var _0x162C4 = function() {
            function _0x162C4(_0x164D1, _0x164EA) {
                var _0x1646D = this;
                var _0xEDAD = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _0x162DD.text;
                var _0xD255 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _0xB90A[27];
                var _0x1649F = arguments.length > 4 ? arguments[4] : undefined;
                var _0x164B8 = arguments.length > 5 ? arguments[5] : undefined;
                _0xB955(this, _0x162C4);
                this.id = _0x164EA;
                this.type = _0xEDAD;
                this.game = _0x164D1;
                this.focusIn = _0x1649F;
                this.focusOut = _0x164B8;
                var _0x16486 = this.game.canvas.getBoundingClientRect().top + document.body.scrollTop;
                this.element = document.createElement(_0xB90A[1214]);
                this.element.id = _0x164EA;
                this.element.style.position = _0xB90A[1215];
                this.element.style.top = _0x16486 + _0xB90A[1216];
                this.element.style.left = _0xB90A[1217];
                this.element.style.width = _0xB90A[1218];
                this.element.style.height = _0xB90A[1218];
                this.element.style.border = _0xB90A[1219];
                this.element.value = this.value;
                this.element.type = _0x162DD[_0xEDAD];
                this.element.addEventListener(_0xB90A[1220], function() {
                    if (_0xB93C(_0x1646D.focusIn, Phaser.Signal)) {
                        _0x1646D.focusIn.dispatch()
                    }
                });
                this.element.addEventListener(_0xB90A[1221], function() {
                    if (_0xB93C(_0x1646D.focusOut, Phaser.Signal)) {
                        _0x1646D.focusOut.dispatch()
                    }
                });
                document.body.appendChild(this.element)
            }
            _0xB987(_0x162C4, [_0xC639(_0xB90A[13], _0xB90A[1222], _0xB90A[5], function _0x162F6(_0xED94) {
                this.keyUpCallback = _0xED94;
                document.addEventListener(_0xB90A[1223], this.keyUpCallback);
                this.element.addEventListener(_0xB90A[1214], this.keyUpCallback)
            }), _0xC639(_0xB90A[13], _0xB90A[1224], _0xB90A[5], function _0x1630F() {
                document.addEventListener(_0xB90A[1225], this.preventKeyPropagation)
            }), _0xC639(_0xB90A[13], _0xB90A[1226], _0xB90A[5], function _0x16373(_0x16503) {
                if (_0x16503.stopPropagation) {
                    _0x16503.stopPropagation()
                } else {
                    event.cancelBubble = true
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1227], _0xB90A[5], function _0x163D7() {
                document.removeEventListener(_0xB90A[1225], this.preventKeyPropagation)
            }), _0xC639(_0xB90A[13], _0xB90A[1228], _0xB90A[5], function _0x1638C() {
                document.removeEventListener(_0xB90A[1223], this.keyUpCallback);
                this.element.removeEventListener(_0xB90A[1214], this.keyUpCallback)
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5() {
                document.body.removeChild(this.element)
            }), _0xC639(_0xB90A[13], _0xB90A[1229], _0xB90A[5], function _0x163BE(_0xD1BF, _0xD2EB) {
                if (_0xD1BF === undefined) {
                    return
                };
                if (this.type === _0x162DD.text || this.type === _0x162DD.password) {
                    this.element.maxLength = parseInt(_0xD1BF, 10)
                } else {
                    if (this.type === _0x162DD.number) {
                        this.element.max = _0xD1BF;
                        if (_0xD2EB === undefined) {
                            return
                        };
                        this.element.min = _0xD2EB
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1230], _0xB90A[5], function _0x16341() {
                var _0x163F0 = this;
                this.element.focus();
                if (!this.game.device.desktop && this.game.device.chrome) {
                    var _0x16454 = window.innerWidth,
                        _0x1643B = window.innerHeight;
                    var _0x16422 = false;
                    var _0x16409 = setInterval(function() {
                        if (_0x16454 > window.innerWidth || _0x1643B > window.innerHeight) {
                            _0x16422 = true
                        };
                        if (_0x16422 && _0x16454 === window.innerWidth && _0x1643B === window.innerHeight) {
                            if (_0xB93C(_0x163F0.focusOut, Phaser.Signal)) {
                                _0x163F0.focusOut.dispatch()
                            };
                            clearInterval(_0x16409)
                        }
                    }, 50)
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1231], _0xB90A[5], function _0x16328() {
                this.element.blur()
            }), _0xC639(_0xB90A[13], _0xB90A[1232], _0xB90A[5], function _0x1635A() {
                if (this.type === _0x162DD.number) {
                    return -1
                };
                return this.element.selectionStart
            }), _0xC639(_0xB90A[13], _0xB90A[1233], _0xB90A[5], function _0x163A5(_0x10B8F) {
                if (this.type === _0x162DD.number) {
                    return
                };
                this.element.setSelectionRange(_0x10B8F, _0x10B8F)
            }), _0xC639(_0xB90A[13], _0xB90A[5], _0xB90A[8], function _0xE8CB() {
                return this.element.value
            }, _0xB90A[95], function _0x11D87(_0xD255) {
                this.element.value = _0xD255
            }), _0xC639(_0xB90A[13], _0xB90A[1234], _0xB90A[8], function _0xE8CB() {
                if (this.type === _0x162DD.number) {
                    return false
                };
                return this.element.selectionStart !== this.element.selectionEnd
            }), _0xC639(_0xB90A[13], _0xB90A[1235], _0xB90A[8], function _0xE8CB() {
                return this.element.selectionEnd
            }), _0xC639(_0xB90A[13], _0xB90A[1236], _0xB90A[8], function _0xE8CB() {
                return this.element.selectionStart
            })]);
            return _0x162C4
        }();
        PhaserInput.InputElement = _0x162C4
    }

    function _0xC5A3(PhaserInput) {
        var _0x1651C;
        (function(_0x1651C) {
            _0x1651C[_0x1651C[_0xB90A[718]] = 0] = _0xB90A[718];
            _0x1651C[_0x1651C[_0xB90A[1237]] = 1] = _0xB90A[1237];
            _0x1651C[_0x1651C[_0xB90A[1238]] = 2] = _0xB90A[1238]
        })(_0x1651C = PhaserInput.ForceCase || (PhaserInput.ForceCase = {}));
        var _0x16535 = function(_0x1654E) {
            _0xBA1D(_0x16535, _0x1654E);

            function _0x16535(_0x164D1, _0xD6A1, _0xD6BA) {
                var _0x16742;
                var _0x16774 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                var _0x1675B = arguments.length > 4 ? arguments[4] : undefined;
                _0xB955(this, _0x16535);
                _0x16742 = _0xB9A0(this, _getPrototypeOf(_0x16535).call(this, _0x164D1, _0xD6A1, _0xD6BA));
                _0x16742.focusOutOnEnter = true;
                _0x16742.placeHolder = null;
                _0x16742.box = null;
                _0x16742.focus = false;
                _0x16742.value = _0xB90A[27];
                _0x16742.windowScale = 1;
                _0x16742.blockInput = true;
                _0x16742.focusIn = new Phaser.Signal();
                _0x16742.focusOut = new Phaser.Signal();
                _0x16742.withText = false;
                _0x16742.blink = true;
                _0x16742.cnt = 0;
                if (_0x1675B) {
                    _0x16742.withText = _0x1675B
                };
                _0x16742.inputOptions = _0x16774;
                _0x16742.inputOptions.width = typeof _0x16774.width === _0xB90A[1213] ? _0x16774.width : 150;
                _0x16742.inputOptions.padding = typeof _0x16774.padding === _0xB90A[1213] ? _0x16774.padding : 0;
                _0x16742.inputOptions.textAlign = _0x16774.textAlign || _0xB90A[919];
                _0x16742.inputOptions.type = _0x16774.type || PhaserInput.InputType.text;
                _0x16742.inputOptions.forceCase = _0x16774.forceCase ? _0x16774.forceCase : _0x1651C.none;
                _0x16742.inputOptions.borderRadius = typeof _0x16774.borderRadius === _0xB90A[1213] ? _0x16774.borderRadius : 0;
                _0x16742.inputOptions.height = typeof _0x16774.height === _0xB90A[1213] ? _0x16774.height : 14;
                _0x16742.inputOptions.fillAlpha = _0x16774.fillAlpha === undefined ? 1 : _0x16774.fillAlpha;
                _0x16742.inputOptions.selectionColor = _0x16774.selectionColor || _0xB90A[1239];
                _0x16742.inputOptions.zoom = !_0x164D1.device.desktop ? _0x16774.zoom || false : false;
                _0x16742.box = new PhaserInput.InputBox(_0x16742.game, _0x16774);
                _0x16742.setTexture(_0x16742.box.generateTexture());
                if (_0x1675B) {
                    _0x16742.textMask = new PhaserInput.TextMask(_0x16742.game, _0x16774);
                    _0x16742.addChild(_0x16742.textMask);
                    _0x16742.domElement = new PhaserInput.InputElement(_0x16742.game, _0xB90A[1240] + (Math.random() * 10000 | 0).toString(), _0x16742.inputOptions.type, _0x16742.value, _0x16742.focusIn, _0x16742.focusOut);
                    _0x16742.domElement.setMax(_0x16742.inputOptions.max, _0x16742.inputOptions.min);
                    _0x16742.selection = new PhaserInput.SelectionHighlight(_0x16742.game, _0x16742.inputOptions);
                    _0x16742.selection.mask = _0x16742.textMask;
                    _0x16742.addChild(_0x16742.selection);
                    if (_0x16774.placeHolder && _0x16774.placeHolder.length > 0) {
                        _0x16742.placeHolder = new Phaser.Text(_0x164D1, _0x16742.inputOptions.padding, _0x16742.inputOptions.padding, _0x16774.placeHolder, _0xC639(_0xB90A[613], _0x16774.font || _0xB90A[1241], _0xB90A[640], _0x16774.fontWeight || _0xB90A[891], _0xB90A[617], _0x16774.placeHolderColor || _0xB90A[1242], _0xB90A[615], _0xB90A[919], _0xB90A[618], _0xB90A[616], _0xB90A[619], _0xB90A[616]));
                        _0x16742.placeHolder.mask = _0x16742.textMask;
                        _0x16742.addChild(_0x16742.placeHolder)
                    };
                    _0x16742.cursor = new Phaser.Text(_0x164D1, _0x16742.inputOptions.padding, _0x16742.inputOptions.padding - 2, _0xB90A[729], _0xC639(_0xB90A[613], _0x16774.font || _0xB90A[1241], _0xB90A[640], _0x16774.fontWeight || _0xB90A[891], _0xB90A[617], _0x16774.cursorColor || _0xB90A[679], _0xB90A[615], _0xB90A[919], _0xB90A[618], _0xB90A[616], _0xB90A[619], _0xB90A[616]));
                    _0x16742.cursor.visible = false;
                    _0x16742.addChild(_0x16742.cursor);
                    _0x16742.text = new Phaser.Text(_0x164D1, _0x16742.inputOptions.padding, _0x16742.inputOptions.padding, _0xB90A[27], _0xC639(_0xB90A[613], _0x16774.font || _0xB90A[1241], _0xB90A[640], _0x16774.fontWeight || _0xB90A[891], _0xB90A[617], _0x16774.fill || _0xB90A[679], _0xB90A[615], _0xB90A[919], _0xB90A[618], _0xB90A[616], _0xB90A[619], _0xB90A[616]));
                    _0x16742.text.mask = _0x16742.textMask;
                    _0x16742.addChild(_0x16742.text);
                    _0x16742.offscreenText = new Phaser.Text(_0x164D1, _0x16742.inputOptions.padding, _0x16742.inputOptions.padding, _0xB90A[27], _0xC639(_0xB90A[613], _0x16774.font || _0xB90A[1241], _0xB90A[640], _0x16774.fontWeight || _0xB90A[891], _0xB90A[617], _0x16774.fill || _0xB90A[679], _0xB90A[615], _0xB90A[919], _0xB90A[618], _0xB90A[616], _0xB90A[619], _0xB90A[616]));
                    _0x16742.updateTextAlignment();
                    _0x16742.inputEnabled = true;
                    _0x16742.input.useHandCursor = true;
                    _0x16742.game.input.onDown.add(_0x16742.checkDown, _0xB9B9(_0x16742));
                    _0x16742.focusOut.add(function() {
                        if (PhaserInput.KeyboardOpen) {
                            _0x16742.endFocus();
                            if (_0x16742.inputOptions.zoom) {
                                _0x16742.zoomOut()
                            }
                        }
                    })
                };
                return _0x16742
            }
            _0xB987(_0x16535, [_0xC639(_0xB90A[13], _0xB90A[1243], _0xB90A[5], function _0x16693() {
                switch (this.inputOptions.textAlign) {
                    case _0xB90A[919]:
                        this.text.anchor[_0xB90A[95]](0, 0);
                        this.text.x = this.inputOptions.padding;
                        if (null !== this.placeHolder) {
                            this.placeHolder.anchor[_0xB90A[95]](0, 0)
                        };
                        this.cursor.x = this.inputOptions.padding + this.getCaretPosition();
                        break;
                    case _0xB90A[616]:
                        this.text.anchor[_0xB90A[95]](0.5, 0);
                        this.text.x = this.inputOptions.padding + this.inputOptions.width / 2;
                        if (null !== this.placeHolder) {
                            this.placeHolder.anchor[_0xB90A[95]](0.5, 0);
                            this.placeHolder.x = this.inputOptions.padding + this.inputOptions.width / 2
                        };
                        this.cursor.x = this.inputOptions.padding + this.inputOptions.width / 2 - this.text.width / 2 + this.getCaretPosition();
                        break;
                    case _0xB90A[652]:
                        this.text.anchor[_0xB90A[95]](1, 0);
                        this.text.x = this.inputOptions.padding + this.inputOptions.width;
                        if (null !== this.placeHolder) {
                            this.placeHolder.anchor[_0xB90A[95]](1, 0);
                            this.placeHolder.x = this.inputOptions.padding + this.inputOptions.width
                        };
                        this.cursor.x = this.inputOptions.padding + this.inputOptions.width;
                        break
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1244], _0xB90A[5], function _0x16567(_0xCF35) {
                if (!this.value) {
                    this.resetText()
                };
                if (this.input.checkPointerOver(_0xCF35)) {
                    if (this.focus) {
                        this.setCaretOnclick(_0xCF35);
                        return
                    };
                    if (this.inputOptions.zoom && !PhaserInput.Zoomed) {
                        this.zoomIn()
                    };
                    this.startFocus()
                } else {
                    if (this.focus === true) {
                        this.endFocus();
                        if (this.inputOptions.zoom) {
                            this.zoomOut()
                        }
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[917], _0xB90A[5], function _0xFB0E() {
                this.text.update();
                if (this.placeHolder) {
                    this.placeHolder.update()
                };
                if (!this.focus) {
                    return
                };
                if (this.cnt != 30) {
                    return this.cnt++
                };
                this.cursor.visible = this.blink;
                this.blink = !this.blink;
                this.cnt = 0
            }), _0xC639(_0xB90A[13], _0xB90A[1245], _0xB90A[5], function _0x16580() {
                var _0x166F7 = this;
                if (!this.focus) {
                    return
                };
                this.domElement.removeEventListener();
                if (this.blockInput === true) {
                    this.domElement.unblockKeyDownEvents()
                };
                this.focus = false;
                if (this.value.length === 0 && null !== this.placeHolder) {
                    this.placeHolder.visible = true
                };
                this.cursor.visible = false;
                if (this.game.device.desktop) {
                    setTimeout(function() {
                        _0x166F7.domElement.blur()
                    }, 0)
                } else {
                    this.domElement.blur()
                };
                if (!this.game.device.desktop) {
                    PhaserInput.KeyboardOpen = false;
                    PhaserInput.onKeyboardClose.dispatch()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1246], _0xB90A[5], function _0x1662F() {
                var _0x167D8 = this;
                this.focus = true;
                if (null !== this.placeHolder) {
                    this.placeHolder.visible = false
                };
                if (this.game.device.desktop) {
                    setTimeout(function() {
                        _0x167D8.keyUpProcessor()
                    }, 0)
                } else {
                    this.keyUpProcessor()
                };
                if (!this.game.device.desktop) {
                    PhaserInput.KeyboardOpen = true;
                    PhaserInput.onKeyboardOpen.dispatch()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1247], _0xB90A[5], function _0x165CB() {
                this.domElement.addKeyUpListener(this.keyListener.bind(this));
                this.domElement.focus();
                if (this.blockInput === true) {
                    this.domElement.blockKeyDownEvents()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1248], _0xB90A[5], function _0x1667A() {
                var _0x10248 = _0xB90A[27];
                if (this.inputOptions.type === PhaserInput.InputType.password) {
                    for (var _0x1680A = 0; _0x1680A < this.value.length; _0x1680A++) {
                        _0x10248 += _0xB90A[1249]
                    }
                } else {
                    if (this.inputOptions.type === PhaserInput.InputType.number) {
                        var _0xE8FD = parseInt(this.value);
                        if (_0xE8FD < parseInt(this.inputOptions.min)) {
                            _0x10248 = this.value = this.domElement.value = this.inputOptions.min
                        } else {
                            if (_0xE8FD > parseInt(this.inputOptions.max)) {
                                _0x10248 = this.value = this.domElement.value = this.inputOptions.max
                            } else {
                                _0x10248 = this.value
                            }
                        }
                    } else {
                        _0x10248 = this.value
                    }
                };
                this.text.setText(_0x10248);
                if (this.text.width > this.inputOptions.width) {
                    this.text.anchor.x = 1;
                    this.text.x = this.inputOptions.padding + this.inputOptions.width
                } else {
                    switch (this.inputOptions.textAlign) {
                        case _0xB90A[919]:
                            this.text.anchor[_0xB90A[95]](0, 0);
                            this.text.x = this.inputOptions.padding;
                            break;
                        case _0xB90A[616]:
                            this.text.anchor[_0xB90A[95]](0.5, 0);
                            this.text.x = this.inputOptions.padding + this.inputOptions.width / 2;
                            break;
                        case _0xB90A[652]:
                            this.text.anchor[_0xB90A[95]](1, 0);
                            this.text.x = this.inputOptions.padding + this.inputOptions.width;
                            break
                    }
                };
                EventManager.throwEvent(_0xB90A[645])
            }), _0xC639(_0xB90A[13], _0xB90A[1250], _0xB90A[5], function _0x16648() {
                if (this.text.width > this.inputOptions.width || this.inputOptions.textAlign === _0xB90A[652]) {
                    this.cursor.x = this.inputOptions.padding + this.inputOptions.width
                } else {
                    switch (this.inputOptions.textAlign) {
                        case _0xB90A[919]:
                            this.cursor.x = this.inputOptions.padding + this.getCaretPosition();
                            break;
                        case _0xB90A[616]:
                            this.cursor.x = this.inputOptions.padding + this.inputOptions.width / 2 - this.text.width / 2 + this.getCaretPosition() - 1;
                            break
                    }
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1232], _0xB90A[5], function _0x1635A() {
                var _0x16729 = this.domElement.getCaretPosition();
                if (-1 === _0x16729) {
                    return this.text.width
                };
                var _0x10248 = this.value;
                if (this.inputOptions.type === PhaserInput.InputType.password) {
                    _0x10248 = _0xB90A[27];
                    for (var _0x16710 = 0; _0x16710 < this.value.length; _0x16710++) {
                        _0x10248 += _0xB90A[1249]
                    }
                };
                this.offscreenText.setText(_0x10248.slice(0, _0x16729));
                return this.offscreenText.width
            }), _0xC639(_0xB90A[13], _0xB90A[1251], _0xB90A[5], function _0x165FD(_0xCF35) {
                var _0x167BF = this.text.toLocal(new PIXI.Point(_0xCF35.x, _0xCF35.y), this.game.world).x;
                if (this.inputOptions.textAlign && this.inputOptions.textAlign === _0xB90A[616]) {
                    _0x167BF += this.text.width / 2
                };
                var _0x167A6 = this.text.width / this.value.length;
                var _0xE227 = 0;
                for (var _0x1678D = 0; _0x1678D < this.value.length; _0x1678D++) {
                    if (_0x167BF >= _0x1678D * _0x167A6 && _0x167BF <= (_0x1678D + 1) * _0x167A6) {
                        _0xE227 = _0x1678D;
                        break
                    }
                };
                if (_0x167BF > (this.value.length - 1) * _0x167A6) {
                    _0xE227 = this.value.length
                };
                this.startFocus();
                this.domElement.setCaretPosition(_0xE227);
                this.updateCursor()
            }), _0xC639(_0xB90A[13], _0xB90A[1252], _0xB90A[5], function _0x16661() {
                if (this.domElement.hasSelection) {
                    var _0x10248 = this.value;
                    if (this.inputOptions.type === PhaserInput.InputType.password) {
                        _0x10248 = _0xB90A[27];
                        for (var _0x167F1 = 0; _0x167F1 < this.value.length; _0x167F1++) {
                            _0x10248 += _0xB90A[1249]
                        }
                    };
                    _0x10248 = _0x10248.substring(this.domElement.caretStart, this.domElement.caretEnd);
                    this.offscreenText.setText(_0x10248);
                    this.selection.updateSelection(this.offscreenText.getBounds());
                    switch (this.inputOptions.textAlign) {
                        case _0xB90A[919]:
                            this.selection.x = this.inputOptions.padding;
                            break;
                        case _0xB90A[616]:
                            this.selection.x = this.inputOptions.padding + this.inputOptions.width / 2 - this.text.width / 2;
                            break
                    }
                } else {
                    this.selection.clear()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[1253], _0xB90A[5], function _0x166AC() {
                if (PhaserInput.Zoomed) {
                    return
                };
                var _0xDFB6 = this.getBounds();
                if (window.innerHeight > window.innerWidth) {
                    this.windowScale = this.game.width / (_0xDFB6.width * 1.5)
                } else {
                    this.windowScale = this.game.width / 2 / (_0xDFB6.width * 1.5)
                };
                var _0xDB6A = (this.game.width - _0xDFB6.width * 1.5) / 2 / this.windowScale;
                this.game.world.scale[_0xB90A[95]](this.game.world.scale.x * this.windowScale, this.game.world.scale.y * this.windowScale);
                this.game.world.pivot[_0xB90A[95]](_0xDFB6.x - _0xDB6A, _0xDFB6.y - this.inputOptions.padding * 2);
                PhaserInput.Zoomed = true
            }), _0xC639(_0xB90A[13], _0xB90A[1254], _0xB90A[5], function _0x166C5() {
                if (!PhaserInput.Zoomed) {
                    return
                };
                this.game.world.scale[_0xB90A[95]](this.game.world.scale.x / this.windowScale, this.game.world.scale.y / this.windowScale);
                this.game.world.pivot[_0xB90A[95]](0, 0);
                PhaserInput.Zoomed = false
            }), _0xC639(_0xB90A[13], _0xB90A[1255], _0xB90A[5], function _0x165B2(_0x16503) {
                if (_0x16503.key == undefined) {
                    return
                };
                if (_0x16503.key == _0xB90A[1256] || _0x16503.key == _0xB90A[1257] || _0x16503.key == _0xB90A[729] || _0x16503.key == _0xB90A[572] || _0x16503.key == _0xB90A[1258] || _0x16503.key == _0xB90A[1259]) {
                    this.domElement.value = this.value;
                    return
                };
                this.value = this.getFormattedText(this.domElement.value);
                if (_0x16503.keyCode === 13) {
                    if (this.focusOutOnEnter) {
                        this.endFocus()
                    };
                    return
                };
                this.updateText();
                this.updateCursor();
                this.updateSelection();
                _0x16503.preventDefault()
            }), _0xC639(_0xB90A[13], _0xB90A[24], _0xB90A[5], function _0xC8F5(_0x166DE) {
                if (this.withText) {
                    this.resetText();
                    this.game.input.onDown.remove(this.checkDown, this);
                    this.focusIn.removeAll();
                    this.focusOut.removeAll();
                    this.domElement.destroy()
                };
                _get(_getPrototypeOf(_0x16535.prototype), _0xB90A[24], this).call(this, _0x166DE)
            }), _0xC639(_0xB90A[13], _0xB90A[1260], _0xB90A[5], function _0x165E4() {
                this.setText()
            }), _0xC639(_0xB90A[13], _0xB90A[1261], _0xB90A[5], function _0x16616() {
                var _0x10248 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _0xB90A[27];
                if (null !== this.placeHolder) {
                    if (_0x10248.length > 0) {
                        this.placeHolder.visible = false
                    } else {
                        this.placeHolder.visible = true
                    }
                };
                this.value = this.getFormattedText(_0x10248);
                this.domElement.value = this.value;
                this.updateText();
                this.updateCursor();
                this.endFocus()
            }), _0xC639(_0xB90A[13], _0xB90A[1262], _0xB90A[5], function _0x16599(_0x10248) {
                switch (this.inputOptions.forceCase) {
                    default:;
                    case _0x1651C.none:
                            return _0x10248;
                    case _0x1651C.lower:
                            return _0x10248.toLowerCase();
                    case _0x1651C.upper:
                            return _0x10248.toUpperCase()
                }
            }), _0xC639(_0xB90A[13], _0xB90A[599], _0xB90A[8], function _0xE8CB() {
                return this.inputOptions.width
            }, _0xB90A[95], function _0x11D87(_0xE92F) {
                this.inputOptions.width = _0xE92F;
                this.box.resize(_0xE92F);
                this.textMask.resize(_0xE92F);
                this.updateTextAlignment()
            })]);
            return _0x16535
        }(Phaser.Sprite);
        PhaserInput.InputField = _0x16535
    }

    function _0xC5BC(PhaserInput) {
        PhaserInput.Zoomed = false;
        PhaserInput.KeyboardOpen = false;
        PhaserInput.onKeyboardOpen = new Phaser.Signal();
        PhaserInput.onKeyboardClose = new Phaser.Signal();
        var _0x16823 = function(_0x1683C) {
            _0xBA1D(_0x16823, _0x1683C);

            function _0x16823(_0x164D1, _0x16134) {
                var _0x16887;
                _0xB955(this, _0x16823);
                _0x16887 = _0xB9A0(this, _getPrototypeOf(_0x16823).call(this, _0x164D1, _0x16134));
                _0x16887.addInputFieldFactory();
                return _0x16887
            }
            _0xB987(_0x16823, [_0xC639(_0xB90A[13], _0xB90A[1263], _0xB90A[5], function _0x16855() {
                Phaser.GameObjectFactory.prototype.inputField = function(_0xD6A1, _0xD6BA, _0x16774, _0x1487F) {
                    if (_0x1487F === undefined) {
                        _0x1487F = this.world
                    };
                    var _0x1686E = new PhaserInput.InputField(this.game, _0xD6A1, _0xD6BA, _0x16774);
                    return _0x1487F.add(_0x1686E)
                };
                Phaser.GameObjectCreator.prototype.inputField = function(_0xD6A1, _0xD6BA, _0x16774) {
                    return new PhaserInput.InputField(this.game, _0xD6A1, _0xD6BA, _0x16774)
                }
            })]);
            return _0x16823
        }(Phaser.Plugin);
        _0x16823.Zoomed = false;
        _0x16823.KeyboardOpen = false;
        _0x16823.onKeyboardOpen = new Phaser.Signal();
        _0x16823.onKeyboardClose = new Phaser.Signal();
        PhaserInput.Plugin = _0x16823
    }

    function _0xC5D5(PhaserInput) {
        var _0x168A0 = function(_0x168B9) {
            _0xBA1D(_0x168A0, _0x168B9);

            function _0x168A0(_0x164D1, _0x16774) {
                var _0x168EB;
                _0xB955(this, _0x168A0);
                _0x168EB = _0xB9A0(this, _getPrototypeOf(_0x168A0).call(this, _0x164D1, 0, 0));
                _0x168EB.bgColor = _0x16774.backgroundColor ? parseInt(_0x16774.backgroundColor.slice(1), 16) : 0xffffff;
                _0x168EB.borderRadius = _0x16774.borderRadius || 0;
                _0x168EB.borderWidth = _0x16774.borderWidth || 1;
                _0x168EB.borderColor = _0x16774.borderColor ? parseInt(_0x16774.borderColor.slice(1), 16) : 0x959595;
                _0x168EB.boxAlpha = _0x16774.fillAlpha;
                _0x168EB.padding = _0x16774.padding;
                var _0xE916 = _0x16774.height;
                var _0xE92F = _0x16774.width;
                var _0xE916;
                if (_0x16774.font) {
                    _0xE916 = Math.max(parseInt(_0x16774.font.substr(0, _0x16774.font.indexOf(_0xB90A[1216])), 10), _0xE916)
                };
                _0x168EB.boxHeight = _0x168EB.padding * 2 + _0xE916;
                var _0xE92F = _0x16774.width;
                _0x168EB.boxWidth = _0x168EB.padding * 2 + _0xE92F;
                _0x168EB.drawBox();
                return _0x168EB
            }
            _0xB987(_0x168A0, [_0xC639(_0xB90A[13], _0xB90A[343], _0xB90A[5], function _0xE8E4(_0x16904) {
                this.boxWidth = this.padding * 2 + _0x16904;
                this.drawBox()
            }), _0xC639(_0xB90A[13], _0xB90A[1264], _0xB90A[5], function _0x168D2() {
                this.clear().beginFill(this.bgColor, this.boxAlpha).lineStyle(this.borderWidth, this.borderColor, this.boxAlpha);
                if (this.borderRadius > 0) {
                    this.drawRoundedRect(0, 0, this.boxWidth, this.boxHeight, this.borderRadius)
                } else {
                    this.drawRect(0, 0, this.boxWidth, this.boxHeight)
                }
            })]);
            return _0x168A0
        }(Phaser.Graphics);
        PhaserInput.InputBox = _0x168A0
    }

    function _0xC5EE(PhaserInput) {
        var _0x1691D = function(_0x16936) {
            _0xBA1D(_0x1691D, _0x16936);

            function _0x1691D(_0x164D1, _0x16774) {
                var _0x16968;
                _0xB955(this, _0x1691D);
                _0x16968 = _0xB9A0(this, _getPrototypeOf(_0x1691D).call(this, _0x164D1, _0x16774.padding, _0x16774.padding));
                _0x16968.inputOptions = _0x16774;
                return _0x16968
            }
            _0xB987(_0x1691D, [_0xC639(_0xB90A[13], _0xB90A[1252], _0xB90A[5], function _0x16661(_0x10BF3) {
                var _0x106DF = Phaser.Color.webToColor(this.inputOptions.selectionColor);
                this.clear();
                this.beginFill(_0x1691D.rgb2hex(_0x106DF), _0x106DF.a);
                this.drawRect(_0x10BF3.x, _0x10BF3.y, _0x10BF3.width, _0x10BF3.height - this.inputOptions.padding)
            })], [_0xC639(_0xB90A[13], _0xB90A[1265], _0xB90A[5], function _0x1694F(_0x106DF) {
                return parseInt((_0xB90A[114] + _0x106DF.r.toString(16)).slice(-2) + (_0xB90A[114] + _0x106DF.g.toString(16)).slice(-2) + (_0xB90A[114] + _0x106DF.b.toString(16)).slice(-2), 16)
            })]);
            return _0x1691D
        }(Phaser.Graphics);
        PhaserInput.SelectionHighlight = _0x1691D
    }

    function _0xC607(PhaserInput) {
        var _0x16981 = function(_0x1699A) {
            _0xBA1D(_0x16981, _0x1699A);

            function _0x16981(_0x164D1, _0x16774) {
                var _0x169CC;
                _0xB955(this, _0x16981);
                _0x169CC = _0xB9A0(this, _getPrototypeOf(_0x16981).call(this, _0x164D1, _0x16774.padding, _0x16774.padding));
                var _0xE916 = _0x16774.height;
                if (_0x16774.font) {
                    _0xE916 = Math.max(parseInt(_0x16774.font.substr(0, _0x16774.font.indexOf(_0xB90A[1216])), 10), _0xE916)
                };
                _0x169CC.maskWidth = _0x16774.width;
                _0x169CC.maskHeight = _0xE916 * 1.3;
                _0x169CC.drawMask();
                return _0x169CC
            }
            _0xB987(_0x16981, [_0xC639(_0xB90A[13], _0xB90A[343], _0xB90A[5], function _0xE8E4(_0x16904) {
                this.maskWidth = _0x16904;
                this.drawMask()
            }), _0xC639(_0xB90A[13], _0xB90A[1266], _0xB90A[5], function _0x169B3() {
                this.clear().beginFill(0x000000).drawRect(0, 0, this.maskWidth, this.maskHeight).endFill()
            })]);
            return _0x16981
        }(Phaser.Graphics);
        PhaserInput.TextMask = _0x16981
    }
    _typeof = _0xB923;
    _instanceof = _0xB93C;
    _classCallCheck = _0xB955;
    _defineProperties = _0xB96E;
    _createClass = _0xB987;
    _possibleConstructorReturn = _0xB9A0;
    _assertThisInitialized = _0xB9B9;
    _get = _0xB9D2;
    _superPropBase = _0xB9EB;
    _getPrototypeOf = _0xBA04;
    _inherits = _0xBA1D;
    _setPrototypeOf = _0xBA36;
    _0xB90A[0];
    (_0xBA4F)(Components || (Components = {}));
    (_0xBA68)(Components || (Components = {}));
    (_0xBA81)(Components || (Components = {}));
    (_0xBA9A)(Components || (Components = {}));
    (_0xBAB3)(Components || (Components = {}));
    (_0xBACC)(Components || (Components = {}));
    (_0xBAE5)(Components || (Components = {}));
    (_0xBAFE)(Components || (Components = {}));
    (_0xBB17)(Components || (Components = {}));
    (_0xBB30)(Components || (Components = {}));
    (_0xBB49)(Components || (Components = {}));
    (_0xBB62)(Components || (Components = {}));
    (_0xBB7B)(Components || (Components = {}));
    (_0xBB94)(Components || (Components = {}));
    (_0xBBAD)(Components || (Components = {}));
    (_0xBBC6)(Components || (Components = {}));
    (_0xBBDF)(Components || (Components = {}));
    (_0xBBF8)(Components || (Components = {}));
    (_0xBC11)(Components || (Components = {}));
    (_0xBC2A)(Components || (Components = {}));
    (_0xBC43)(Components || (Components = {}));
    (_0xBC5C)(Components || (Components = {}));
    (_0xBC75)(Components || (Components = {}));
    (_0xBC8E)(Components || (Components = {}));
    (_0xBCA7)(Components || (Components = {}));
    (_0xBCC0)(Components || (Components = {}));
    (_0xBCD9)(Components || (Components = {}));
    (_0xBCF2)(Components || (Components = {}));
    (_0xBD0B)(Components || (Components = {}));
    (_0xBD24)(Components || (Components = {}));
    (_0xBD3D)(Components || (Components = {}));
    (_0xBD56)(Components || (Components = {}));
    (_0xBD6F)(Components || (Components = {}));
    (_0xBD88)(Components || (Components = {}));
    (_0xBDA1)(Components || (Components = {}));
    (_0xBDBA)(Components || (Components = {}));
    (_0xBDD3)(Components || (Components = {}));
    (_0xBDEC)(Components || (Components = {}));
    (_0xBE05)(Components || (Components = {}));
    (_0xBE1E)(Components || (Components = {}));
    (_0xBE37)(Components || (Components = {}));
    (_0xBE50)(Components || (Components = {}));
    (_0xBE69)(Components || (Components = {}));
    (_0xBE82)(Components || (Components = {}));
    (_0xBE9B)(Components || (Components = {}));
    (_0xBEB4)(Components || (Components = {}));
    (_0xBECD)(Components || (Components = {}));
    (_0xBEE6)(Components || (Components = {}));
    (_0xBEFF)(Components || (Components = {}));
    (_0xBF18)(Components || (Components = {}));
    (_0xBF31)(Components || (Components = {}));
    (_0xBF4A)(Components || (Components = {}));
    (_0xBF63)(Components || (Components = {}));
    (_0xBF7C)(Components || (Components = {}));
    (_0xBF95)(Components || (Components = {}));
    (_0xBFAE)(Components || (Components = {}));
    (_0xBFC7)(Components || (Components = {}));
    (_0xBFE0)(Components || (Components = {}));
    (_0xBFF9)(Components || (Components = {}));
    (_0xC012)(Components || (Components = {}));
    (_0xC02B)(Components || (Components = {}));
    (_0xC044)(Components || (Components = {}));
    (_0xC05D)(Components || (Components = {}));
    (_0xC076)(Components || (Components = {}));
    (_0xC08F)(Components || (Components = {}));
    (_0xC0A8)(Components || (Components = {}));
    (_0xC0C1)(Components || (Components = {}));
    (_0xC0DA)(Components || (Components = {}));
    (_0xC0F3)(Components || (Components = {}));
    (_0xC10C)(Components || (Components = {}));
    (_0xC125)(Components || (Components = {}));
    (_0xC13E)(Components || (Components = {}));
    (_0xC157)(Components || (Components = {}));
    (_0xC170)(Components || (Components = {}));
    (_0xC189)(Components || (Components = {}));
    (_0xC1A2)(Components || (Components = {}));
    (_0xC1BB)(Components || (Components = {}));
    (_0xC1D4)(Components || (Components = {}));
    (_0xC1ED)(Components || (Components = {}));
    (_0xC206)(Components || (Components = {}));
    (_0xC21F)(Components || (Components = {}));
    (_0xC238)(Components || (Components = {}));
    (_0xC251)(Components || (Components = {}));
    (_0xC26A)(Components || (Components = {}));
    (_0xC283)(Components || (Components = {}));
    (_0xC29C)(Components || (Components = {}));
    (_0xC2B5)(Components || (Components = {}));
    (_0xC2CE)(Components || (Components = {}));
    (_0xC2E7)(Components || (Components = {}));
    (_0xC300)(Components || (Components = {}));
    (_0xC319)(Components || (Components = {}));
    (_0xC332)(Components || (Components = {}));
    (_0xC34B)(Components || (Components = {}));
    (_0xC364)(Components || (Components = {}));
    (_0xC37D)(Components || (Components = {}));
    (_0xC396)(Components || (Components = {}));
    (_0xC3AF)(Components || (Components = {}));
    (_0xC3C8)(Components || (Components = {}));
    (_0xC3E1)(Components || (Components = {}));
    (_0xC3FA)(Components || (Components = {}));
    (_0xC413)(Components || (Components = {}));
    GameObject = Scene.GameObject;
    (_0xC42C)(Components || (Components = {}));
    (_0xC445)(Components || (Components = {}));
    (_0xC45E)(Components || (Components = {}));
    (_0xC477)(Components || (Components = {}));
    (_0xC490)(Components || (Components = {}));
    (_0xC4A9)(Components || (Components = {}));
    (_0xC4C2)(Components || (Components = {}));
    (_0xC4DB)(Components || (Components = {}));
    (_0xC4F4)(Components || (Components = {}));
    (_0xC50D)(Components || (Components = {}));
    (_0xC526)(Components || (Components = {}));
    (_0xC53F)(Components || (Components = {}));
    (_0xC558)(Components || (Components = {}));
    (_0xC571)(Components || (Components = {}));
    (_0xC58A)(PhaserInput || (PhaserInput = {}));
    (_0xC5A3)(PhaserInput || (PhaserInput = {}));
    (_0xC5BC)(PhaserInput || (PhaserInput = {}));
    (_0xC5D5)(PhaserInput || (PhaserInput = {}));
    (_0xC5EE)(PhaserInput || (PhaserInput = {}));
    (_0xC607)(PhaserInput || (PhaserInput = {}))
})()